(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function getQueryParameterByName(e){var t=RegExp("[?&]"+e+"=([^&]*)").exec(window.location.search);return t&&decodeURIComponent(t[1].replace(/\+/g," "))}var $=require("jquery");window.$=window.jQuery=$,require("./upload.js")($);var suiteh=window.suiteh={};suiteh.sitemap=require("./sitemap.js").init,$(function(){function e(e){return"false"!==e&&("true"===e||e)}$('a[data-method="delete"]').on("click",function(e){e.preventDefault();var t=$(e.currentTarget),a=t.attr("href"),n=t.data("confirm");if(!n||confirm(n)){var r=$('<form id="delete-method-form" />');r.attr("action",a),r.attr("method","POST"),r.append($('<input type="hidden" name="_method" value="DELETE" />')),$("body").append(r),r.submit(),r.remove()}}),$("a[data-use-redirect-query]").on("click",function(e){e.preventDefault();var t=getQueryParameterByName("redirect");window.location=t}),$("form[data-site-settings]").submit(function(e){e.preventDefault();var t=$(this),a=t.serializeArray(),n={};$.each(a,function(e,t){n[t.name]=t.value}),$.ajax(t.attr("action"),{method:"PATCH",contentType:"application/json",dataType:"json",data:JSON.stringify(n),xhrFields:{withCredentials:!0}}).then(function(e){console.log(e)}).fail(function(e){console.log("error",e)})});var t=function(e){return $.ajax(e,{method:"GET",contentType:"application/json",dataType:"json",xhrFields:{withCredentials:!0}})},a=function(t){for(var a=(t||{}).data,n=Object.keys(a),r=0,i=n.length;r<i;r++){var o=n[r],c=a[o],s=$('[name="'+o+'"]');"radio"===s.attr("type")?s.each(function(){var t=$(this);t.prop("checked",!1),e(t.val())==c&&t.prop("checked",!0)}):s.val(c)}};$('a[data-toggle="tab"][data-site-settings]').on("shown.bs.tab",function(e){var n=$("form",$(e.target).attr("href")),r=n.attr("action");r&&t(r).then(a).fail(function(e){console.log("error",e)})}),function(e){if(0!=e.length){var n=e.attr("action");t(n).then(a).fail(function(e){console.log("error",e)})}}($(".tab-pane.active form[data-site-settings]")),require("./sitemap-behavior.js")});

},{"./sitemap-behavior.js":2,"./sitemap.js":3,"./upload.js":5,"jquery":9}],2:[function(require,module,exports){
"use strict";$("#page-view-selector").on("click","a",function(){return $(this).hasClass("tree-view")&&($("#page-tree-view").hide(),$("#page-list-view").show(),$("#page-view-selector").html('<a href="#" class="list-view">Click for Tree View</a>')),$(this).hasClass("list-view")&&($("#page-list-view").hide(),$("#page-tree-view").show(),$("#page-view-selector").html('<a href="#" class="tree-view">Click for List View</a>')),!1});

},{}],3:[function(require,module,exports){
"use strict";function init(e){var t=$.Deferred();return getRoutes(e).then(function(e,a,n){jstree(insertNewPageNodes(e.data)),t.resolve()}).fail(t.reject),t.promise()}function _jstree(){return $("[data-route-map-tree]").jstree(!0)}function addNode(e,t,a,n){var o=_jstree().get_node(t),r=o.children.length-1;if(a){var i=dirname(e.path),s=_jstree().get_node(i);s||(s={id:i,parent:o.id,text:pathjoin("/",basename(i)),state:{opened:!0}},_jstree().create_node(o.id,s,r),_jstree().create_node(s.id,extend({},newPageNode,{id:s.id+"/+-new-page",parent:s.id}),0)),o=s,r=o.children?o.children.length-1:0}var s={id:e.path,parent:o.id,text:pathjoin("/",basename(e.path))};_jstree().create_node(o.id,s,r,n)}function removeNode(e,t){var a=_jstree().get_node(e);_jstree().delete_node(a);var n=_jstree().get_node(a.parent);n&&1==n.children.length&&_jstree().delete_node(n),t()}function updateNode(e,t){var a=e.path,n=e.new_path,o=_jstree().get_node(a);_jstree().rename_node(o,pathjoin("/",basename(n))),_jstree().set_id(o,n),t()}function jstree(e){var t=$("#new-page-modal"),a=function(){$(".page-dir").hide(),$(".page-name").removeClass("col-sm-6"),$(".page-name").addClass("col-sm-12"),$('[name="page.dir"]').val("")};t.bind("hide.bs.modal",function(e){$('[name="page.name"]').val(""),$('[name="page.is_dir"]').prop("checked",!1).change()}),$('[name="page.is_dir"]:checkbox').on("change",function(e){e.preventDefault();var t=$(e.currentTarget);$(t).is(":checked")?($(".page-dir").show(),$(".page-name").removeClass("col-sm-12"),$(".page-name").addClass("col-sm-6")):a()}),$('[rel="create-new-page"]',t).on("click",function(e){e.preventDefault();var a=t.data("node-parent"),n=$('[name="page.name"]').val();if(n&&/^[a-z0-9_\-]+\.html$/i.test(n)){var o=$('[name="page.is_dir"]:checkbox').is(":checked");if(o){var r=$('[name="page.dir"]').val();if(!/^[a-z0-9_\-]+\/$/i.test(r))return;n=pathjoin("/",r,n)}n=pathjoin("/","#"===a?"":a,n),postRoute(siteId,{path:n,filepath:"/.page.html"}).then(function(e,n,r){addNode(e,a,o,function(){t.modal("hide")})}).fail(function(e){console.log("error",e)}),setTimeout(function(){$(".jstree-container-ul > li.jstree-last > a").trigger("click")},100)}}),$('[rel="delete-page-or-dir"]',t).on("click",function(e){e.preventDefault();var a=$(e.currentTarget),n=a.data("path");console.log("delete-page-or-dir",a.data("path")),deleteRoute(siteId,n).then(function(e,a,n){if(!e.path)return void console.log("TODO when no path");removeNode(e.path,function(){t.modal("hide")})}).fail(function(e){console.log("error",e)}),setTimeout(function(){$(".jstree-container-ul > li.jstree-last > a").trigger("click")},100)});var n,o;$('[rel="update-page-setting"]',t).on("click",function(e){e.preventDefault();var a=$(e.currentTarget),r=a.data("path"),i=t.data("node-parent"),s=$('[name="page.name"]').val();if(s&&/^[a-z0-9_\-]+\.html$/i.test(s)){s=pathjoin("/","#"===i?"":i,s),console.log("update-page-setting",r,s);var d=extend({},o,{data:n.get()});d.path=s,updateRoute(siteId,r,d).then(function(e,a,n){updateNode(e,function(){t.modal("hide")})}).fail(function(e){console.log("error",e)})}}),$("[data-route-map-tree]").on("changed.jstree",function(e,a){var r=a.selected[0],i=a.node.parent,s="#"===i?"":i;$('[for="page.name"]',t).html(s+"/"),t.data("node-parent",i),$(".page-settings").html(""),/\+-new-page$/.test(r)?($(".modal-title",t).html("New Page"),$('[rel="create-new-page"]',t).show(),$('[rel="delete-page-or-dir"]',t).hide(),$('[rel="update-page-setting"]',t).hide(),$('[rel="edit-page"]',t).hide()):($('[name="page.name"]').val(a.node.text.substring(1,a.node.text.length)),$(".modal-title",t).html("Page: "+r),$('[rel="create-new-page"]',t).hide(),$('[rel="delete-page-or-dir"]',t).data("path",r).show(),$('[rel="update-page-setting"]',t).data("path",r).show(),$('[rel="edit-page"]',t).attr("href",url("edit",host,a.selected)).show(),isDir(r)?($(".modal-title",t).html("Directory: "+r),$('[rel="edit-page"]').hide(),$('[rel="update-page-setting"]').hide(),$(".modal-body").hide()):($(".modal-body").show(),$(".page-settings").html("Loading page settings..."),getConf(r).then(function(e){o=e,getFields(o).then(function(e){var t=(e.fields.page||[]).join("")+(e.fields.meta||[]).join("");n=new Ractive({el:".page-settings",template:t,data:o.data})})}).fail(function(e){console.log(e)})))}).jstree({core:{check_callback:!0,multiple:!1,data:e},sort:function(e,t){return console.log("sort function"),this.get_type(e)===this.get_type(t)?this.get_text(t)>this.get_text(e)?1:-1:this.get_type(t)>=this.get_type(e)?1:-1},contextmenu:{items:function(e){$("#tree").jstree(!0);return{Edit:{separator_before:!1,separator_after:!1,label:"",action:function(){var t=url("edit",host,e.id);window.open(t,"_blank")}},Delete:{separator_before:!1,separator_after:!1,label:""}}}},noclose:void jQuery,plugins:["sort","types","contextmenu","noclose"]}).on("loaded.jstree changed.jstree",function(){$(".jstree-container-ul a").hover(function(){if($(this).parent().hasClass("jstree-last"))$.vakata.context.hide(),$(".jstree-clicked").removeClass("jstree-clicked"),$(this).on("click",function(){t.modal("show")});else{$(this).addClass("jstree-clicked");var e=$(this).offset();$("[data-route-map-tree]").jstree("show_contextmenu",$(this)),$("ul.vakata-context").css("left",e.left+180+"px").css("top",e.top+2+"px"),$(".vakata-context li:first-child a").addClass("glyphicon glyphicon-pencil"),$(".vakata-context li:last-child a").addClass("glyphicon glyphicon-cog"),$(".vakata-context li:last-child a").on("click",function(){t.modal("show")})}}).click(function(){if(!$(this).parent().hasClass("jstree-last"))return!1})})}function isDir(e){return console.log(e),!/(\.html|\+-new-page|:\w+)$/.test(e)}function insertNewPageNodes(e){for(var t=[],a=0,n=e.length;a<n;a++){var o=e[a];if(o.is_dir){var r=o.id;t.push(extend({},newPageNode,{id:r+"/+-new-page",parent:r}))}}return t.push(extend({},newPageNode,{id:"/+-new-page",parent:"#"})),[].concat(e,t)}function postRoute(e,t){return $.ajax({method:"POST",url:"//"+host+"/sites/"+e+"/routes",data:JSON.stringify(t),dataType:"json",contentType:"application/json; charset=utf-8",xhrFields:{withCredentials:!0}})}function getRoutes(e){return $.ajax({method:"GET",url:"//"+host+"/sites/"+e+"/routes",xhrFields:{withCredentials:!0},accepts:{json:"application/json"},dataType:"json"})}function deleteRoute(e,t){return $.ajax({method:"DELETE",url:"//"+host+"/sites/"+e+"/routes"+t,xhrFields:{withCredentials:!0},accepts:{json:"application/json"}})}function updateRoute(e,t,a){return $.ajax({method:"PATCH",url:"//"+e+"."+host+"/patch"+t,data:JSON.stringify(a),dataType:"json",contentType:"application/json; charset=utf-8",xhrFields:{withCredentials:!0}})}function getConf(e){return new Template(e).get("json")}function getFields(e){return e||(e={}),$.ajax({method:"POST",data:JSON.stringify(e),url:"//"+siteId+"."+host+"/fields/for",xhrFields:{withCredentials:!0},dataType:"json",contentType:"application/json; charset=utf-8"})}var $=require("jquery"),extend=require("extend"),url=require("./url.js"),Template=require("./template.js"),Ractive=require("ractive"),path=require("path"),basename=path.basename,dirname=path.dirname,pathjoin=path.join;window.$=window.jQuery=$,require("../../node_modules/bootstrap/js/modal.js"),require("jstree"),console.log("sitemap.js works"),exports.init=init;var newPageNode={id:"",parent:"",text:"+ New Page"};

},{"../../node_modules/bootstrap/js/modal.js":7,"./template.js":4,"./url.js":6,"extend":8,"jquery":9,"jstree":10,"path":11,"ractive":13}],4:[function(require,module,exports){
"use strict";function Template(e){this.path=e}function call(e,t,r){void 0!==e&&""!==e||(e="html");var a=$.Deferred(),l={method:t,url:url(e,host,r),xhrFields:{withCredentials:!0}};return"conf"===e&&(l.accepts={json:"application/json"},l.dataType="json"),$.ajax(l).then(a.resolve).fail(a.resolve),a.promise()}var $=require("jquery"),url=require("./url.js");Template.prototype.get=function(e,t){var r=this.path;return t&&(r+="?skip_inspection=true"),call(e,"GET",r)},Template.prototype.head=function(e){return call(e,"HEAD",this.path)},module.exports=Template;

},{"./url.js":6,"jquery":9}],5:[function(require,module,exports){
"use strict";module.exports=function(e,t){function r(t){t.show();var r=e(".progress-bar",t),n=e(".sr-only",t);return function(e){var t=e.percent+"%";r.css("width",t),n.html(t)}}function n(t,r){var n=new FormData,a=new XMLHttpRequest;n.append("key",r.key),n.append("acl",r.acl||"public-read"),n.append("Policy",r.policy),null!==r.type&&n.append("Content-Type",r.type||t.type||"application/octet-stream"),null!==r.size&&n.append("Content-Length",r.size||t.size),n.append("X-Amz-Credential",r.credential),n.append("X-Amz-Algorithm",r.algorithm||"AWS4-HMAC-SHA256"),n.append("X-Amz-Signature",r.signature),n.append("X-Amz-Date",r.date),n.append("file",t);var o=e.Deferred();return r.onprogress&&a.upload.addEventListener("progress",function(e){e.percent=e.loaded/e.total*100,r.onprogress(e)},!1),a.onreadystatechange=function(){if(4==a.readyState){if(a.status<400)return o.resolve({url:r.action+"/"+r.key.replace("${filename}",t.name)});var e=new Error(a.responseText);e.status=a.status,e.statusText=a.statusText,o.reject(e)}},a.open("POST",r.action,!0),a.send(n),o.promise()}function a(a){return function(p){var i;i="droppable"===a?p.originalEvent.dataTransfer.files:p.currentTarget.files,i=o(i);var s=e(p.currentTarget).closest("[data-type]"),l=e(".progress",s),d=e("[data-path]",s).attr("data-path");e.when.apply(e,i).then(function(e,t,a,o){return t.onprogress=r(l),n(e,t)}).then(function(r){setTimeout(function(){l.hide()},350),console.log("preview",e(".image-preview",s)),e("input[name='"+d+"']",s).val(r.url),e(".image-preview",s).attr("src",r.url).removeClass("hidden").show(),t&&t.set(d,r.url)}).fail(function(e,t,r,n){console.log("error",n)})}}function o(t){var r=[];return e.each(t,function(t,n){var a=e.Deferred();e.ajax({method:"get",url:"//"+host+"/api/s3/"+siteId+"/sign/"+n.name+"?type="+n.type+"&size="+n.size,xhrFields:{withCredentials:!0},success:function(e,t,r){a.resolve(n,e,t,r)},error:function(e,t,r){a.reject(n,e,t,r)}}),r.push(a.promise())}),r}return e(function(){e(".droppable.upload").on("drag dragstart dragend dragover dragleave drop",function(e){e.preventDefault(),e.stopPropagation()}).on("dragover dragenter",function(e){console.log("dragover dragenter")}).on("dragleave dragend drop",function(e){console.log("drop")}).on("drop",a("droppable")),e('input[type="file"]').on("change",a("input")),e('[rel="clear-file"]').on("click",function(r){r.preventDefault(),console.log("clear-file");var n=e(r.currentTarget),a=n.closest("[data-type]"),o=e(".droppable.upload",a).data("path");e('[type="file"]',a).val(""),e('[name="'+o+'"]',a).val(""),"image"===a.data("as")&&e(".image-preview",a).attr("src","").hide(),t&&t.set(o,"")})}),a};

},{}],6:[function(require,module,exports){
"use strict";function url(r,t,u){return["//",siteId,".",t,"/"+r+u].join("")}module.exports=url;

},{}],7:[function(require,module,exports){
+function(t){"use strict";function e(e,i){return this.each(function(){var s=t(this),n=s.data("bs.modal"),a=t.extend({},o.DEFAULTS,s.data(),"object"==typeof e&&e);n||s.data("bs.modal",n=new o(this,a)),"string"==typeof e?n[e](i):a.show&&n.show(i)})}var o=function(e,o){this.options=o,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};o.VERSION="3.3.7",o.TRANSITION_DURATION=300,o.BACKDROP_TRANSITION_DURATION=150,o.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},o.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},o.prototype.show=function(e){var i=this,s=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(s),this.isShown||s.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(i.$element)&&(i.ignoreBackdropClick=!0)})}),this.backdrop(function(){var s=t.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.adjustDialog(),s&&i.$element[0].offsetWidth,i.$element.addClass("in"),i.enforceFocus();var n=t.Event("shown.bs.modal",{relatedTarget:e});s?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(n)}).emulateTransitionEnd(o.TRANSITION_DURATION):i.$element.trigger("focus").trigger(n)}))},o.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(o.TRANSITION_DURATION):this.hideModal())},o.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},o.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},o.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},o.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},o.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},o.prototype.backdrop=function(e){var i=this,s=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var n=t.support.transition&&s;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+s).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){if(this.ignoreBackdropClick)return void(this.ignoreBackdropClick=!1);t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),n&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;n?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(o.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){i.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(o.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},o.prototype.handleUpdate=function(){this.adjustDialog()},o.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},o.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},o.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},o.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},o.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},o.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var i=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=o,t.fn.modal.noConflict=function(){return t.fn.modal=i,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(o){var i=t(this),s=i.attr("href"),n=t(i.attr("data-target")||s&&s.replace(/.*(?=#[^\s]+$)/,"")),a=n.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(s)&&s},n.data(),i.data());i.is("a")&&o.preventDefault(),n.one("show.bs.modal",function(t){t.isDefaultPrevented()||n.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})}),e.call(n,a,this)})}(jQuery);

},{}],8:[function(require,module,exports){
"use strict";var hasOwn=Object.prototype.hasOwnProperty,toStr=Object.prototype.toString,isArray=function(r){return"function"==typeof Array.isArray?Array.isArray(r):"[object Array]"===toStr.call(r)},isPlainObject=function(r){if(!r||"[object Object]"!==toStr.call(r))return!1;var t=hasOwn.call(r,"constructor"),o=r.constructor&&r.constructor.prototype&&hasOwn.call(r.constructor.prototype,"isPrototypeOf");if(r.constructor&&!t&&!o)return!1;var n;for(n in r);return void 0===n||hasOwn.call(r,n)};module.exports=function r(){var t,o,n,c,e,a,i=arguments[0],s=1,l=arguments.length,u=!1;for("boolean"==typeof i?(u=i,i=arguments[1]||{},s=2):("object"!=typeof i&&"function"!=typeof i||null==i)&&(i={});s<l;++s)if(null!=(t=arguments[s]))for(o in t)n=i[o],c=t[o],i!==c&&(u&&c&&(isPlainObject(c)||(e=isArray(c)))?(e?(e=!1,a=n&&isArray(n)?n:[]):a=n&&isPlainObject(n)?n:{},i[o]=r(u,a,c)):void 0!==c&&(i[o]=c));return i};

},{}],9:[function(require,module,exports){
!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=ie.type(e);return"function"!==n&&!ie.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t,n){if(ie.isFunction(t))return ie.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return ie.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(fe.test(t))return ie.filter(t,e,n);t=ie.filter(t,e)}return ie.grep(e,function(e){return Z.call(t,e)>-1!==n})}function i(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t={};return ie.each(e.match(ve)||[],function(e,n){t[n]=!0}),t}function s(){G.removeEventListener("DOMContentLoaded",s),e.removeEventListener("load",s),ie.ready()}function a(){this.expando=ie.expando+a.uid++}function u(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Ce,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:Te.test(n)?ie.parseJSON(n):n)}catch(e){}we.set(e,t,n)}else n=void 0;return n}function l(e,t,n,r){var i,o=1,s=20,a=r?function(){return r.cur()}:function(){return ie.css(e,t,"")},u=a(),l=n&&n[3]||(ie.cssNumber[t]?"":"px"),c=(ie.cssNumber[t]||"px"!==l&&+u)&&Ee.exec(ie.css(e,t));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+u||1;do{o=o||".5",c/=o,ie.style(e,t,c+l)}while(o!==(o=a()/u)&&1!==o&&--s)}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}function c(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&ie.nodeName(e,t)?ie.merge([e],n):n}function f(e,t){for(var n=0,r=e.length;n<r;n++)be.set(e[n],"globalEval",!t||be.get(t[n],"globalEval"))}function p(e,t,n,r,i){for(var o,s,a,u,l,p,d=t.createDocumentFragment(),h=[],g=0,v=e.length;g<v;g++)if((o=e[g])||0===o)if("object"===ie.type(o))ie.merge(h,o.nodeType?[o]:o);else if(Le.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(De.exec(o)||["",""])[1].toLowerCase(),u=qe[a]||qe._default,s.innerHTML=u[1]+ie.htmlPrefilter(o)+u[2],p=u[0];p--;)s=s.lastChild;ie.merge(h,s.childNodes),s=d.firstChild,s.textContent=""}else h.push(t.createTextNode(o));for(d.textContent="",g=0;o=h[g++];)if(r&&ie.inArray(o,r)>-1)i&&i.push(o);else if(l=ie.contains(o.ownerDocument,o),s=c(d.appendChild(o),"script"),l&&f(s),n)for(p=0;o=s[p++];)Ae.test(o.type||"")&&n.push(o);return d}function d(){return!0}function h(){return!1}function g(){try{return G.activeElement}catch(e){}}function v(e,t,n,r,i,o){var s,a;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(a in t)v(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=h;else if(!i)return e;return 1===o&&(s=i,i=function(e){return ie().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=ie.guid++)),e.each(function(){ie.event.add(this,t,i,r,n)})}function m(e,t){return ie.nodeName(e,"table")&&ie.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function y(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function x(e){var t=Me.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function b(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(be.hasData(e)&&(o=be.access(e),s=be.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)ie.event.add(t,i,l[i][n])}we.hasData(e)&&(a=we.access(e),u=ie.extend({},a),we.set(t,u))}}function w(e,t){var n=t.nodeName.toLowerCase();"input"===n&&je.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function T(e,t,n,r){t=J.apply([],t);var i,o,s,a,u,l,f=0,d=e.length,h=d-1,g=t[0],v=ie.isFunction(g);if(v||d>1&&"string"==typeof g&&!re.checkClone&&Re.test(g))return e.each(function(i){var o=e.eq(i);v&&(t[0]=g.call(this,i,o.html())),T(o,t,n,r)});if(d&&(i=p(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=ie.map(c(i,"script"),y),a=s.length;f<d;f++)u=i,f!==h&&(u=ie.clone(u,!0,!0),a&&ie.merge(s,c(u,"script"))),n.call(e[f],u,f);if(a)for(l=s[s.length-1].ownerDocument,ie.map(s,x),f=0;f<a;f++)u=s[f],Ae.test(u.type||"")&&!be.access(u,"globalEval")&&ie.contains(l,u)&&(u.src?ie._evalUrl&&ie._evalUrl(u.src):ie.globalEval(u.textContent.replace(Ie,"")))}return e}function C(e,t,n){for(var r,i=t?ie.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||ie.cleanData(c(r)),r.parentNode&&(n&&ie.contains(r.ownerDocument,r)&&f(c(r,"script")),r.parentNode.removeChild(r));return e}function k(e,t){var n=ie(t.createElement(e)).appendTo(t.body),r=ie.css(n[0],"display");return n.detach(),r}function E(e){var t=G,n=$e[e];return n||(n=k(e,t),"none"!==n&&n||(We=(We||ie("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=We[0].contentDocument,t.write(),t.close(),n=k(e,t),We.detach()),$e[e]=n),n}function N(e,t,n){var r,i,o,s,a=e.style;return n=n||Xe(e),s=n?n.getPropertyValue(t)||n[t]:void 0,""!==s&&void 0!==s||ie.contains(e.ownerDocument,e)||(s=ie.style(e,t)),n&&!re.pixelMarginRight()&&_e.test(s)&&Be.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o),void 0!==s?s+"":s}function S(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function j(e){if(e in Je)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Qe.length;n--;)if((e=Qe[n]+t)in Je)return e}function D(e,t,n){var r=Ee.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function A(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;o<4;o+=2)"margin"===n&&(s+=ie.css(e,n+Ne[o],!0,i)),r?("content"===n&&(s-=ie.css(e,"padding"+Ne[o],!0,i)),"margin"!==n&&(s-=ie.css(e,"border"+Ne[o]+"Width",!0,i))):(s+=ie.css(e,"padding"+Ne[o],!0,i),"padding"!==n&&(s+=ie.css(e,"border"+Ne[o]+"Width",!0,i)));return s}function q(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=Xe(e),s="border-box"===ie.css(e,"boxSizing",!1,o);if(i<=0||null==i){if(i=N(e,t,o),(i<0||null==i)&&(i=e.style[t]),_e.test(i))return i;r=s&&(re.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+A(e,t,n||(s?"border":"content"),r,o)+"px"}function L(e,t){for(var n,r,i,o=[],s=0,a=e.length;s<a;s++)r=e[s],r.style&&(o[s]=be.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&Se(r)&&(o[s]=be.access(r,"olddisplay",E(r.nodeName)))):(i=Se(r),"none"===n&&i||be.set(r,"olddisplay",i?n:ie.css(r,"display"))));for(s=0;s<a;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}function H(e,t,n,r,i){return new H.prototype.init(e,t,n,r,i)}function O(){return e.setTimeout(function(){Ke=void 0}),Ke=ie.now()}function F(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)n=Ne[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function P(e,t,n){for(var r,i=(I.tweeners[t]||[]).concat(I.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function R(e,t,n){var r,i,o,s,a,u,l,c=this,f={},p=e.style,d=e.nodeType&&Se(e),h=be.get(e,"fxshow");n.queue||(a=ie._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,c.always(function(){c.always(function(){a.unqueued--,ie.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],l=ie.css(e,"display"),"inline"===("none"===l?be.get(e,"olddisplay")||E(e.nodeName):l)&&"none"===ie.css(e,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",c.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],et.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(d?"hide":"show")){if("show"!==i||!h||void 0===h[r])continue;d=!0}f[r]=h&&h[r]||ie.style(e,r)}else l=void 0;if(ie.isEmptyObject(f))"inline"===("none"===l?E(e.nodeName):l)&&(p.display=l);else{h?"hidden"in h&&(d=h.hidden):h=be.access(e,"fxshow",{}),o&&(h.hidden=!d),d?ie(e).show():c.done(function(){ie(e).hide()}),c.done(function(){var t;be.remove(e,"fxshow");for(t in f)ie.style(e,t,f[t])});for(r in f)s=P(d?h[r]:0,r,c),r in h||(h[r]=s.start,d&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function M(e,t){var n,r,i,o,s;for(n in e)if(r=ie.camelCase(n),i=t[r],o=e[n],ie.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(s=ie.cssHooks[r])&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function I(e,t,n){var r,i,o=0,s=I.prefilters.length,a=ie.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=Ke||O(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;s<u;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),o<1&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:ie.extend({},t),opts:ie.extend(!0,{specialEasing:{},easing:ie.easing._default},n),originalProperties:t,originalOptions:n,startTime:Ke||O(),duration:n.duration,tweens:[],createTween:function(t,n){var r=ie.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),c=l.props;for(M(c,l.opts.specialEasing);o<s;o++)if(r=I.prefilters[o].call(l,e,c,l.opts))return ie.isFunction(r.stop)&&(ie._queueHooks(l.elem,l.opts.queue).stop=ie.proxy(r.stop,r)),r;return ie.map(c,P,l),ie.isFunction(l.opts.start)&&l.opts.start.call(e,l),ie.fx.timer(ie.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function W(e){return e.getAttribute&&e.getAttribute("class")||""}function $(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(ve)||[];if(ie.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function B(e,t,n,r){function i(a){var u;return o[a]=!0,ie.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||s||o[l]?s?!(u=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),u}var o={},s=e===gt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function _(e,t){var n,r,i=ie.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&ie.extend(!0,e,r),e}function X(e,t,n){for(var r,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}function z(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=l[u+" "+o]||l["* "+o]))for(i in l)if(a=i.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function U(e,t,n,r){var i;if(ie.isArray(t))ie.each(t,function(t,i){n||yt.test(e)?r(e,i):U(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==ie.type(t))r(e,t);else for(i in t)U(e+"["+i+"]",t[i],n,r)}function V(e){return ie.isWindow(e)?e:9===e.nodeType&&e.defaultView}var Y=[],G=e.document,Q=Y.slice,J=Y.concat,K=Y.push,Z=Y.indexOf,ee={},te=ee.toString,ne=ee.hasOwnProperty,re={},ie=function(e,t){return new ie.fn.init(e,t)},oe=function(e,t){return t.toUpperCase()};ie.fn=ie.prototype={jquery:"2.2.4",constructor:ie,selector:"",length:0,toArray:function(){return Q.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:Q.call(this)},pushStack:function(e){var t=ie.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return ie.each(this,e)},map:function(e){return this.pushStack(ie.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(Q.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:K,sort:Y.sort,splice:Y.splice},ie.extend=ie.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||ie.isFunction(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(ie.isPlainObject(r)||(i=ie.isArray(r)))?(i?(i=!1,o=n&&ie.isArray(n)?n:[]):o=n&&ie.isPlainObject(n)?n:{},s[t]=ie.extend(l,o,r)):void 0!==r&&(s[t]=r));return s},ie.extend({expando:"jQuery"+("2.2.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ie.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!ie.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){var t;if("object"!==ie.type(e)||e.nodeType||ie.isWindow(e))return!1;if(e.constructor&&!ne.call(e,"constructor")&&!ne.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||ne.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ee[te.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;(e=ie.trim(e))&&(1===e.indexOf("use strict")?(t=G.createElement("script"),t.text=e,G.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,oe)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var r,i=0;if(n(e))for(r=e.length;i<r&&t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?ie.merge(r,"string"==typeof e?[e]:e):K.call(r,e)),r},inArray:function(e,t,n){return null==t?-1:Z.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!==s&&r.push(e[i]);return r},map:function(e,t,r){var i,o,s=0,a=[];if(n(e))for(i=e.length;s<i;s++)null!=(o=t(e[s],s,r))&&a.push(o);else for(s in e)null!=(o=t(e[s],s,r))&&a.push(o);return J.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),ie.isFunction(e))return r=Q.call(arguments,2),i=function(){return e.apply(t||this,r.concat(Q.call(arguments)))},i.guid=e.guid=e.guid||ie.guid++,i},now:Date.now,support:re}),"function"==typeof Symbol&&(ie.fn[Symbol.iterator]=Y[Symbol.iterator]),ie.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ee["[object "+t+"]"]=t.toLowerCase()});var se=function(e){function t(e,t,n,r){var i,o,s,a,l,f,p,d,h=t&&t.ownerDocument,g=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==g&&9!==g&&11!==g)return n;if(!r&&((t?t.ownerDocument||t:M)!==A&&D(t),t=t||A,L)){if(11!==g&&(f=ge.exec(e)))if(i=f[1]){if(9===g){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(h&&(s=h.getElementById(i))&&P(t,s)&&s.id===i)return n.push(s),n}else{if(f[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((i=f[3])&&x.getElementsByClassName&&t.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!_[e+" "]&&(!H||!H.test(e))){if(1!==g)h=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(me,"\\$&"):t.setAttribute("id",a=R),p=C(e),o=p.length,l=ce.test(a)?"#"+a:"[id='"+a+"']";o--;)p[o]=l+" "+c(p[o]);d=p.join(","),h=ve.test(e)&&u(t.parentNode)||t}if(d)try{return Q.apply(n,h.querySelectorAll(d)),n}catch(e){}finally{a===R&&t.removeAttribute("id")}}}return E(e.replace(oe,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>b.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[R]=!0,e}function i(e){var t=A.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)b.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||z)-(~e.sourceIndex||z);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function l(){}function c(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function f(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=W++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,u,l,c=[I,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(l=t[R]||(t[R]={}),u=l[t.uniqueID]||(l[t.uniqueID]={}),(a=u[r])&&a[0]===I&&a[1]===o)return c[2]=a[2];if(u[r]=c,c[2]=e(t,n,s))return!0}}}function p(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function d(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function h(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,l=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),l&&t.push(a)));return s}function g(e,t,n,i,o,s){return i&&!i[R]&&(i=g(i)),o&&!o[R]&&(o=g(o,s)),r(function(r,s,a,u){var l,c,f,p=[],g=[],v=s.length,m=r||d(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?m:h(m,p,e,a,u),x=n?o||(r?e:v||i)?[]:s:y;if(n&&n(y,x,a,u),i)for(l=h(x,g),i(l,[],a,u),c=l.length;c--;)(f=l[c])&&(x[g[c]]=!(y[g[c]]=f));if(r){if(o||e){if(o){for(l=[],c=x.length;c--;)(f=x[c])&&l.push(y[c]=f);o(null,x=[],l,u)}for(c=x.length;c--;)(f=x[c])&&(l=o?K(r,f):p[c])>-1&&(r[l]=!(s[l]=f))}}else x=h(x===s?x.splice(v,x.length):x),o?o(null,s,x,u):Q.apply(s,x)})}function v(e){for(var t,n,r,i=e.length,o=b.relative[e[0].type],s=o||b.relative[" "],a=o?1:0,u=f(function(e){return e===t},s,!0),l=f(function(e){return K(t,e)>-1},s,!0),d=[function(e,n,r){var i=!o&&(r||n!==N)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,i}];a<i;a++)if(n=b.relative[e[a].type])d=[f(p(d),n)];else{if(n=b.filter[e[a].type].apply(null,e[a].matches),n[R]){for(r=++a;r<i&&!b.relative[e[r].type];r++);return g(a>1&&p(d),a>1&&c(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(oe,"$1"),n,a<r&&v(e.slice(a,r)),r<i&&v(e=e.slice(r)),r<i&&c(e))}d.push(n)}return p(d)}function m(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,u,l){var c,f,p,d=0,g="0",v=r&&[],m=[],y=N,x=r||o&&b.find.TAG("*",l),w=I+=null==y?1:Math.random()||.1,T=x.length;for(l&&(N=s===A||s||l);g!==T&&null!=(c=x[g]);g++){if(o&&c){for(f=0,s||c.ownerDocument===A||(D(c),a=!L);p=e[f++];)if(p(c,s||A,a)){u.push(c);break}l&&(I=w)}i&&((c=!p&&c)&&d--,r&&v.push(c))}if(d+=g,i&&g!==d){for(f=0;p=n[f++];)p(v,m,s,a);if(r){if(d>0)for(;g--;)v[g]||m[g]||(m[g]=Y.call(u));m=h(m)}Q.apply(u,m),l&&!r&&m.length>0&&d+n.length>1&&t.uniqueSort(u)}return l&&(I=w,N=y),v};return i?r(s):s}var y,x,b,w,T,C,k,E,N,S,j,D,A,q,L,H,O,F,P,R="sizzle"+1*new Date,M=e.document,I=0,W=0,$=n(),B=n(),_=n(),X=function(e,t){return e===t&&(j=!0),0},z=1<<31,U={}.hasOwnProperty,V=[],Y=V.pop,G=V.push,Q=V.push,J=V.slice,K=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",re=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",ie=new RegExp(ee+"+","g"),oe=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),ae=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),ue=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),le=new RegExp(re),ce=new RegExp("^"+te+"$"),fe={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+re),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},pe=/^(?:input|select|textarea|button)$/i,de=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ve=/[+~]/,me=/'|\\/g,ye=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),xe=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},be=function(){D()};try{Q.apply(V=J.call(M.childNodes),M.childNodes),V[M.childNodes.length].nodeType}catch(e){Q={apply:V.length?function(e,t){G.apply(e,J.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},T=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},D=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:M;return r!==A&&9===r.nodeType&&r.documentElement?(A=r,q=A.documentElement,L=!T(A),(n=A.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",be,!1):n.attachEvent&&n.attachEvent("onunload",be)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(A.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=he.test(A.getElementsByClassName),x.getById=i(function(e){return q.appendChild(e).id=R,!A.getElementsByName||!A.getElementsByName(R).length}),x.getById?(b.find.ID=function(e,t){if(void 0!==t.getElementById&&L){var n=t.getElementById(e);return n?[n]:[]}},b.filter.ID=function(e){var t=e.replace(ye,xe);return function(e){return e.getAttribute("id")===t}}):(delete b.find.ID,b.filter.ID=function(e){var t=e.replace(ye,xe);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),b.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},b.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&L)return t.getElementsByClassName(e)},O=[],H=[],(x.qsa=he.test(A.querySelectorAll))&&(i(function(e){q.appendChild(e).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&H.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||H.push("\\["+ee+"*(?:value|"+Z+")"),e.querySelectorAll("[id~="+R+"-]").length||H.push("~="),e.querySelectorAll(":checked").length||H.push(":checked"),e.querySelectorAll("a#"+R+"+*").length||H.push(".#.+[+~]")}),i(function(e){var t=A.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&H.push("name"+ee+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||H.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),H.push(",.*:")})),(x.matchesSelector=he.test(F=q.matches||q.webkitMatchesSelector||q.mozMatchesSelector||q.oMatchesSelector||q.msMatchesSelector))&&i(function(e){x.disconnectedMatch=F.call(e,"div"),F.call(e,"[s!='']:x"),O.push("!=",re)}),H=H.length&&new RegExp(H.join("|")),O=O.length&&new RegExp(O.join("|")),t=he.test(q.compareDocumentPosition),P=t||he.test(q.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},X=t?function(e,t){if(e===t)return j=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===A||e.ownerDocument===M&&P(M,e)?-1:t===A||t.ownerDocument===M&&P(M,t)?1:S?K(S,e)-K(S,t):0:4&n?-1:1)}:function(e,t){if(e===t)return j=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],u=[t];if(!i||!o)return e===A?-1:t===A?1:i?-1:o?1:S?K(S,e)-K(S,t):0;if(i===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;a[r]===u[r];)r++;return r?s(a[r],u[r]):a[r]===M?-1:u[r]===M?1:0},A):A},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==A&&D(e),n=n.replace(ue,"='$1']"),x.matchesSelector&&L&&!_[n+" "]&&(!O||!O.test(n))&&(!H||!H.test(n)))try{var r=F.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,A,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==A&&D(e),P(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==A&&D(e);var n=b.attrHandle[t.toLowerCase()],r=n&&U.call(b.attrHandle,t.toLowerCase())?n(e,t,!L):void 0;return void 0!==r?r:x.attributes||!L?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(j=!x.detectDuplicates,S=!x.sortStable&&e.slice(0),e.sort(X),j){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return S=null,e},w=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=w(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=w(t);return n},b=t.selectors={cacheLength:50,createPseudo:r,match:fe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ye,xe),e[3]=(e[3]||e[4]||e[5]||"").replace(ye,xe),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return fe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&le.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ye,xe).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=$[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&$(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ie," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==s?"nextSibling":"previousSibling",v=t.parentNode,m=a&&t.nodeName.toLowerCase(),y=!u&&!a,x=!1;if(v){if(o){for(;g;){for(p=t;p=p[g];)if(a?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?v.firstChild:v.lastChild],s&&y){for(p=v,f=p[R]||(p[R]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),l=c[e]||[],d=l[0]===I&&l[1],x=d&&l[2],p=d&&v.childNodes[d];p=++d&&p&&p[g]||(x=d=0)||h.pop();)if(1===p.nodeType&&++x&&p===t){c[e]=[I,d,x];break}}else if(y&&(p=t,f=p[R]||(p[R]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),l=c[e]||[],d=l[0]===I&&l[1],x=d),x===!1)for(;(p=++d&&p&&p[g]||(x=d=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++x||(y&&(f=p[R]||(p[R]={}),c=f[p.uniqueID]||(f[p.uniqueID]={}),c[e]=[I,x]),p!==t)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(e,n){var i,o=b.pseudos[e]||b.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[R]?o(n):o.length>1?(i=[e,e,"",n],b.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=K(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=k(e.replace(oe,"$1"));return i[R]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(ye,xe),function(t){return(t.textContent||t.innerText||w(t)).indexOf(e)>-1}}),lang:r(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ye,xe).toLowerCase(),function(t){var n;do{if(n=L?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===q},focus:function(e){return e===A.activeElement&&(!A.hasFocus||A.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return de.test(e.nodeName)},input:function(e){return pe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:a(function(){return[0]}),last:a(function(e,t){return[t-1]}),eq:a(function(e,t,n){return[n<0?n+t:n]}),even:a(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:a(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:a(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:a(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},b.pseudos.nth=b.pseudos.eq;for(y in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[y]=function(e){return function(t){
return"input"===t.nodeName.toLowerCase()&&t.type===e}}(y);for(y in{submit:!0,reset:!0})b.pseudos[y]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(y);return l.prototype=b.filters=b.pseudos,b.setFilters=new l,C=t.tokenize=function(e,n){var r,i,o,s,a,u,l,c=B[e+" "];if(c)return n?0:c.slice(0);for(a=e,u=[],l=b.preFilter;a;){r&&!(i=se.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=ae.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(oe," ")}),a=a.slice(r.length));for(s in b.filter)!(i=fe[s].exec(a))||l[s]&&!(i=l[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):B(e,u).slice(0)},k=t.compile=function(e,t){var n,r=[],i=[],o=_[e+" "];if(!o){for(t||(t=C(e)),n=t.length;n--;)o=v(t[n]),o[R]?r.push(o):i.push(o);o=_(e,m(i,r)),o.selector=e}return o},E=t.select=function(e,t,n,r){var i,o,s,a,l,f="function"==typeof e&&e,p=!r&&C(e=f.selector||e);if(n=n||[],1===p.length){if(o=p[0]=p[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&x.getById&&9===t.nodeType&&L&&b.relative[o[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(ye,xe),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=fe.needsContext.test(e)?0:o.length;i--&&(s=o[i],!b.relative[a=s.type]);)if((l=b.find[a])&&(r=l(s.matches[0].replace(ye,xe),ve.test(o[0].type)&&u(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&c(o)))return Q.apply(n,r),n;break}}return(f||k(e,p))(r,t,!L,n,!t||ve.test(e)&&u(t.parentNode)||t),n},x.sortStable=R.split("").sort(X).join("")===R,x.detectDuplicates=!!j,D(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(A.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(Z,function(e,t,n){var r;if(!n)return e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);ie.find=se,ie.expr=se.selectors,ie.expr[":"]=ie.expr.pseudos,ie.uniqueSort=ie.unique=se.uniqueSort,ie.text=se.getText,ie.isXMLDoc=se.isXML,ie.contains=se.contains;var ae=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&ie(e).is(n))break;r.push(e)}return r},ue=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},le=ie.expr.match.needsContext,ce=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,fe=/^.[^:#\[\.,]*$/;ie.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?ie.find.matchesSelector(r,e)?[r]:[]:ie.find.matches(e,ie.grep(t,function(e){return 1===e.nodeType}))},ie.fn.extend({find:function(e){var t,n=this.length,r=[],i=this;if("string"!=typeof e)return this.pushStack(ie(e).filter(function(){for(t=0;t<n;t++)if(ie.contains(i[t],this))return!0}));for(t=0;t<n;t++)ie.find(e,i[t],r);return r=this.pushStack(n>1?ie.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&le.test(e)?ie(e):e||[],!1).length}});var pe,de=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(ie.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||pe,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:de.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof ie?t[0]:t,ie.merge(this,ie.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:G,!0)),ce.test(r[1])&&ie.isPlainObject(t))for(r in t)ie.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=G.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=G,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):ie.isFunction(e)?void 0!==n.ready?n.ready(e):e(ie):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),ie.makeArray(e,this))}).prototype=ie.fn,pe=ie(G);var he=/^(?:parents|prev(?:Until|All))/,ge={children:!0,contents:!0,next:!0,prev:!0};ie.fn.extend({has:function(e){var t=ie(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(ie.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],s=le.test(e)||"string"!=typeof e?ie(e,t||this.context):0;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&ie.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?ie.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?Z.call(ie(e),this[0]):Z.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ie.uniqueSort(ie.merge(this.get(),ie(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ie.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ae(e,"parentNode")},parentsUntil:function(e,t,n){return ae(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return ae(e,"nextSibling")},prevAll:function(e){return ae(e,"previousSibling")},nextUntil:function(e,t,n){return ae(e,"nextSibling",n)},prevUntil:function(e,t,n){return ae(e,"previousSibling",n)},siblings:function(e){return ue((e.parentNode||{}).firstChild,e)},children:function(e){return ue(e.firstChild)},contents:function(e){return e.contentDocument||ie.merge([],e.childNodes)}},function(e,t){ie.fn[e]=function(n,r){var i=ie.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=ie.filter(r,i)),this.length>1&&(ge[e]||ie.uniqueSort(i),he.test(e)&&i.reverse()),this.pushStack(i)}});var ve=/\S+/g;ie.Callbacks=function(e){e="string"==typeof e?o(e):ie.extend({},e);var t,n,r,i,s=[],a=[],u=-1,l=function(){for(i=e.once,r=t=!0;a.length;u=-1)for(n=a.shift();++u<s.length;)s[u].apply(n[0],n[1])===!1&&e.stopOnFalse&&(u=s.length,n=!1);e.memory||(n=!1),t=!1,i&&(s=n?[]:"")},c={add:function(){return s&&(n&&!t&&(u=s.length-1,a.push(n)),function t(n){ie.each(n,function(n,r){ie.isFunction(r)?e.unique&&c.has(r)||s.push(r):r&&r.length&&"string"!==ie.type(r)&&t(r)})}(arguments),n&&!t&&l()),this},remove:function(){return ie.each(arguments,function(e,t){for(var n;(n=ie.inArray(t,s,n))>-1;)s.splice(n,1),n<=u&&u--}),this},has:function(e){return e?ie.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return i=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return i=a=[],n||(s=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},ie.extend({Deferred:function(e){var t=[["resolve","done",ie.Callbacks("once memory"),"resolved"],["reject","fail",ie.Callbacks("once memory"),"rejected"],["notify","progress",ie.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return ie.Deferred(function(n){ie.each(t,function(t,o){var s=ie.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&ie.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?ie.extend(e,r):r}},i={};return r.pipe=r.then,ie.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=Q.call(arguments),s=o.length,a=1!==s||e&&ie.isFunction(e.promise)?s:0,u=1===a?e:ie.Deferred(),l=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?Q.call(arguments):i,r===t?u.notifyWith(n,r):--a||u.resolveWith(n,r)}};if(s>1)for(t=new Array(s),n=new Array(s),r=new Array(s);i<s;i++)o[i]&&ie.isFunction(o[i].promise)?o[i].promise().progress(l(i,n,t)).done(l(i,r,o)).fail(u.reject):--a;return a||u.resolveWith(r,o),u.promise()}});var me;ie.fn.ready=function(e){return ie.ready.promise().done(e),this},ie.extend({isReady:!1,readyWait:1,holdReady:function(e){e?ie.readyWait++:ie.ready(!0)},ready:function(e){(e===!0?--ie.readyWait:ie.isReady)||(ie.isReady=!0,e!==!0&&--ie.readyWait>0||(me.resolveWith(G,[ie]),ie.fn.triggerHandler&&(ie(G).triggerHandler("ready"),ie(G).off("ready"))))}}),ie.ready.promise=function(t){return me||(me=ie.Deferred(),"complete"===G.readyState||"loading"!==G.readyState&&!G.documentElement.doScroll?e.setTimeout(ie.ready):(G.addEventListener("DOMContentLoaded",s),e.addEventListener("load",s))),me.promise(t)},ie.ready.promise();var ye=function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===ie.type(n)){i=!0;for(a in n)ye(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,ie.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(ie(e),n)})),t))for(;a<u;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},xe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};a.uid=1,a.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!xe(e))return{};var t=e[this.expando];return t||(t={},xe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[t]=n;else for(r in t)i[r]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,ie.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,i,o=e[this.expando];if(void 0!==o){if(void 0===t)this.register(e);else{ie.isArray(t)?r=t.concat(t.map(ie.camelCase)):(i=ie.camelCase(t),t in o?r=[t,i]:(r=i,r=r in o?[r]:r.match(ve)||[])),n=r.length;for(;n--;)delete o[r[n]]}(void 0===t||ie.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ie.isEmptyObject(t)}};var be=new a,we=new a,Te=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ce=/[A-Z]/g;ie.extend({hasData:function(e){return we.hasData(e)||be.hasData(e)},data:function(e,t,n){return we.access(e,t,n)},removeData:function(e,t){we.remove(e,t)},_data:function(e,t,n){return be.access(e,t,n)},_removeData:function(e,t){be.remove(e,t)}}),ie.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=we.get(o),1===o.nodeType&&!be.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=ie.camelCase(r.slice(5)),u(o,r,i[r])));be.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){we.set(this,e)}):ye(this,function(t){var n,r;if(o&&void 0===t){if(void 0!==(n=we.get(o,e)||we.get(o,e.replace(Ce,"-$&").toLowerCase())))return n;if(r=ie.camelCase(e),void 0!==(n=we.get(o,r)))return n;if(void 0!==(n=u(o,r,void 0)))return n}else r=ie.camelCase(e),this.each(function(){var n=we.get(this,r);we.set(this,r,t),e.indexOf("-")>-1&&void 0!==n&&we.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){we.remove(this,e)})}}),ie.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=be.get(e,t),n&&(!r||ie.isArray(n)?r=be.access(e,t,ie.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=ie.queue(e,t),r=n.length,i=n.shift(),o=ie._queueHooks(e,t),s=function(){ie.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return be.get(e,n)||be.access(e,n,{empty:ie.Callbacks("once memory").add(function(){be.remove(e,[t+"queue",n])})})}}),ie.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?ie.queue(this[0],e):void 0===t?this:this.each(function(){var n=ie.queue(this,e,t);ie._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&ie.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ie.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=ie.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=be.get(o[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var ke=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ee=new RegExp("^(?:([+-])=|)("+ke+")([a-z%]*)$","i"),Ne=["Top","Right","Bottom","Left"],Se=function(e,t){return e=t||e,"none"===ie.css(e,"display")||!ie.contains(e.ownerDocument,e)},je=/^(?:checkbox|radio)$/i,De=/<([\w:-]+)/,Ae=/^$|\/(?:java|ecma)script/i,qe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};qe.optgroup=qe.option,qe.tbody=qe.tfoot=qe.colgroup=qe.caption=qe.thead,qe.th=qe.td;var Le=/<|&#?\w+;/;!function(){var e=G.createDocumentFragment(),t=e.appendChild(G.createElement("div")),n=G.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),re.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",re.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var He=/^key/,Oe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Fe=/^([^.]*)(?:\.(.+)|)/;ie.event={global:{},add:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,v=be.get(e);if(v)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=ie.guid++),(u=v.events)||(u=v.events={}),(s=v.handle)||(s=v.handle=function(t){return void 0!==ie&&ie.event.triggered!==t.type?ie.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(ve)||[""],l=t.length;l--;)a=Fe.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d&&(f=ie.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=ie.event.special[d]||{},c=ie.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&ie.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||(p=u[d]=[],p.delegateCount=0,f.setup&&f.setup.call(e,r,h,s)!==!1||e.addEventListener&&e.addEventListener(d,s)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),ie.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,s,a,u,l,c,f,p,d,h,g,v=be.hasData(e)&&be.get(e);if(v&&(u=v.events)){for(t=(t||"").match(ve)||[""],l=t.length;l--;)if(a=Fe.exec(t[l])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d){for(f=ie.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,p=u[d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));s&&!p.length&&(f.teardown&&f.teardown.call(e,h,v.handle)!==!1||ie.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)ie.event.remove(e,d+t[l],n,r,!0);ie.isEmptyObject(u)&&be.remove(e,"handle events")}},dispatch:function(e){e=ie.event.fix(e);var t,n,r,i,o,s=[],a=Q.call(arguments),u=(be.get(this,"events")||{})[e.type]||[],l=ie.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){for(s=ie.event.handlers.call(this,e,u),t=0;(i=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(o.namespace)||(e.handleObj=o,e.data=o.data,void 0!==(r=((ie.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a))&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(r=[],n=0;n<a;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?ie(i,this).index(u)>-1:ie.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&s.push({elem:u,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||G,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[ie.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];for(s||(this.fixHooks[i]=s=Oe.test(i)?this.mouseHooks:He.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new ie.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=G),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==g()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===g()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&ie.nodeName(this,"input"))return this.click(),!1},_default:function(e){return ie.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ie.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},ie.Event=function(e,t){if(!(this instanceof ie.Event))return new ie.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?d:h):this.type=e,t&&ie.extend(this,t),this.timeStamp=e&&e.timeStamp||ie.now(),this[ie.expando]=!0},ie.Event.prototype={constructor:ie.Event,isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=d,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=d,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=d,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ie.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ie.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||ie.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),ie.fn.extend({on:function(e,t,n,r){return v(this,e,t,n,r)},one:function(e,t,n,r){return v(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,ie(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=h),this.each(function(){ie.event.remove(this,e,n,t)})}});var Pe=/<script|<style|<link/i,Re=/checked\s*(?:[^=]|=\s*.checked.)/i,Me=/^true\/(.*)/,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ie.extend({htmlPrefilter:function(e){return e.replace(/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=ie.contains(e.ownerDocument,e);if(!(re.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ie.isXMLDoc(e)))for(s=c(a),o=c(e),r=0,i=o.length;r<i;r++)w(o[r],s[r]);if(t)if(n)for(o=o||c(e),s=s||c(a),r=0,i=o.length;r<i;r++)b(o[r],s[r]);else b(e,a);return s=c(a,"script"),s.length>0&&f(s,!u&&c(e,"script")),a},cleanData:function(e){for(var t,n,r,i=ie.event.special,o=0;void 0!==(n=e[o]);o++)if(xe(n)){if(t=n[be.expando]){if(t.events)for(r in t.events)i[r]?ie.event.remove(n,r):ie.removeEvent(n,r,t.handle);n[be.expando]=void 0}n[we.expando]&&(n[we.expando]=void 0)}}}),ie.fn.extend({domManip:T,detach:function(e){return C(this,e,!0)},remove:function(e){return C(this,e)},text:function(e){return ye(this,function(e){return void 0===e?ie.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){m(this,e).appendChild(e)}})},prepend:function(){return T(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=m(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return T(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ie.cleanData(c(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ie.clone(this,e,t)})},html:function(e){return ye(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!qe[(De.exec(e)||["",""])[1].toLowerCase()]){e=ie.htmlPrefilter(e);try{for(;n<r;n++)t=this[n]||{},1===t.nodeType&&(ie.cleanData(c(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return T(this,arguments,function(t){var n=this.parentNode;ie.inArray(this,e)<0&&(ie.cleanData(c(this)),n&&n.replaceChild(t,this))},e)}}),ie.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ie.fn[e]=function(e){for(var n,r=[],i=ie(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),ie(i[s])[t](n),K.apply(r,n.get());return this.pushStack(r)}});var We,$e={HTML:"block",BODY:"block"},Be=/^margin/,_e=new RegExp("^("+ke+")(?!px)[a-z%]+$","i"),Xe=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},ze=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i},Ue=G.documentElement;!function(){function t(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Ue.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,a.style.marginRight="50%",i="4px"===t.marginRight,Ue.removeChild(s)}var n,r,i,o,s=G.createElement("div"),a=G.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",re.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),ie.extend(re,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==r&&t(),r},pixelMarginRight:function(){return null==r&&t(),i},reliableMarginLeft:function(){return null==r&&t(),o},reliableMarginRight:function(){var t,n=a.appendChild(G.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",Ue.appendChild(s),t=!parseFloat(e.getComputedStyle(n).marginRight),Ue.removeChild(s),a.removeChild(n),t}}))}();var Ve=/^(none|table(?!-c[ea]).+)/,Ye={position:"absolute",visibility:"hidden",display:"block"},Ge={letterSpacing:"0",fontWeight:"400"},Qe=["Webkit","O","Moz","ms"],Je=G.createElement("div").style;ie.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=N(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=ie.camelCase(t),u=e.style;if(t=ie.cssProps[a]||(ie.cssProps[a]=j(a)||a),s=ie.cssHooks[t]||ie.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t];o=typeof n,"string"===o&&(i=Ee.exec(n))&&i[1]&&(n=l(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(ie.cssNumber[a]?"":"px")),re.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(u[t]=n))}},css:function(e,t,n,r){var i,o,s,a=ie.camelCase(t);return t=ie.cssProps[a]||(ie.cssProps[a]=j(a)||a),s=ie.cssHooks[t]||ie.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=N(e,t,r)),"normal"===i&&t in Ge&&(i=Ge[t]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),ie.each(["height","width"],function(e,t){ie.cssHooks[t]={get:function(e,n,r){if(n)return Ve.test(ie.css(e,"display"))&&0===e.offsetWidth?ze(e,Ye,function(){return q(e,t,r)}):q(e,t,r)},set:function(e,n,r){var i,o=r&&Xe(e),s=r&&A(e,t,r,"border-box"===ie.css(e,"boxSizing",!1,o),o);return s&&(i=Ee.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=ie.css(e,t)),D(e,n,s)}}}),ie.cssHooks.marginLeft=S(re.reliableMarginLeft,function(e,t){if(t)return(parseFloat(N(e,"marginLeft"))||e.getBoundingClientRect().left-ze(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),ie.cssHooks.marginRight=S(re.reliableMarginRight,function(e,t){if(t)return ze(e,{display:"inline-block"},N,[e,"marginRight"])}),ie.each({margin:"",padding:"",border:"Width"},function(e,t){ie.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Ne[r]+t]=o[r]||o[r-2]||o[0];return i}},Be.test(e)||(ie.cssHooks[e+t].set=D)}),ie.fn.extend({css:function(e,t){return ye(this,function(e,t,n){var r,i,o={},s=0;if(ie.isArray(t)){for(r=Xe(e),i=t.length;s<i;s++)o[t[s]]=ie.css(e,t[s],!1,r);return o}return void 0!==n?ie.style(e,t,n):ie.css(e,t)},e,t,arguments.length>1)},show:function(){return L(this,!0)},hide:function(){return L(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Se(this)?ie(this).show():ie(this).hide()})}}),ie.Tween=H,H.prototype={constructor:H,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||ie.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(ie.cssNumber[n]?"":"px")},cur:function(){var e=H.propHooks[this.prop];return e&&e.get?e.get(this):H.propHooks._default.get(this)},run:function(e){var t,n=H.propHooks[this.prop];return this.options.duration?this.pos=t=ie.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):H.propHooks._default.set(this),this}},H.prototype.init.prototype=H.prototype,H.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ie.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){ie.fx.step[e.prop]?ie.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[ie.cssProps[e.prop]]&&!ie.cssHooks[e.prop]?e.elem[e.prop]=e.now:ie.style(e.elem,e.prop,e.now+e.unit)}}},H.propHooks.scrollTop=H.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ie.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ie.fx=H.prototype.init,ie.fx.step={};var Ke,Ze,et=/^(?:toggle|show|hide)$/,tt=/queueHooks$/;ie.Animation=ie.extend(I,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return l(n.elem,e,Ee.exec(t),n),n}]},tweener:function(e,t){ie.isFunction(e)?(t=e,e=["*"]):e=e.match(ve);for(var n,r=0,i=e.length;r<i;r++)n=e[r],I.tweeners[n]=I.tweeners[n]||[],I.tweeners[n].unshift(t)},prefilters:[R],prefilter:function(e,t){t?I.prefilters.unshift(e):I.prefilters.push(e)}}),ie.speed=function(e,t,n){var r=e&&"object"==typeof e?ie.extend({},e):{complete:n||!n&&t||ie.isFunction(e)&&e,duration:e,easing:n&&t||t&&!ie.isFunction(t)&&t};return r.duration=ie.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in ie.fx.speeds?ie.fx.speeds[r.duration]:ie.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){ie.isFunction(r.old)&&r.old.call(this),r.queue&&ie.dequeue(this,r.queue)},r},ie.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=ie.isEmptyObject(e),o=ie.speed(t,n,r),s=function(){var t=I(this,ie.extend({},e),o);(i||be.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=ie.timers,s=be.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&tt.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||ie.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=be.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=ie.timers,s=r?r.length:0;for(n.finish=!0,ie.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),ie.each(["toggle","show","hide"],function(e,t){var n=ie.fn[t];ie.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(F(t,!0),e,r,i)}}),ie.each({slideDown:F("show"),slideUp:F("hide"),slideToggle:F("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ie.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),ie.timers=[],ie.fx.tick=function(){var e,t=0,n=ie.timers;for(Ke=ie.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||ie.fx.stop(),Ke=void 0},ie.fx.timer=function(e){ie.timers.push(e),e()?ie.fx.start():ie.timers.pop()},ie.fx.interval=13,ie.fx.start=function(){
Ze||(Ze=e.setInterval(ie.fx.tick,ie.fx.interval))},ie.fx.stop=function(){e.clearInterval(Ze),Ze=null},ie.fx.speeds={slow:600,fast:200,_default:400},ie.fn.delay=function(t,n){return t=ie.fx?ie.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=G.createElement("input"),t=G.createElement("select"),n=t.appendChild(G.createElement("option"));e.type="checkbox",re.checkOn=""!==e.value,re.optSelected=n.selected,t.disabled=!0,re.optDisabled=!n.disabled,e=G.createElement("input"),e.value="t",e.type="radio",re.radioValue="t"===e.value}();var nt,rt=ie.expr.attrHandle;ie.fn.extend({attr:function(e,t){return ye(this,ie.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ie.removeAttr(this,e)})}}),ie.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?ie.prop(e,t,n):(1===o&&ie.isXMLDoc(e)||(t=t.toLowerCase(),i=ie.attrHooks[t]||(ie.expr.match.bool.test(t)?nt:void 0)),void 0!==n?null===n?void ie.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=ie.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!re.radioValue&&"radio"===t&&ie.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(ve);if(o&&1===e.nodeType)for(;n=o[i++];)r=ie.propFix[n]||n,ie.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)}}),nt={set:function(e,t,n){return t===!1?ie.removeAttr(e,n):e.setAttribute(n,n),n}},ie.each(ie.expr.match.bool.source.match(/\w+/g),function(e,t){var n=rt[t]||ie.find.attr;rt[t]=function(e,t,r){var i,o;return r||(o=rt[t],rt[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,rt[t]=o),i}});var it=/^(?:input|select|textarea|button)$/i,ot=/^(?:a|area)$/i;ie.fn.extend({prop:function(e,t){return ye(this,ie.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[ie.propFix[e]||e]})}}),ie.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ie.isXMLDoc(e)||(t=ie.propFix[t]||t,i=ie.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=ie.find.attr(e,"tabindex");return t?parseInt(t,10):it.test(e.nodeName)||ot.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),re.optSelected||(ie.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ie.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ie.propFix[this.toLowerCase()]=this});ie.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,u=0;if(ie.isFunction(e))return this.each(function(t){ie(this).addClass(e.call(this,t,W(this)))});if("string"==typeof e&&e)for(t=e.match(ve)||[];n=this[u++];)if(i=W(n),r=1===n.nodeType&&(" "+i+" ").replace(/[\t\r\n\f]/g," ")){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");a=ie.trim(r),i!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,u=0;if(ie.isFunction(e))return this.each(function(t){ie(this).removeClass(e.call(this,t,W(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(ve)||[];n=this[u++];)if(i=W(n),r=1===n.nodeType&&(" "+i+" ").replace(/[\t\r\n\f]/g," ")){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");a=ie.trim(r),i!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):ie.isFunction(e)?this.each(function(n){ie(this).toggleClass(e.call(this,n,W(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=ie(this),o=e.match(ve)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=W(this),t&&be.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":be.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+W(n)+" ").replace(/[\t\r\n\f]/g," ").indexOf(t)>-1)return!0;return!1}});ie.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=ie.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,ie(this).val()):e,null==i?i="":"number"==typeof i?i+="":ie.isArray(i)&&(i=ie.map(i,function(e){return null==e?"":e+""})),(t=ie.valHooks[this.type]||ie.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=ie.valHooks[i.type]||ie.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(/\r/g,""):null==n?"":n)}}}),ie.extend({valHooks:{option:{get:function(e){var t=ie.find.attr(e,"value");return null!=t?t:ie.trim(ie.text(e)).replace(/[\x20\t\r\n\f]+/g," ")}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||i<0,s=o?null:[],a=o?i+1:r.length,u=i<0?a:o?i:0;u<a;u++)if(n=r[u],(n.selected||u===i)&&(re.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!ie.nodeName(n.parentNode,"optgroup"))){if(t=ie(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=ie.makeArray(t),s=i.length;s--;)r=i[s],(r.selected=ie.inArray(ie.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),ie.each(["radio","checkbox"],function(){ie.valHooks[this]={set:function(e,t){if(ie.isArray(t))return e.checked=ie.inArray(ie(e).val(),t)>-1}},re.checkOn||(ie.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var st=/^(?:focusinfocus|focusoutblur)$/;ie.extend(ie.event,{trigger:function(t,n,r,i){var o,s,a,u,l,c,f,p=[r||G],d=ne.call(t,"type")?t.type:t,h=ne.call(t,"namespace")?t.namespace.split("."):[];if(s=a=r=r||G,3!==r.nodeType&&8!==r.nodeType&&!st.test(d+ie.event.triggered)&&(d.indexOf(".")>-1&&(h=d.split("."),d=h.shift(),h.sort()),l=d.indexOf(":")<0&&"on"+d,t=t[ie.expando]?t:new ie.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:ie.makeArray(n,[t]),f=ie.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!ie.isWindow(r)){for(u=f.delegateType||d,st.test(u+d)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(r.ownerDocument||G)&&p.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=p[o++])&&!t.isPropagationStopped();)t.type=o>1?u:f.bindType||d,c=(be.get(s,"events")||{})[t.type]&&be.get(s,"handle"),c&&c.apply(s,n),(c=l&&s[l])&&c.apply&&xe(s)&&(t.result=c.apply(s,n),t.result===!1&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(p.pop(),n)!==!1||!xe(r)||l&&ie.isFunction(r[d])&&!ie.isWindow(r)&&(a=r[l],a&&(r[l]=null),ie.event.triggered=d,r[d](),ie.event.triggered=void 0,a&&(r[l]=a)),t.result}},simulate:function(e,t,n){var r=ie.extend(new ie.Event,n,{type:e,isSimulated:!0});ie.event.trigger(r,null,t)}}),ie.fn.extend({trigger:function(e,t){return this.each(function(){ie.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return ie.event.trigger(e,t,n,!0)}}),ie.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){ie.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),ie.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),re.focusin="onfocusin"in e,re.focusin||ie.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){ie.event.simulate(t,e.target,ie.event.fix(e))};ie.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=be.access(r,t);i||r.addEventListener(e,n,!0),be.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=be.access(r,t)-1;i?be.access(r,t,i):(r.removeEventListener(e,n,!0),be.remove(r,t))}}});var at=e.location,ut=ie.now(),lt=/\?/;ie.parseJSON=function(e){return JSON.parse(e+"")},ie.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||ie.error("Invalid XML: "+t),n};var ct=/([?&])_=[^&]*/,ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,pt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,dt=/^(?:GET|HEAD)$/,ht={},gt={},vt="*/".concat("*"),mt=G.createElement("a");mt.href=at.href,ie.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:at.href,type:"GET",isLocal:pt.test(at.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ie.parseJSON,"text xml":ie.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?_(_(e,ie.ajaxSettings),t):_(ie.ajaxSettings,e)},ajaxPrefilter:$(ht),ajaxTransport:$(gt),ajax:function(t,n){function r(t,n,r,a){var l,f,y,x,w,C=n;2!==b&&(b=2,u&&e.clearTimeout(u),i=void 0,s=a||"",T.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(x=X(p,T,r)),x=z(p,x,T,l),l?(p.ifModified&&(w=T.getResponseHeader("Last-Modified"),w&&(ie.lastModified[o]=w),(w=T.getResponseHeader("etag"))&&(ie.etag[o]=w)),204===t||"HEAD"===p.type?C="nocontent":304===t?C="notmodified":(C=x.state,f=x.data,y=x.error,l=!y)):(y=C,!t&&C||(C="error",t<0&&(t=0))),T.status=t,T.statusText=(n||C)+"",l?g.resolveWith(d,[f,C,T]):g.rejectWith(d,[T,C,y]),T.statusCode(m),m=void 0,c&&h.trigger(l?"ajaxSuccess":"ajaxError",[T,p,l?f:y]),v.fireWith(d,[T,C]),c&&(h.trigger("ajaxComplete",[T,p]),--ie.active||ie.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,s,a,u,l,c,f,p=ie.ajaxSetup({},n),d=p.context||p,h=p.context&&(d.nodeType||d.jquery)?ie(d):ie.event,g=ie.Deferred(),v=ie.Callbacks("once memory"),m=p.statusCode||{},y={},x={},b=0,w="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!a)for(a={};t=ft.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=x[n]=x[n]||e,y[e]=t),this},overrideMimeType:function(e){return b||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(b<2)for(t in e)m[t]=[m[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||w;return i&&i.abort(t),r(0,t),this}};if(g.promise(T).complete=v.add,T.success=T.done,T.error=T.fail,p.url=((t||p.url||at.href)+"").replace(/#.*$/,"").replace(/^\/\//,at.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=ie.trim(p.dataType||"*").toLowerCase().match(ve)||[""],null==p.crossDomain){l=G.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=mt.protocol+"//"+mt.host!=l.protocol+"//"+l.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=ie.param(p.data,p.traditional)),B(ht,p,n,T),2===b)return T;c=ie.event&&p.global,c&&0==ie.active++&&ie.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!dt.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(lt.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=ct.test(o)?o.replace(ct,"$1_="+ut++):o+(lt.test(o)?"&":"?")+"_="+ut++)),p.ifModified&&(ie.lastModified[o]&&T.setRequestHeader("If-Modified-Since",ie.lastModified[o]),ie.etag[o]&&T.setRequestHeader("If-None-Match",ie.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+vt+"; q=0.01":""):p.accepts["*"]);for(f in p.headers)T.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(p.beforeSend.call(d,T,p)===!1||2===b))return T.abort();w="abort";for(f in{success:1,error:1,complete:1})T[f](p[f]);if(i=B(gt,p,n,T)){if(T.readyState=1,c&&h.trigger("ajaxSend",[T,p]),2===b)return T;p.async&&p.timeout>0&&(u=e.setTimeout(function(){T.abort("timeout")},p.timeout));try{b=1,i.send(y,r)}catch(e){if(!(b<2))throw e;r(-1,e)}}else r(-1,"No Transport");return T},getJSON:function(e,t,n){return ie.get(e,t,n,"json")},getScript:function(e,t){return ie.get(e,void 0,t,"script")}}),ie.each(["get","post"],function(e,t){ie[t]=function(e,n,r,i){return ie.isFunction(n)&&(i=i||r,r=n,n=void 0),ie.ajax(ie.extend({url:e,type:t,dataType:i,data:n,success:r},ie.isPlainObject(e)&&e))}}),ie._evalUrl=function(e){return ie.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},ie.fn.extend({wrapAll:function(e){var t;return ie.isFunction(e)?this.each(function(t){ie(this).wrapAll(e.call(this,t))}):(this[0]&&(t=ie(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return ie.isFunction(e)?this.each(function(t){ie(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ie(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=ie.isFunction(e);return this.each(function(n){ie(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){ie.nodeName(this,"body")||ie(this).replaceWith(this.childNodes)}).end()}}),ie.expr.filters.hidden=function(e){return!ie.expr.filters.visible(e)},ie.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var yt=/\[\]$/,xt=/^(?:submit|button|image|reset|file)$/i,bt=/^(?:input|select|textarea|keygen)/i;ie.param=function(e,t){var n,r=[],i=function(e,t){t=ie.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=ie.ajaxSettings&&ie.ajaxSettings.traditional),ie.isArray(e)||e.jquery&&!ie.isPlainObject(e))ie.each(e,function(){i(this.name,this.value)});else for(n in e)U(n,e[n],t,i);return r.join("&").replace(/%20/g,"+")},ie.fn.extend({serialize:function(){return ie.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ie.prop(this,"elements");return e?ie.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ie(this).is(":disabled")&&bt.test(this.nodeName)&&!xt.test(e)&&(this.checked||!je.test(e))}).map(function(e,t){var n=ie(this).val();return null==n?null:ie.isArray(n)?ie.map(n,function(e){return{name:t.name,value:e.replace(/\r?\n/g,"\r\n")}}):{name:t.name,value:n.replace(/\r?\n/g,"\r\n")}}).get()}}),ie.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var wt={0:200,1223:204},Tt=ie.ajaxSettings.xhr();re.cors=!!Tt&&"withCredentials"in Tt,re.ajax=Tt=!!Tt,ie.ajaxTransport(function(t){var n,r;if(re.cors||Tt&&!t.crossDomain)return{send:function(i,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(s in i)a.setRequestHeader(s,i[s]);n=function(e){return function(){n&&(n=r=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(wt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),r=a.onerror=n("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),ie.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ie.globalEval(e),e}}}),ie.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ie.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=ie("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),G.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Ct=[],kt=/(=)\?(?=&|$)|\?\?/;ie.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ct.pop()||ie.expando+"_"+ut++;return this[e]=!0,e}}),ie.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(kt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&kt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=ie.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(kt,"$1"+i):t.jsonp!==!1&&(t.url+=(lt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||ie.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){void 0===o?ie(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Ct.push(i)),s&&ie.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),ie.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||G;var r=ce.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=p([e],t,i),i&&i.length&&ie(i).remove(),ie.merge([],r.childNodes))};var Et=ie.fn.load;ie.fn.load=function(e,t,n){if("string"!=typeof e&&Et)return Et.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=ie.trim(e.slice(a)),e=e.slice(0,a)),ie.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&ie.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?ie("<div>").append(ie.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},ie.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ie.fn[t]=function(e){return this.on(t,e)}}),ie.expr.filters.animated=function(e){return ie.grep(ie.timers,function(t){return e===t.elem}).length},ie.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=ie.css(e,"position"),f=ie(e),p={};"static"===c&&(e.style.position="relative"),a=f.offset(),o=ie.css(e,"top"),u=ie.css(e,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(r=f.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),ie.isFunction(t)&&(t=t.call(e,n,ie.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):f.css(p)}},ie.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ie.offset.setOffset(this,e,t)});var t,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return t=o.documentElement,ie.contains(t,r)?(i=r.getBoundingClientRect(),n=V(o),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===ie.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),ie.nodeName(e[0],"html")||(r=e.offset()),r.top+=ie.css(e[0],"borderTopWidth",!0),r.left+=ie.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-ie.css(n,"marginTop",!0),left:t.left-r.left-ie.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===ie.css(e,"position");)e=e.offsetParent;return e||Ue})}}),ie.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;ie.fn[e]=function(r){return ye(this,function(e,r,i){var o=V(e);if(void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),ie.each(["top","left"],function(e,t){ie.cssHooks[t]=S(re.pixelPosition,function(e,n){if(n)return n=N(e,t),_e.test(n)?ie(e).position()[t]+"px":n})}),ie.each({Height:"height",Width:"width"},function(e,t){ie.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){ie.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return ye(this,function(t,n,r){var i;return ie.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?ie.css(t,n,s):ie.style(t,n,r,s)},t,o?r:void 0,o,null)}})}),ie.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),ie.fn.andSelf=ie.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ie});var Nt=e.jQuery,St=e.$;return ie.noConflict=function(t){return e.$===ie&&(e.$=St),t&&e.jQuery===ie&&(e.jQuery=Nt),ie},t||(e.jQuery=e.$=ie),ie});

},{}],10:[function(require,module,exports){
!function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(e,t){"use strict";if(!e.jstree){var r=0,i=!1,s=!1,a=!1,n=[],o=e("script:last").attr("src"),d=window.document;e.jstree={version:"3.3.3",defaults:{plugins:[]},plugins:{},path:o&&o.indexOf("/")!==-1?o.replace(/\/[^\/]+$/,""):"",idregex:/[\\:&!^|()\[\]<>@*'+~#";.,=\- \/${}%?`]/g,root:"#"},e.jstree.create=function(t,i){var s=new e.jstree.core(++r),a=i;return i=e.extend(!0,{},e.jstree.defaults,i),a&&a.plugins&&(i.plugins=a.plugins),e.each(i.plugins,function(e,t){"core"!==e&&(s=s.plugin(t,i[t]))}),e(t).data("jstree",s),s.init(t,i),s},e.jstree.destroy=function(){e(".jstree:jstree").jstree("destroy"),e(d).off(".jstree")},e.jstree.core=function(e){this._id=e,this._cnt=0,this._wrk=null,this._data={core:{themes:{name:!1,dots:!1,icons:!1,ellipsis:!1},selected:[],last_error:{},working:!1,worker_queue:[],focused:null}}},e.jstree.reference=function(t){var r=null,i=null;if(!t||!t.id||t.tagName&&t.nodeType||(t=t.id),!i||!i.length)try{i=e(t)}catch(e){}if(!i||!i.length)try{i=e("#"+t.replace(e.jstree.idregex,"\\$&"))}catch(e){}return i&&i.length&&(i=i.closest(".jstree")).length&&(i=i.data("jstree"))?r=i:e(".jstree").each(function(){var i=e(this).data("jstree");if(i&&i._model.data[t])return r=i,!1}),r},e.fn.jstree=function(r){var i="string"==typeof r,s=Array.prototype.slice.call(arguments,1),a=null;return!(r===!0&&!this.length)&&(this.each(function(){var n=e.jstree.reference(this),o=i&&n?n[r]:null;if(a=i&&o?o.apply(n,s):null,n||i||r!==t&&!e.isPlainObject(r)||e.jstree.create(this,r),(n&&!i||r===!0)&&(a=n||!1),null!==a&&a!==t)return!1}),null!==a&&a!==t?a:this)},e.expr.pseudos.jstree=e.expr.createPseudo(function(r){return function(r){return e(r).hasClass("jstree")&&e(r).data("jstree")!==t}}),e.jstree.defaults.core={data:!1,strings:!1,check_callback:!1,error:e.noop,animation:200,multiple:!0,themes:{name:!1,url:!1,dir:!1,dots:!0,icons:!0,ellipsis:!1,stripes:!1,variant:!1,responsive:!1},expand_selected_onload:!0,worker:!0,force_text:!1,dblclick_toggle:!0},e.jstree.core.prototype={plugin:function(t,r){var i=e.jstree.plugins[t];return i?(this._data[t]={},i.prototype=this,new i(r,this)):this},init:function(t,r){this._model={data:{},changed:[],force_full_redraw:!1,redraw_timeout:!1,default_state:{loaded:!0,opened:!1,selected:!1,disabled:!1}},this._model.data[e.jstree.root]={id:e.jstree.root,parent:null,parents:[],children:[],children_d:[],state:{loaded:!1}},this.element=e(t).addClass("jstree jstree-"+this._id),this.settings=r,this._data.core.ready=!1,this._data.core.loaded=!1,this._data.core.rtl="rtl"===this.element.css("direction"),this.element[this._data.core.rtl?"addClass":"removeClass"]("jstree-rtl"),this.element.attr("role","tree"),this.settings.core.multiple&&this.element.attr("aria-multiselectable",!0),this.element.attr("tabindex")||this.element.attr("tabindex","0"),this.bind(),this.trigger("init"),this._data.core.original_container_html=this.element.find(" > ul > li").clone(!0),this._data.core.original_container_html.find("li").addBack().contents().filter(function(){return 3===this.nodeType&&(!this.nodeValue||/^\s+$/.test(this.nodeValue))}).remove(),this.element.html("<ul class='jstree-container-ul jstree-children' role='group'><li id='j"+this._id+"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='tree-item'><i class='jstree-icon jstree-ocl'></i><a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>"+this.get_string("Loading ...")+"</a></li></ul>"),this.element.attr("aria-activedescendant","j"+this._id+"_loading"),this._data.core.li_height=this.get_container_ul().children("li").first().height()||24,this._data.core.node=this._create_prototype_node(),this.trigger("loading"),this.load_node(e.jstree.root)},destroy:function(e){if(this._wrk)try{window.URL.revokeObjectURL(this._wrk),this._wrk=null}catch(e){}e||this.element.empty(),this.teardown()},_create_prototype_node:function(){var e,t,r=d.createElement("LI");return r.setAttribute("role","treeitem"),e=d.createElement("I"),e.className="jstree-icon jstree-ocl",e.setAttribute("role","presentation"),r.appendChild(e),e=d.createElement("A"),e.className="jstree-anchor",e.setAttribute("href","#"),e.setAttribute("tabindex","-1"),t=d.createElement("I"),t.className="jstree-icon jstree-themeicon",t.setAttribute("role","presentation"),e.appendChild(t),r.appendChild(e),e=t=null,r},teardown:function(){this.unbind(),this.element.removeClass("jstree").removeData("jstree").find("[class^='jstree']").addBack().attr("class",function(){return this.className.replace(/jstree[^ ]*|$/gi,"")}),this.element=null},bind:function(){var t="",r=null,i=0;this.element.on("dblclick.jstree",function(e){if(e.target.tagName&&"input"===e.target.tagName.toLowerCase())return!0;if(d.selection&&d.selection.empty)d.selection.empty();else if(window.getSelection){var t=window.getSelection();try{t.removeAllRanges(),t.collapse()}catch(e){}}}).on("mousedown.jstree",e.proxy(function(e){e.target===this.element[0]&&(e.preventDefault(),i=+new Date)},this)).on("mousedown.jstree",".jstree-ocl",function(e){e.preventDefault()}).on("click.jstree",".jstree-ocl",e.proxy(function(e){this.toggle_node(e.target)},this)).on("dblclick.jstree",".jstree-anchor",e.proxy(function(e){if(e.target.tagName&&"input"===e.target.tagName.toLowerCase())return!0;this.settings.core.dblclick_toggle&&this.toggle_node(e.target)},this)).on("click.jstree",".jstree-anchor",e.proxy(function(t){t.preventDefault(),t.currentTarget!==d.activeElement&&e(t.currentTarget).focus(),this.activate_node(t.currentTarget,t)},this)).on("keydown.jstree",".jstree-anchor",e.proxy(function(t){if(t.target.tagName&&"input"===t.target.tagName.toLowerCase())return!0;if(32!==t.which&&13!==t.which&&(t.shiftKey||t.ctrlKey||t.altKey||t.metaKey))return!0;var r=null;switch(this._data.core.rtl&&(37===t.which?t.which=39:39===t.which&&(t.which=37)),t.which){case 32:t.ctrlKey&&(t.type="click",e(t.currentTarget).trigger(t));break;case 13:t.type="click",e(t.currentTarget).trigger(t);break;case 37:t.preventDefault(),this.is_open(t.currentTarget)?this.close_node(t.currentTarget):(r=this.get_parent(t.currentTarget))&&r.id!==e.jstree.root&&this.get_node(r,!0).children(".jstree-anchor").focus();break;case 38:t.preventDefault(),r=this.get_prev_dom(t.currentTarget),r&&r.length&&r.children(".jstree-anchor").focus();break;case 39:t.preventDefault(),this.is_closed(t.currentTarget)?this.open_node(t.currentTarget,function(e){this.get_node(e,!0).children(".jstree-anchor").focus()}):this.is_open(t.currentTarget)&&(r=this.get_node(t.currentTarget,!0).children(".jstree-children")[0])&&e(this._firstChild(r)).children(".jstree-anchor").focus();break;case 40:t.preventDefault(),r=this.get_next_dom(t.currentTarget),r&&r.length&&r.children(".jstree-anchor").focus();break;case 106:this.open_all();break;case 36:t.preventDefault(),r=this._firstChild(this.get_container_ul()[0]),r&&e(r).children(".jstree-anchor").filter(":visible").focus();break;case 35:t.preventDefault(),this.element.find(".jstree-anchor").filter(":visible").last().focus();break;case 113:t.preventDefault(),this.edit(t.currentTarget)}},this)).on("load_node.jstree",e.proxy(function(t,r){r.status&&(r.node.id!==e.jstree.root||this._data.core.loaded||(this._data.core.loaded=!0,this._firstChild(this.get_container_ul()[0])&&this.element.attr("aria-activedescendant",this._firstChild(this.get_container_ul()[0]).id),this.trigger("loaded")),this._data.core.ready||setTimeout(e.proxy(function(){if(this.element&&!this.get_container_ul().find(".jstree-loading").length){if(this._data.core.ready=!0,this._data.core.selected.length){if(this.settings.core.expand_selected_onload){var t,r,i=[];for(t=0,r=this._data.core.selected.length;t<r;t++)i=i.concat(this._model.data[this._data.core.selected[t]].parents);for(i=e.vakata.array_unique(i),t=0,r=i.length;t<r;t++)this.open_node(i[t],!1,0)}this.trigger("changed",{action:"ready",selected:this._data.core.selected})}this.trigger("ready")}},this),0))},this)).on("keypress.jstree",e.proxy(function(i){if(i.target.tagName&&"input"===i.target.tagName.toLowerCase())return!0;r&&clearTimeout(r),r=setTimeout(function(){t=""},500);var s=String.fromCharCode(i.which).toLowerCase(),a=this.element.find(".jstree-anchor").filter(":visible"),n=a.index(d.activeElement)||0,o=!1;if(t+=s,t.length>1){if(a.slice(n).each(e.proxy(function(r,i){if(0===e(i).text().toLowerCase().indexOf(t))return e(i).focus(),o=!0,!1},this)),o)return;if(a.slice(0,n).each(e.proxy(function(r,i){if(0===e(i).text().toLowerCase().indexOf(t))return e(i).focus(),o=!0,!1},this)),o)return}if(new RegExp("^"+s.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")+"+$").test(t)){if(a.slice(n+1).each(e.proxy(function(t,r){if(e(r).text().toLowerCase().charAt(0)===s)return e(r).focus(),o=!0,!1},this)),o)return;if(a.slice(0,n+1).each(e.proxy(function(t,r){if(e(r).text().toLowerCase().charAt(0)===s)return e(r).focus(),o=!0,!1},this)),o)return}},this)).on("init.jstree",e.proxy(function(){var e=this.settings.core.themes;this._data.core.themes.dots=e.dots,this._data.core.themes.stripes=e.stripes,this._data.core.themes.icons=e.icons,this._data.core.themes.ellipsis=e.ellipsis,this.set_theme(e.name||"default",e.url),this.set_theme_variant(e.variant)},this)).on("loading.jstree",e.proxy(function(){this[this._data.core.themes.dots?"show_dots":"hide_dots"](),this[this._data.core.themes.icons?"show_icons":"hide_icons"](),this[this._data.core.themes.stripes?"show_stripes":"hide_stripes"](),this[this._data.core.themes.ellipsis?"show_ellipsis":"hide_ellipsis"]()},this)).on("blur.jstree",".jstree-anchor",e.proxy(function(t){this._data.core.focused=null,e(t.currentTarget).filter(".jstree-hovered").mouseleave(),this.element.attr("tabindex","0")},this)).on("focus.jstree",".jstree-anchor",e.proxy(function(t){var r=this.get_node(t.currentTarget);r&&r.id&&(this._data.core.focused=r.id),this.element.find(".jstree-hovered").not(t.currentTarget).mouseleave(),e(t.currentTarget).mouseenter(),this.element.attr("tabindex","-1")},this)).on("focus.jstree",e.proxy(function(){if(+new Date-i>500&&!this._data.core.focused){i=0;var e=this.get_node(this.element.attr("aria-activedescendant"),!0);e&&e.find("> .jstree-anchor").focus()}},this)).on("mouseenter.jstree",".jstree-anchor",e.proxy(function(e){this.hover_node(e.currentTarget)},this)).on("mouseleave.jstree",".jstree-anchor",e.proxy(function(e){this.dehover_node(e.currentTarget)},this))},unbind:function(){this.element.off(".jstree"),e(d).off(".jstree-"+this._id)},trigger:function(e,t){t||(t={}),t.instance=this,this.element.triggerHandler(e.replace(".jstree","")+".jstree",t)},get_container:function(){return this.element},get_container_ul:function(){return this.element.children(".jstree-children").first()},get_string:function(t){var r=this.settings.core.strings;return e.isFunction(r)?r.call(this,t):r&&r[t]?r[t]:t},_firstChild:function(e){for(e=e?e.firstChild:null;null!==e&&1!==e.nodeType;)e=e.nextSibling;return e},_nextSibling:function(e){for(e=e?e.nextSibling:null;null!==e&&1!==e.nodeType;)e=e.nextSibling;return e},_previousSibling:function(e){for(e=e?e.previousSibling:null;null!==e&&1!==e.nodeType;)e=e.previousSibling;return e},get_node:function(t,r){t&&t.id&&(t=t.id);var i;try{if(this._model.data[t])t=this._model.data[t];else if("string"==typeof t&&this._model.data[t.replace(/^#/,"")])t=this._model.data[t.replace(/^#/,"")];else if("string"==typeof t&&(i=e("#"+t.replace(e.jstree.idregex,"\\$&"),this.element)).length&&this._model.data[i.closest(".jstree-node").attr("id")])t=this._model.data[i.closest(".jstree-node").attr("id")];else if((i=e(t,this.element)).length&&this._model.data[i.closest(".jstree-node").attr("id")])t=this._model.data[i.closest(".jstree-node").attr("id")];else{if(!(i=e(t,this.element)).length||!i.hasClass("jstree"))return!1;t=this._model.data[e.jstree.root]}return r&&(t=t.id===e.jstree.root?this.element:e("#"+t.id.replace(e.jstree.idregex,"\\$&"),this.element)),t}catch(e){return!1}},get_path:function(t,r,i){if(!(t=t.parents?t:this.get_node(t))||t.id===e.jstree.root||!t.parents)return!1;var s,a,n=[];for(n.push(i?t.id:t.text),s=0,a=t.parents.length;s<a;s++)n.push(i?t.parents[s]:this.get_text(t.parents[s]));return n=n.reverse().slice(1),r?n.join(r):n},get_next_dom:function(t,r){var i;if(t=this.get_node(t,!0),t[0]===this.element[0]){for(i=this._firstChild(this.get_container_ul()[0]);i&&0===i.offsetHeight;)i=this._nextSibling(i);return!!i&&e(i)}if(!t||!t.length)return!1;if(r){i=t[0];do{i=this._nextSibling(i)}while(i&&0===i.offsetHeight);return!!i&&e(i)}if(t.hasClass("jstree-open")){for(i=this._firstChild(t.children(".jstree-children")[0]);i&&0===i.offsetHeight;)i=this._nextSibling(i);if(null!==i)return e(i)}i=t[0];do{i=this._nextSibling(i)}while(i&&0===i.offsetHeight);return null!==i?e(i):t.parentsUntil(".jstree",".jstree-node").nextAll(".jstree-node:visible").first()},get_prev_dom:function(t,r){var i;if(t=this.get_node(t,!0),t[0]===this.element[0]){for(i=this.get_container_ul()[0].lastChild;i&&0===i.offsetHeight;)i=this._previousSibling(i);return!!i&&e(i)}if(!t||!t.length)return!1;if(r){i=t[0];do{i=this._previousSibling(i)}while(i&&0===i.offsetHeight);return!!i&&e(i)}i=t[0];do{i=this._previousSibling(i)}while(i&&0===i.offsetHeight);if(null!==i){for(t=e(i);t.hasClass("jstree-open");)t=t.children(".jstree-children").first().children(".jstree-node:visible:last");return t}return!(!(i=t[0].parentNode.parentNode)||!i.className||i.className.indexOf("jstree-node")===-1)&&e(i)},get_parent:function(t){return!(!(t=this.get_node(t))||t.id===e.jstree.root)&&t.parent},get_children_dom:function(e){return e=this.get_node(e,!0),e[0]===this.element[0]?this.get_container_ul().children(".jstree-node"):!(!e||!e.length)&&e.children(".jstree-children").children(".jstree-node")},is_parent:function(e){return(e=this.get_node(e))&&(e.state.loaded===!1||e.children.length>0)},is_loaded:function(e){return(e=this.get_node(e))&&e.state.loaded},is_loading:function(e){return(e=this.get_node(e))&&e.state&&e.state.loading},is_open:function(e){return(e=this.get_node(e))&&e.state.opened},is_closed:function(e){return(e=this.get_node(e))&&this.is_parent(e)&&!e.state.opened},is_leaf:function(e){return!this.is_parent(e)},load_node:function(t,r){var i,s,a,n,o;if(e.isArray(t))return this._load_nodes(t.slice(),r),!0;if(!(t=this.get_node(t)))return r&&r.call(this,t,!1),!1;if(t.state.loaded){for(t.state.loaded=!1,a=0,n=t.parents.length;a<n;a++)this._model.data[t.parents[a]].children_d=e.vakata.array_filter(this._model.data[t.parents[a]].children_d,function(r){return e.inArray(r,t.children_d)===-1});for(i=0,s=t.children_d.length;i<s;i++)this._model.data[t.children_d[i]].state.selected&&(o=!0),delete this._model.data[t.children_d[i]];o&&(this._data.core.selected=e.vakata.array_filter(this._data.core.selected,function(r){return e.inArray(r,t.children_d)===-1})),t.children=[],t.children_d=[],o&&this.trigger("changed",{action:"load_node",node:t,selected:this._data.core.selected})}return t.state.failed=!1,t.state.loading=!0,this.get_node(t,!0).addClass("jstree-loading").attr("aria-busy",!0),this._load_node(t,e.proxy(function(e){t=this._model.data[t.id],t.state.loading=!1,t.state.loaded=e,t.state.failed=!t.state.loaded;var i=this.get_node(t,!0),s=0,a=0,n=this._model.data,o=!1;for(s=0,a=t.children.length;s<a;s++)if(n[t.children[s]]&&!n[t.children[s]].state.hidden){o=!0;break}t.state.loaded&&i&&i.length&&(i.removeClass("jstree-closed jstree-open jstree-leaf"),o?"#"!==t.id&&i.addClass(t.state.opened?"jstree-open":"jstree-closed"):i.addClass("jstree-leaf")),i.removeClass("jstree-loading").attr("aria-busy",!1),this.trigger("load_node",{node:t,status:e}),r&&r.call(this,t,e)},this)),!0},_load_nodes:function(e,t,r,i){var s,a,n=!0,o=function(){this._load_nodes(e,t,!0)},d=this._model.data,c=[];for(s=0,a=e.length;s<a;s++)d[e[s]]&&(!d[e[s]].state.loaded&&!d[e[s]].state.failed||!r&&i)&&(this.is_loading(e[s])||this.load_node(e[s],o),n=!1);if(n){for(s=0,a=e.length;s<a;s++)d[e[s]]&&d[e[s]].state.loaded&&c.push(e[s]);t&&!t.done&&(t.call(this,c),t.done=!0)}},load_all:function(t,r){if(t||(t=e.jstree.root),!(t=this.get_node(t)))return!1;var i,s,a=[],n=this._model.data,o=n[t.id].children_d;for(t.state&&!t.state.loaded&&a.push(t.id),i=0,s=o.length;i<s;i++)n[o[i]]&&n[o[i]].state&&!n[o[i]].state.loaded&&a.push(o[i]);a.length?this._load_nodes(a,function(){this.load_all(t,r)}):(r&&r.call(this,t),this.trigger("load_all",{node:t}))},_load_node:function(t,r){var i,s=this.settings.core.data,a=function(){return 3!==this.nodeType&&8!==this.nodeType};return s?e.isFunction(s)?s.call(this,t,e.proxy(function(i){i===!1?r.call(this,!1):this["string"==typeof i?"_append_html_data":"_append_json_data"](t,"string"==typeof i?e(e.parseHTML(i)).filter(a):i,function(e){r.call(this,e)})},this)):"object"==typeof s?s.url?(s=e.extend(!0,{},s),e.isFunction(s.url)&&(s.url=s.url.call(this,t)),e.isFunction(s.data)&&(s.data=s.data.call(this,t)),e.ajax(s).done(e.proxy(function(i,s,n){var o=n.getResponseHeader("Content-Type");return o&&o.indexOf("json")!==-1||"object"==typeof i?this._append_json_data(t,i,function(e){r.call(this,e)}):o&&o.indexOf("html")!==-1||"string"==typeof i?this._append_html_data(t,e(e.parseHTML(i)).filter(a),function(e){r.call(this,e)}):(this._data.core.last_error={error:"ajax",plugin:"core",id:"core_04",reason:"Could not load node",data:JSON.stringify({id:t.id,xhr:n})},this.settings.core.error.call(this,this._data.core.last_error),r.call(this,!1))},this)).fail(e.proxy(function(e){r.call(this,!1),this._data.core.last_error={error:"ajax",plugin:"core",id:"core_04",reason:"Could not load node",data:JSON.stringify({id:t.id,xhr:e})},this.settings.core.error.call(this,this._data.core.last_error)},this))):(i=e.isArray(s)||e.isPlainObject(s)?JSON.parse(JSON.stringify(s)):s,t.id===e.jstree.root?this._append_json_data(t,i,function(e){r.call(this,e)}):(this._data.core.last_error={error:"nodata",plugin:"core",id:"core_05",reason:"Could not load node",data:JSON.stringify({id:t.id})},this.settings.core.error.call(this,this._data.core.last_error),r.call(this,!1))):"string"==typeof s?t.id===e.jstree.root?this._append_html_data(t,e(e.parseHTML(s)).filter(a),function(e){r.call(this,e)}):(this._data.core.last_error={error:"nodata",plugin:"core",id:"core_06",reason:"Could not load node",data:JSON.stringify({id:t.id})},this.settings.core.error.call(this,this._data.core.last_error),r.call(this,!1)):r.call(this,!1):t.id===e.jstree.root?this._append_html_data(t,this._data.core.original_container_html.clone(!0),function(e){r.call(this,e)}):r.call(this,!1)},_node_changed:function(e){(e=this.get_node(e))&&this._model.changed.push(e.id)},_append_html_data:function(t,r,i){t=this.get_node(t),t.children=[],t.children_d=[];var s,a,n,o=r.is("ul")?r.children():r,d=t.id,c=[],l=[],h=this._model.data,_=h[d],u=this._data.core.selected.length;for(o.each(e.proxy(function(t,r){(s=this._parse_model_from_html(e(r),d,_.parents.concat()))&&(c.push(s),l.push(s),h[s].children_d.length&&(l=l.concat(h[s].children_d)))},this)),_.children=c,_.children_d=l,a=0,n=_.parents.length;a<n;a++)h[_.parents[a]].children_d=h[_.parents[a]].children_d.concat(l);this.trigger("model",{nodes:l,parent:d}),d!==e.jstree.root?(this._node_changed(d),this.redraw()):(this.get_container_ul().children(".jstree-initial-node").remove(),this.redraw(!0)),this._data.core.selected.length!==u&&this.trigger("changed",{action:"model",selected:this._data.core.selected}),i.call(this,!0)},_append_json_data:function(t,r,i,s){if(null!==this.element){t=this.get_node(t),t.children=[],t.children_d=[],r.d&&"string"==typeof(r=r.d)&&(r=JSON.parse(r)),e.isArray(r)||(r=[r]);var a=null,n={df:this._model.default_state,dat:r,par:t.id,m:this._model.data,t_id:this._id,t_cnt:this._cnt,sel:this._data.core.selected},o=function(e,t){e.data&&(e=e.data);var r,i,s,a,n=e.dat,o=e.par,d=[],c=[],l=[],h=e.df,_=e.t_id,u=e.t_cnt,g=e.m,f=g[o],p=e.sel,m=function(e,r,i){i=i?i.concat():[],r&&i.unshift(r);var s,a,n,o,d=e.id.toString(),c={id:d,text:e.text||"",icon:e.icon===t||e.icon,parent:r,parents:i,children:e.children||[],children_d:e.children_d||[],data:e.data,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(s in h)h.hasOwnProperty(s)&&(c.state[s]=h[s]);if(e&&e.data&&e.data.jstree&&e.data.jstree.icon&&(c.icon=e.data.jstree.icon),c.icon!==t&&null!==c.icon&&""!==c.icon||(c.icon=!0),e&&e.data&&(c.data=e.data,e.data.jstree))for(s in e.data.jstree)e.data.jstree.hasOwnProperty(s)&&(c.state[s]=e.data.jstree[s]);if(e&&"object"==typeof e.state)for(s in e.state)e.state.hasOwnProperty(s)&&(c.state[s]=e.state[s]);if(e&&"object"==typeof e.li_attr)for(s in e.li_attr)e.li_attr.hasOwnProperty(s)&&(c.li_attr[s]=e.li_attr[s]);if(c.li_attr.id||(c.li_attr.id=d),e&&"object"==typeof e.a_attr)for(s in e.a_attr)e.a_attr.hasOwnProperty(s)&&(c.a_attr[s]=e.a_attr[s]);for(e&&e.children&&e.children===!0&&(c.state.loaded=!1,c.children=[],c.children_d=[]),g[c.id]=c,s=0,a=c.children.length;s<a;s++)n=m(g[c.children[s]],c.id,i),o=g[n],c.children_d.push(n),o.children_d.length&&(c.children_d=c.children_d.concat(o.children_d));return delete e.data,delete e.children,g[c.id].original=e,c.state.selected&&l.push(c.id),c.id},v=function(e,r,i){i=i?i.concat():[],r&&i.unshift(r);var s,a,n,o,d,c=!1;do{c="j"+_+"_"+ ++u}while(g[c]);d={id:!1,text:"string"==typeof e?e:"",icon:"object"!=typeof e||e.icon===t||e.icon,parent:r,parents:i,children:[],children_d:[],data:null,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(s in h)h.hasOwnProperty(s)&&(d.state[s]=h[s]);if(e&&e.id&&(d.id=e.id.toString()),e&&e.text&&(d.text=e.text),e&&e.data&&e.data.jstree&&e.data.jstree.icon&&(d.icon=e.data.jstree.icon),d.icon!==t&&null!==d.icon&&""!==d.icon||(d.icon=!0),e&&e.data&&(d.data=e.data,e.data.jstree))for(s in e.data.jstree)e.data.jstree.hasOwnProperty(s)&&(d.state[s]=e.data.jstree[s]);if(e&&"object"==typeof e.state)for(s in e.state)e.state.hasOwnProperty(s)&&(d.state[s]=e.state[s]);if(e&&"object"==typeof e.li_attr)for(s in e.li_attr)e.li_attr.hasOwnProperty(s)&&(d.li_attr[s]=e.li_attr[s]);if(d.li_attr.id&&!d.id&&(d.id=d.li_attr.id.toString()),d.id||(d.id=c),d.li_attr.id||(d.li_attr.id=d.id),e&&"object"==typeof e.a_attr)for(s in e.a_attr)e.a_attr.hasOwnProperty(s)&&(d.a_attr[s]=e.a_attr[s]);if(e&&e.children&&e.children.length){for(s=0,a=e.children.length;s<a;s++)n=v(e.children[s],d.id,i),o=g[n],d.children.push(n),o.children_d.length&&(d.children_d=d.children_d.concat(o.children_d));d.children_d=d.children_d.concat(d.children)}return e&&e.children&&e.children===!0&&(d.state.loaded=!1,d.children=[],d.children_d=[]),delete e.data,delete e.children,d.original=e,g[d.id]=d,d.state.selected&&l.push(d.id),d.id};if(n.length&&n[0].id!==t&&n[0].parent!==t){for(i=0,s=n.length;i<s;i++)n[i].children||(n[i].children=[]),g[n[i].id.toString()]=n[i];for(i=0,s=n.length;i<s;i++)g[n[i].parent.toString()].children.push(n[i].id.toString()),f.children_d.push(n[i].id.toString());for(i=0,s=f.children.length;i<s;i++)r=m(g[f.children[i]],o,f.parents.concat()),c.push(r),g[r].children_d.length&&(c=c.concat(g[r].children_d));for(i=0,s=f.parents.length;i<s;i++)g[f.parents[i]].children_d=g[f.parents[i]].children_d.concat(c);a={cnt:u,mod:g,sel:p,par:o,dpc:c,add:l}}else{for(i=0,s=n.length;i<s;i++)(r=v(n[i],o,f.parents.concat()))&&(d.push(r),c.push(r),g[r].children_d.length&&(c=c.concat(g[r].children_d)));for(f.children=d,f.children_d=c,i=0,s=f.parents.length;i<s;i++)g[f.parents[i]].children_d=g[f.parents[i]].children_d.concat(c);a={cnt:u,mod:g,sel:p,par:o,dpc:c,add:l}}if("undefined"!=typeof window&&void 0!==window.document)return a;postMessage(a)},d=function(t,r){if(null!==this.element){this._cnt=t.cnt;var s,a=this._model.data;for(s in a)a.hasOwnProperty(s)&&a[s].state&&a[s].state.loading&&t.mod[s]&&(t.mod[s].state.loading=!0);if(this._model.data=t.mod,r){var n,o=t.add,d=t.sel,c=this._data.core.selected.slice();if(a=this._model.data,d.length!==c.length||e.vakata.array_unique(d.concat(c)).length!==d.length){for(s=0,n=d.length;s<n;s++)e.inArray(d[s],o)===-1&&e.inArray(d[s],c)===-1&&(a[d[s]].state.selected=!1);for(s=0,n=c.length;s<n;s++)e.inArray(c[s],d)===-1&&(a[c[s]].state.selected=!0)}}t.add.length&&(this._data.core.selected=this._data.core.selected.concat(t.add)),this.trigger("model",{nodes:t.dpc,parent:t.par}),t.par!==e.jstree.root?(this._node_changed(t.par),this.redraw()):this.redraw(!0),t.add.length&&this.trigger("changed",{action:"model",selected:this._data.core.selected}),i.call(this,!0)}};if(this.settings.core.worker&&window.Blob&&window.URL&&window.Worker)try{null===this._wrk&&(this._wrk=window.URL.createObjectURL(new window.Blob(["self.onmessage = "+o.toString()],{type:"text/javascript"}))),!this._data.core.working||s?(this._data.core.working=!0,a=new window.Worker(this._wrk),a.onmessage=e.proxy(function(e){d.call(this,e.data,!0);try{a.terminate(),a=null}catch(e){}this._data.core.worker_queue.length?this._append_json_data.apply(this,this._data.core.worker_queue.shift()):this._data.core.working=!1},this),n.par?a.postMessage(n):this._data.core.worker_queue.length?this._append_json_data.apply(this,this._data.core.worker_queue.shift()):this._data.core.working=!1):this._data.core.worker_queue.push([t,r,i,!0])}catch(e){d.call(this,o(n),!1),this._data.core.worker_queue.length?this._append_json_data.apply(this,this._data.core.worker_queue.shift()):this._data.core.working=!1}else d.call(this,o(n),!1)}},_parse_model_from_html:function(r,i,s){s=s?[].concat(s):[],i&&s.unshift(i);var a,n,o,d,c,l=this._model.data,h={id:!1,text:!1,icon:!0,parent:i,parents:s,children:[],children_d:[],data:null,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(o in this._model.default_state)this._model.default_state.hasOwnProperty(o)&&(h.state[o]=this._model.default_state[o]);if(d=e.vakata.attributes(r,!0),e.each(d,function(t,r){if(r=e.trim(r),!r.length)return!0;h.li_attr[t]=r,"id"===t&&(h.id=r.toString())}),d=r.children("a").first(),d.length&&(d=e.vakata.attributes(d,!0),e.each(d,function(t,r){r=e.trim(r),r.length&&(h.a_attr[t]=r)})),d=r.children("a").first().length?r.children("a").first().clone():r.clone(),d.children("ins, i, ul").remove(),d=d.html(),d=e("<div />").html(d),h.text=this.settings.core.force_text?d.text():d.html(),d=r.data(),h.data=d?e.extend(!0,{},d):null,h.state.opened=r.hasClass("jstree-open"),h.state.selected=r.children("a").hasClass("jstree-clicked"),h.state.disabled=r.children("a").hasClass("jstree-disabled"),h.data&&h.data.jstree)for(o in h.data.jstree)h.data.jstree.hasOwnProperty(o)&&(h.state[o]=h.data.jstree[o]);d=r.children("a").children(".jstree-themeicon"),d.length&&(h.icon=!d.hasClass("jstree-themeicon-hidden")&&d.attr("rel")),h.state.icon!==t&&(h.icon=h.state.icon),h.icon!==t&&null!==h.icon&&""!==h.icon||(h.icon=!0),d=r.children("ul").children("li");do{c="j"+this._id+"_"+ ++this._cnt}while(l[c]);return h.id=h.li_attr.id?h.li_attr.id.toString():c,d.length?(d.each(e.proxy(function(t,r){a=this._parse_model_from_html(e(r),h.id,s),n=this._model.data[a],h.children.push(a),n.children_d.length&&(h.children_d=h.children_d.concat(n.children_d))},this)),h.children_d=h.children_d.concat(h.children)):r.hasClass("jstree-closed")&&(h.state.loaded=!1),h.li_attr.class&&(h.li_attr.class=h.li_attr.class.replace("jstree-closed","").replace("jstree-open","")),h.a_attr.class&&(h.a_attr.class=h.a_attr.class.replace("jstree-clicked","").replace("jstree-disabled","")),l[h.id]=h,h.state.selected&&this._data.core.selected.push(h.id),h.id},_parse_model_from_flat_json:function(e,r,i){i=i?i.concat():[],r&&i.unshift(r);var s,a,n,o,d=e.id.toString(),c=this._model.data,l=this._model.default_state,h={id:d,text:e.text||"",icon:e.icon===t||e.icon,parent:r,parents:i,children:e.children||[],children_d:e.children_d||[],data:e.data,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(s in l)l.hasOwnProperty(s)&&(h.state[s]=l[s]);if(e&&e.data&&e.data.jstree&&e.data.jstree.icon&&(h.icon=e.data.jstree.icon),h.icon!==t&&null!==h.icon&&""!==h.icon||(h.icon=!0),e&&e.data&&(h.data=e.data,e.data.jstree))for(s in e.data.jstree)e.data.jstree.hasOwnProperty(s)&&(h.state[s]=e.data.jstree[s]);if(e&&"object"==typeof e.state)for(s in e.state)e.state.hasOwnProperty(s)&&(h.state[s]=e.state[s]);if(e&&"object"==typeof e.li_attr)for(s in e.li_attr)e.li_attr.hasOwnProperty(s)&&(h.li_attr[s]=e.li_attr[s]);if(h.li_attr.id||(h.li_attr.id=d),e&&"object"==typeof e.a_attr)for(s in e.a_attr)e.a_attr.hasOwnProperty(s)&&(h.a_attr[s]=e.a_attr[s]);for(e&&e.children&&e.children===!0&&(h.state.loaded=!1,h.children=[],h.children_d=[]),c[h.id]=h,s=0,a=h.children.length;s<a;s++)n=this._parse_model_from_flat_json(c[h.children[s]],h.id,i),o=c[n],h.children_d.push(n),o.children_d.length&&(h.children_d=h.children_d.concat(o.children_d));return delete e.data,delete e.children,c[h.id].original=e,h.state.selected&&this._data.core.selected.push(h.id),h.id},_parse_model_from_json:function(e,r,i){i=i?i.concat():[],r&&i.unshift(r);var s,a,n,o,d,c=!1,l=this._model.data,h=this._model.default_state;do{c="j"+this._id+"_"+ ++this._cnt}while(l[c]);d={id:!1,text:"string"==typeof e?e:"",icon:"object"!=typeof e||e.icon===t||e.icon,parent:r,parents:i,children:[],children_d:[],data:null,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(s in h)h.hasOwnProperty(s)&&(d.state[s]=h[s]);if(e&&e.id&&(d.id=e.id.toString()),e&&e.text&&(d.text=e.text),e&&e.data&&e.data.jstree&&e.data.jstree.icon&&(d.icon=e.data.jstree.icon),d.icon!==t&&null!==d.icon&&""!==d.icon||(d.icon=!0),e&&e.data&&(d.data=e.data,e.data.jstree))for(s in e.data.jstree)e.data.jstree.hasOwnProperty(s)&&(d.state[s]=e.data.jstree[s]);if(e&&"object"==typeof e.state)for(s in e.state)e.state.hasOwnProperty(s)&&(d.state[s]=e.state[s]);if(e&&"object"==typeof e.li_attr)for(s in e.li_attr)e.li_attr.hasOwnProperty(s)&&(d.li_attr[s]=e.li_attr[s]);if(d.li_attr.id&&!d.id&&(d.id=d.li_attr.id.toString()),d.id||(d.id=c),d.li_attr.id||(d.li_attr.id=d.id),e&&"object"==typeof e.a_attr)for(s in e.a_attr)e.a_attr.hasOwnProperty(s)&&(d.a_attr[s]=e.a_attr[s]);if(e&&e.children&&e.children.length){for(s=0,a=e.children.length;s<a;s++)n=this._parse_model_from_json(e.children[s],d.id,i),o=l[n],d.children.push(n),o.children_d.length&&(d.children_d=d.children_d.concat(o.children_d));d.children_d=d.children_d.concat(d.children)}return e&&e.children&&e.children===!0&&(d.state.loaded=!1,d.children=[],d.children_d=[]),delete e.data,delete e.children,d.original=e,l[d.id]=d,d.state.selected&&this._data.core.selected.push(d.id),d.id},_redraw:function(){var t,r,i,s=this._model.force_full_redraw?this._model.data[e.jstree.root].children.concat([]):this._model.changed.concat([]),a=d.createElement("UL"),n=this._data.core.focused;for(r=0,i=s.length;r<i;r++)(t=this.redraw_node(s[r],!0,this._model.force_full_redraw))&&this._model.force_full_redraw&&a.appendChild(t);this._model.force_full_redraw&&(a.className=this.get_container_ul()[0].className,a.setAttribute("role","group"),this.element.empty().append(a)),null!==n&&(t=this.get_node(n,!0),t&&t.length&&t.children(".jstree-anchor")[0]!==d.activeElement?t.children(".jstree-anchor").focus():this._data.core.focused=null),this._model.force_full_redraw=!1,this._model.changed=[],this.trigger("redraw",{nodes:s})},redraw:function(e){e&&(this._model.force_full_redraw=!0),this._redraw()},draw_children:function(t){var r=this.get_node(t),i=!1,s=!1,a=!1,n=d;if(!r)return!1;if(r.id===e.jstree.root)return this.redraw(!0);if(!(t=this.get_node(t,!0))||!t.length)return!1;if(t.children(".jstree-children").remove(),t=t[0],r.children.length&&r.state.loaded){for(a=n.createElement("UL"),a.setAttribute("role","group"),a.className="jstree-children",i=0,s=r.children.length;i<s;i++)a.appendChild(this.redraw_node(r.children[i],!0,!0));t.appendChild(a)}},redraw_node:function(t,r,i,s){var a=this.get_node(t),n=!1,o=!1,c=!1,l=!1,h=!1,_=!1,u="",g=d,f=this._model.data,p=!1,m=null,v=0,j=0,y=!1,k=!1;if(!a)return!1
;if(a.id===e.jstree.root)return this.redraw(!0);if(r=r||0===a.children.length,t=d.querySelector?this.element[0].querySelector("#"+("0123456789".indexOf(a.id[0])!==-1?"\\3"+a.id[0]+" "+a.id.substr(1).replace(e.jstree.idregex,"\\$&"):a.id.replace(e.jstree.idregex,"\\$&"))):d.getElementById(a.id))t=e(t),i||(n=t.parent().parent()[0],n===this.element[0]&&(n=null),o=t.index()),r||!a.children.length||t.children(".jstree-children").length||(r=!0),r||(c=t.children(".jstree-children")[0]),p=t.children(".jstree-anchor")[0]===d.activeElement,t.remove();else if(r=!0,!i){if(!(null===(n=a.parent!==e.jstree.root?e("#"+a.parent.replace(e.jstree.idregex,"\\$&"),this.element)[0]:null)||n&&f[a.parent].state.opened))return!1;o=e.inArray(a.id,null===n?f[e.jstree.root].children:f[a.parent].children)}t=this._data.core.node.cloneNode(!0),u="jstree-node ";for(l in a.li_attr)if(a.li_attr.hasOwnProperty(l)){if("id"===l)continue;"class"!==l?t.setAttribute(l,a.li_attr[l]):u+=a.li_attr[l]}for(a.a_attr.id||(a.a_attr.id=a.id+"_anchor"),t.setAttribute("aria-selected",!!a.state.selected),t.setAttribute("aria-level",a.parents.length),t.setAttribute("aria-labelledby",a.a_attr.id),a.state.disabled&&t.setAttribute("aria-disabled",!0),l=0,h=a.children.length;l<h;l++)if(!f[a.children[l]].state.hidden){y=!0;break}if(null!==a.parent&&f[a.parent]&&!a.state.hidden&&(l=e.inArray(a.id,f[a.parent].children),k=a.id,l!==-1))for(l++,h=f[a.parent].children.length;l<h&&(f[f[a.parent].children[l]].state.hidden||(k=f[a.parent].children[l]),k===a.id);l++);a.state.hidden&&(u+=" jstree-hidden"),a.state.loaded&&!y?u+=" jstree-leaf":(u+=a.state.opened&&a.state.loaded?" jstree-open":" jstree-closed",t.setAttribute("aria-expanded",a.state.opened&&a.state.loaded)),k===a.id&&(u+=" jstree-last"),t.id=a.id,t.className=u,u=(a.state.selected?" jstree-clicked":"")+(a.state.disabled?" jstree-disabled":"");for(h in a.a_attr)if(a.a_attr.hasOwnProperty(h)){if("href"===h&&"#"===a.a_attr[h])continue;"class"!==h?t.childNodes[1].setAttribute(h,a.a_attr[h]):u+=" "+a.a_attr[h]}if(u.length&&(t.childNodes[1].className="jstree-anchor "+u),(a.icon&&a.icon!==!0||a.icon===!1)&&(a.icon===!1?t.childNodes[1].childNodes[0].className+=" jstree-themeicon-hidden":a.icon.indexOf("/")===-1&&a.icon.indexOf(".")===-1?t.childNodes[1].childNodes[0].className+=" "+a.icon+" jstree-themeicon-custom":(t.childNodes[1].childNodes[0].style.backgroundImage='url("'+a.icon+'")',t.childNodes[1].childNodes[0].style.backgroundPosition="center center",t.childNodes[1].childNodes[0].style.backgroundSize="auto",t.childNodes[1].childNodes[0].className+=" jstree-themeicon-custom")),this.settings.core.force_text?t.childNodes[1].appendChild(g.createTextNode(a.text)):t.childNodes[1].innerHTML+=a.text,r&&a.children.length&&(a.state.opened||s)&&a.state.loaded){for(_=g.createElement("UL"),_.setAttribute("role","group"),_.className="jstree-children",l=0,h=a.children.length;l<h;l++)_.appendChild(this.redraw_node(a.children[l],r,!0));t.appendChild(_)}if(c&&t.appendChild(c),!i){for(n||(n=this.element[0]),l=0,h=n.childNodes.length;l<h;l++)if(n.childNodes[l]&&n.childNodes[l].className&&n.childNodes[l].className.indexOf("jstree-children")!==-1){m=n.childNodes[l];break}m||(m=g.createElement("UL"),m.setAttribute("role","group"),m.className="jstree-children",n.appendChild(m)),n=m,o<n.childNodes.length?n.insertBefore(t,n.childNodes[o]):n.appendChild(t),p&&(v=this.element[0].scrollTop,j=this.element[0].scrollLeft,t.childNodes[1].focus(),this.element[0].scrollTop=v,this.element[0].scrollLeft=j)}return a.state.opened&&!a.state.loaded&&(a.state.opened=!1,setTimeout(e.proxy(function(){this.open_node(a.id,!1,0)},this),0)),t},open_node:function(r,i,s){var a,n,o,d;if(e.isArray(r)){for(r=r.slice(),a=0,n=r.length;a<n;a++)this.open_node(r[a],i,s);return!0}return!(!(r=this.get_node(r))||r.id===e.jstree.root)&&(s=s===t?this.settings.core.animation:s,this.is_closed(r)?this.is_loaded(r)?(o=this.get_node(r,!0),d=this,o.length&&(s&&o.children(".jstree-children").length&&o.children(".jstree-children").stop(!0,!0),r.children.length&&!this._firstChild(o.children(".jstree-children")[0])&&this.draw_children(r),s?(this.trigger("before_open",{node:r}),o.children(".jstree-children").css("display","none").end().removeClass("jstree-closed").addClass("jstree-open").attr("aria-expanded",!0).children(".jstree-children").stop(!0,!0).slideDown(s,function(){this.style.display="",d.element&&d.trigger("after_open",{node:r})})):(this.trigger("before_open",{node:r}),o[0].className=o[0].className.replace("jstree-closed","jstree-open"),o[0].setAttribute("aria-expanded",!0))),r.state.opened=!0,i&&i.call(this,r,!0),o.length||this.trigger("before_open",{node:r}),this.trigger("open_node",{node:r}),s&&o.length||this.trigger("after_open",{node:r}),!0):this.is_loading(r)?setTimeout(e.proxy(function(){this.open_node(r,i,s)},this),500):void this.load_node(r,function(e,t){return t?this.open_node(e,i,s):!!i&&i.call(this,e,!1)}):(i&&i.call(this,r,!1),!1))},_open_to:function(t){if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;var r,i,s=t.parents;for(r=0,i=s.length;r<i;r+=1)r!==e.jstree.root&&this.open_node(s[r],!1,0);return e("#"+t.id.replace(e.jstree.idregex,"\\$&"),this.element)},close_node:function(r,i){var s,a,n,o;if(e.isArray(r)){for(r=r.slice(),s=0,a=r.length;s<a;s++)this.close_node(r[s],i);return!0}return!(!(r=this.get_node(r))||r.id===e.jstree.root)&&(!this.is_closed(r)&&(i=i===t?this.settings.core.animation:i,n=this,o=this.get_node(r,!0),r.state.opened=!1,this.trigger("close_node",{node:r}),void(o.length?i?o.children(".jstree-children").attr("style","display:block !important").end().removeClass("jstree-open").addClass("jstree-closed").attr("aria-expanded",!1).children(".jstree-children").stop(!0,!0).slideUp(i,function(){this.style.display="",o.children(".jstree-children").remove(),n.element&&n.trigger("after_close",{node:r})}):(o[0].className=o[0].className.replace("jstree-open","jstree-closed"),o.attr("aria-expanded",!1).children(".jstree-children").remove(),this.trigger("after_close",{node:r})):this.trigger("after_close",{node:r}))))},toggle_node:function(t){var r,i;if(e.isArray(t)){for(t=t.slice(),r=0,i=t.length;r<i;r++)this.toggle_node(t[r]);return!0}return this.is_closed(t)?this.open_node(t):this.is_open(t)?this.close_node(t):void 0},open_all:function(t,r,i){if(t||(t=e.jstree.root),!(t=this.get_node(t)))return!1;var s,a,n,o=t.id===e.jstree.root?this.get_container_ul():this.get_node(t,!0);if(!o.length){for(s=0,a=t.children_d.length;s<a;s++)this.is_closed(this._model.data[t.children_d[s]])&&(this._model.data[t.children_d[s]].state.opened=!0);return this.trigger("open_all",{node:t})}i=i||o,n=this,o=this.is_closed(t)?o.find(".jstree-closed").addBack():o.find(".jstree-closed"),o.each(function(){n.open_node(this,function(e,t){t&&this.is_parent(e)&&this.open_all(e,r,i)},r||0)}),0===i.find(".jstree-closed").length&&this.trigger("open_all",{node:this.get_node(i)})},close_all:function(t,r){if(t||(t=e.jstree.root),!(t=this.get_node(t)))return!1;var i,s,a=t.id===e.jstree.root?this.get_container_ul():this.get_node(t,!0),n=this;for(a.length&&(a=this.is_open(t)?a.find(".jstree-open").addBack():a.find(".jstree-open"),e(a.get().reverse()).each(function(){n.close_node(this,r||0)})),i=0,s=t.children_d.length;i<s;i++)this._model.data[t.children_d[i]].state.opened=!1;this.trigger("close_all",{node:t})},is_disabled:function(e){return(e=this.get_node(e))&&e.state&&e.state.disabled},enable_node:function(t){var r,i;if(e.isArray(t)){for(t=t.slice(),r=0,i=t.length;r<i;r++)this.enable_node(t[r]);return!0}if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;t.state.disabled=!1,this.get_node(t,!0).children(".jstree-anchor").removeClass("jstree-disabled").attr("aria-disabled",!1),this.trigger("enable_node",{node:t})},disable_node:function(t){var r,i;if(e.isArray(t)){for(t=t.slice(),r=0,i=t.length;r<i;r++)this.disable_node(t[r]);return!0}if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;t.state.disabled=!0,this.get_node(t,!0).children(".jstree-anchor").addClass("jstree-disabled").attr("aria-disabled",!0),this.trigger("disable_node",{node:t})},is_hidden:function(e){return e=this.get_node(e),e.state.hidden===!0},hide_node:function(t,r){var i,s;if(e.isArray(t)){for(t=t.slice(),i=0,s=t.length;i<s;i++)this.hide_node(t[i],!0);return r||this.redraw(),!0}if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;t.state.hidden||(t.state.hidden=!0,this._node_changed(t.parent),r||this.redraw(),this.trigger("hide_node",{node:t}))},show_node:function(t,r){var i,s;if(e.isArray(t)){for(t=t.slice(),i=0,s=t.length;i<s;i++)this.show_node(t[i],!0);return r||this.redraw(),!0}if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;t.state.hidden&&(t.state.hidden=!1,this._node_changed(t.parent),r||this.redraw(),this.trigger("show_node",{node:t}))},hide_all:function(t){var r,i=this._model.data,s=[];for(r in i)i.hasOwnProperty(r)&&r!==e.jstree.root&&!i[r].state.hidden&&(i[r].state.hidden=!0,s.push(r));return this._model.force_full_redraw=!0,t||this.redraw(),this.trigger("hide_all",{nodes:s}),s},show_all:function(t){var r,i=this._model.data,s=[];for(r in i)i.hasOwnProperty(r)&&r!==e.jstree.root&&i[r].state.hidden&&(i[r].state.hidden=!1,s.push(r));return this._model.force_full_redraw=!0,t||this.redraw(),this.trigger("show_all",{nodes:s}),s},activate_node:function(e,r){if(this.is_disabled(e))return!1;if(r&&"object"==typeof r||(r={}),this._data.core.last_clicked=this._data.core.last_clicked&&this._data.core.last_clicked.id!==t?this.get_node(this._data.core.last_clicked.id):null,this._data.core.last_clicked&&!this._data.core.last_clicked.state.selected&&(this._data.core.last_clicked=null),!this._data.core.last_clicked&&this._data.core.selected.length&&(this._data.core.last_clicked=this.get_node(this._data.core.selected[this._data.core.selected.length-1])),this.settings.core.multiple&&(r.metaKey||r.ctrlKey||r.shiftKey)&&(!r.shiftKey||this._data.core.last_clicked&&this.get_parent(e)&&this.get_parent(e)===this._data.core.last_clicked.parent))if(r.shiftKey){var i,s,a=this.get_node(e).id,n=this._data.core.last_clicked.id,o=this.get_node(this._data.core.last_clicked.parent).children,d=!1;for(i=0,s=o.length;i<s;i+=1)o[i]===a&&(d=!d),o[i]===n&&(d=!d),this.is_disabled(o[i])||!d&&o[i]!==a&&o[i]!==n?this.deselect_node(o[i],!0,r):this.is_hidden(o[i])||this.select_node(o[i],!0,!1,r);this.trigger("changed",{action:"select_node",node:this.get_node(e),selected:this._data.core.selected,event:r})}else this.is_selected(e)?this.deselect_node(e,!1,r):this.select_node(e,!1,!1,r);else!this.settings.core.multiple&&(r.metaKey||r.ctrlKey||r.shiftKey)&&this.is_selected(e)?this.deselect_node(e,!1,r):(this.deselect_all(!0),this.select_node(e,!1,!1,r),this._data.core.last_clicked=this.get_node(e));this.trigger("activate_node",{node:this.get_node(e),event:r})},hover_node:function(e){if(!(e=this.get_node(e,!0))||!e.length||e.children(".jstree-hovered").length)return!1;var t=this.element.find(".jstree-hovered"),r=this.element;t&&t.length&&this.dehover_node(t),e.children(".jstree-anchor").addClass("jstree-hovered"),this.trigger("hover_node",{node:this.get_node(e)}),setTimeout(function(){r.attr("aria-activedescendant",e[0].id)},0)},dehover_node:function(e){if(!(e=this.get_node(e,!0))||!e.length||!e.children(".jstree-hovered").length)return!1;e.children(".jstree-anchor").removeClass("jstree-hovered"),this.trigger("dehover_node",{node:this.get_node(e)})},select_node:function(t,r,i,s){var a,n,o;if(e.isArray(t)){for(t=t.slice(),n=0,o=t.length;n<o;n++)this.select_node(t[n],r,i,s);return!0}if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;a=this.get_node(t,!0),t.state.selected||(t.state.selected=!0,this._data.core.selected.push(t.id),i||(a=this._open_to(t)),a&&a.length&&a.attr("aria-selected",!0).children(".jstree-anchor").addClass("jstree-clicked"),this.trigger("select_node",{node:t,selected:this._data.core.selected,event:s}),r||this.trigger("changed",{action:"select_node",node:t,selected:this._data.core.selected,event:s}))},deselect_node:function(t,r,i){var s,a,n;if(e.isArray(t)){for(t=t.slice(),s=0,a=t.length;s<a;s++)this.deselect_node(t[s],r,i);return!0}if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;n=this.get_node(t,!0),t.state.selected&&(t.state.selected=!1,this._data.core.selected=e.vakata.array_remove_item(this._data.core.selected,t.id),n.length&&n.attr("aria-selected",!1).children(".jstree-anchor").removeClass("jstree-clicked"),this.trigger("deselect_node",{node:t,selected:this._data.core.selected,event:i}),r||this.trigger("changed",{action:"deselect_node",node:t,selected:this._data.core.selected,event:i}))},select_all:function(t){var r,i,s=this._data.core.selected.concat([]);for(this._data.core.selected=this._model.data[e.jstree.root].children_d.concat(),r=0,i=this._data.core.selected.length;r<i;r++)this._model.data[this._data.core.selected[r]]&&(this._model.data[this._data.core.selected[r]].state.selected=!0);this.redraw(!0),this.trigger("select_all",{selected:this._data.core.selected}),t||this.trigger("changed",{action:"select_all",selected:this._data.core.selected,old_selection:s})},deselect_all:function(e){var t,r,i=this._data.core.selected.concat([]);for(t=0,r=this._data.core.selected.length;t<r;t++)this._model.data[this._data.core.selected[t]]&&(this._model.data[this._data.core.selected[t]].state.selected=!1);this._data.core.selected=[],this.element.find(".jstree-clicked").removeClass("jstree-clicked").parent().attr("aria-selected",!1),this.trigger("deselect_all",{selected:this._data.core.selected,node:i}),e||this.trigger("changed",{action:"deselect_all",selected:this._data.core.selected,old_selection:i})},is_selected:function(t){return!(!(t=this.get_node(t))||t.id===e.jstree.root)&&t.state.selected},get_selected:function(t){return t?e.map(this._data.core.selected,e.proxy(function(e){return this.get_node(e)},this)):this._data.core.selected.slice()},get_top_selected:function(t){var r,i,s,a,n=this.get_selected(!0),o={};for(r=0,i=n.length;r<i;r++)o[n[r].id]=n[r];for(r=0,i=n.length;r<i;r++)for(s=0,a=n[r].children_d.length;s<a;s++)o[n[r].children_d[s]]&&delete o[n[r].children_d[s]];n=[];for(r in o)o.hasOwnProperty(r)&&n.push(r);return t?e.map(n,e.proxy(function(e){return this.get_node(e)},this)):n},get_bottom_selected:function(t){var r,i,s=this.get_selected(!0),a=[];for(r=0,i=s.length;r<i;r++)s[r].children.length||a.push(s[r].id);return t?e.map(a,e.proxy(function(e){return this.get_node(e)},this)):a},get_state:function(){var t,r={core:{open:[],scroll:{left:this.element.scrollLeft(),top:this.element.scrollTop()},selected:[]}};for(t in this._model.data)this._model.data.hasOwnProperty(t)&&t!==e.jstree.root&&(this._model.data[t].state.opened&&r.core.open.push(t),this._model.data[t].state.selected&&r.core.selected.push(t));return r},set_state:function(r,i){if(r){if(r.core){var s,a;if(r.core.open)return e.isArray(r.core.open)&&r.core.open.length?this._load_nodes(r.core.open,function(e){this.open_node(e,!1,0),delete r.core.open,this.set_state(r,i)}):(delete r.core.open,this.set_state(r,i)),!1;if(r.core.scroll)return r.core.scroll&&r.core.scroll.left!==t&&this.element.scrollLeft(r.core.scroll.left),r.core.scroll&&r.core.scroll.top!==t&&this.element.scrollTop(r.core.scroll.top),delete r.core.scroll,this.set_state(r,i),!1;if(r.core.selected)return s=this,this.deselect_all(),e.each(r.core.selected,function(e,t){s.select_node(t,!1,!0)}),delete r.core.selected,this.set_state(r,i),!1;for(a in r)r.hasOwnProperty(a)&&"core"!==a&&e.inArray(a,this.settings.plugins)===-1&&delete r[a];if(e.isEmptyObject(r.core))return delete r.core,this.set_state(r,i),!1}return!e.isEmptyObject(r)||(r=null,i&&i.call(this),this.trigger("set_state"),!1)}return!1},refresh:function(t,r){this._data.core.state=r===!0?{}:this.get_state(),r&&e.isFunction(r)&&(this._data.core.state=r.call(this,this._data.core.state)),this._cnt=0,this._model.data={},this._model.data[e.jstree.root]={id:e.jstree.root,parent:null,parents:[],children:[],children_d:[],state:{loaded:!1}},this._data.core.selected=[],this._data.core.last_clicked=null,this._data.core.focused=null;var i=this.get_container_ul()[0].className;t||(this.element.html("<ul class='"+i+"' role='group'><li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='treeitem' id='j"+this._id+"_loading'><i class='jstree-icon jstree-ocl'></i><a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>"+this.get_string("Loading ...")+"</a></li></ul>"),this.element.attr("aria-activedescendant","j"+this._id+"_loading")),this.load_node(e.jstree.root,function(t,r){r&&(this.get_container_ul()[0].className=i,this._firstChild(this.get_container_ul()[0])&&this.element.attr("aria-activedescendant",this._firstChild(this.get_container_ul()[0]).id),this.set_state(e.extend(!0,{},this._data.core.state),function(){this.trigger("refresh")})),this._data.core.state=null})},refresh_node:function(t){if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;var r=[],i=[],s=this._data.core.selected.concat([]);i.push(t.id),t.state.opened===!0&&r.push(t.id),this.get_node(t,!0).find(".jstree-open").each(function(){i.push(this.id),r.push(this.id)}),this._load_nodes(i,e.proxy(function(e){this.open_node(r,!1,0),this.select_node(s),this.trigger("refresh_node",{node:t,nodes:e})},this),!1,!0)},set_id:function(t,r){if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;var i,s,a=this._model.data,n=t.id;for(r=r.toString(),a[t.parent].children[e.inArray(t.id,a[t.parent].children)]=r,i=0,s=t.parents.length;i<s;i++)a[t.parents[i]].children_d[e.inArray(t.id,a[t.parents[i]].children_d)]=r;for(i=0,s=t.children.length;i<s;i++)a[t.children[i]].parent=r;for(i=0,s=t.children_d.length;i<s;i++)a[t.children_d[i]].parents[e.inArray(t.id,a[t.children_d[i]].parents)]=r;return i=e.inArray(t.id,this._data.core.selected),i!==-1&&(this._data.core.selected[i]=r),i=this.get_node(t.id,!0),i&&(i.attr("id",r),this.element.attr("aria-activedescendant")===t.id&&this.element.attr("aria-activedescendant",r)),delete a[t.id],t.id=r,t.li_attr.id=r,a[r]=t,this.trigger("set_id",{node:t,new:t.id,old:n}),!0},get_text:function(t){return!(!(t=this.get_node(t))||t.id===e.jstree.root)&&t.text},set_text:function(t,r){var i,s;if(e.isArray(t)){for(t=t.slice(),i=0,s=t.length;i<s;i++)this.set_text(t[i],r);return!0}return!(!(t=this.get_node(t))||t.id===e.jstree.root)&&(t.text=r,this.get_node(t,!0).length&&this.redraw_node(t.id),this.trigger("set_text",{obj:t,text:r}),!0)},get_json:function(t,r,i){if(!(t=this.get_node(t||e.jstree.root)))return!1;r&&r.flat&&!i&&(i=[]);var s,a,n={id:t.id,text:t.text,icon:this.get_icon(t),li_attr:e.extend(!0,{},t.li_attr),a_attr:e.extend(!0,{},t.a_attr),state:{},data:(!r||!r.no_data)&&e.extend(!0,{},t.data)};if(r&&r.flat?n.parent=t.parent:n.children=[],r&&r.no_state)delete n.state;else for(s in t.state)t.state.hasOwnProperty(s)&&(n.state[s]=t.state[s]);if(r&&r.no_li_attr&&delete n.li_attr,r&&r.no_a_attr&&delete n.a_attr,r&&r.no_id&&(delete n.id,n.li_attr&&n.li_attr.id&&delete n.li_attr.id,n.a_attr&&n.a_attr.id&&delete n.a_attr.id),r&&r.flat&&t.id!==e.jstree.root&&i.push(n),!r||!r.no_children)for(s=0,a=t.children.length;s<a;s++)r&&r.flat?this.get_json(t.children[s],r,i):n.children.push(this.get_json(t.children[s],r));return r&&r.flat?i:t.id===e.jstree.root?n.children:n},create_node:function(r,i,s,a,n){if(null===r&&(r=e.jstree.root),!(r=this.get_node(r)))return!1;if(s=s===t?"last":s,!s.toString().match(/^(before|after)$/)&&!n&&!this.is_loaded(r))return this.load_node(r,function(){this.create_node(r,i,s,a,!0)});i||(i={text:this.get_string("New node")}),"string"==typeof i&&(i={text:i}),i.text===t&&(i.text=this.get_string("New node"));var o,d,c,l;switch(r.id===e.jstree.root&&("before"===s&&(s="first"),"after"===s&&(s="last")),s){case"before":o=this.get_node(r.parent),s=e.inArray(r.id,o.children),r=o;break;case"after":o=this.get_node(r.parent),s=e.inArray(r.id,o.children)+1,r=o;break;case"inside":case"first":s=0;break;case"last":s=r.children.length;break;default:s||(s=0)}if(s>r.children.length&&(s=r.children.length),i.id||(i.id=!0),!this.check("create_node",i,r,s))return this.settings.core.error.call(this,this._data.core.last_error),!1;if(i.id===!0&&delete i.id,!(i=this._parse_model_from_json(i,r.id,r.parents.concat())))return!1;for(o=this.get_node(i),d=[],d.push(i),d=d.concat(o.children_d),this.trigger("model",{nodes:d,parent:r.id}),r.children_d=r.children_d.concat(d),c=0,l=r.parents.length;c<l;c++)this._model.data[r.parents[c]].children_d=this._model.data[r.parents[c]].children_d.concat(d);for(i=o,o=[],c=0,l=r.children.length;c<l;c++)o[c>=s?c+1:c]=r.children[c];return o[s]=i.id,r.children=o,this.redraw_node(r,!0),a&&a.call(this,this.get_node(i)),this.trigger("create_node",{node:this.get_node(i),parent:r.id,position:s}),i.id},rename_node:function(t,r){var i,s,a;if(e.isArray(t)){for(t=t.slice(),i=0,s=t.length;i<s;i++)this.rename_node(t[i],r);return!0}return!(!(t=this.get_node(t))||t.id===e.jstree.root)&&(a=t.text,this.check("rename_node",t,this.get_parent(t),r)?(this.set_text(t,r),this.trigger("rename_node",{node:t,text:r,old:a}),!0):(this.settings.core.error.call(this,this._data.core.last_error),!1))},delete_node:function(t){var r,i,s,a,n,o,d,c,l,h,_,u;if(e.isArray(t)){for(t=t.slice(),r=0,i=t.length;r<i;r++)this.delete_node(t[r]);return!0}if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;if(s=this.get_node(t.parent),a=e.inArray(t.id,s.children),h=!1,!this.check("delete_node",t,s,a))return this.settings.core.error.call(this,this._data.core.last_error),!1;for(a!==-1&&(s.children=e.vakata.array_remove(s.children,a)),n=t.children_d.concat([]),n.push(t.id),o=0,d=t.parents.length;o<d;o++)this._model.data[t.parents[o]].children_d=e.vakata.array_filter(this._model.data[t.parents[o]].children_d,function(t){return e.inArray(t,n)===-1});for(c=0,l=n.length;c<l;c++)if(this._model.data[n[c]].state.selected){h=!0;break}for(h&&(this._data.core.selected=e.vakata.array_filter(this._data.core.selected,function(t){return e.inArray(t,n)===-1})),this.trigger("delete_node",{node:t,parent:s.id}),h&&this.trigger("changed",{action:"delete_node",node:t,selected:this._data.core.selected,parent:s.id}),c=0,l=n.length;c<l;c++)delete this._model.data[n[c]];return e.inArray(this._data.core.focused,n)!==-1&&(this._data.core.focused=null,_=this.element[0].scrollTop,u=this.element[0].scrollLeft,s.id===e.jstree.root?this._model.data[e.jstree.root].children[0]&&this.get_node(this._model.data[e.jstree.root].children[0],!0).children(".jstree-anchor").focus():this.get_node(s,!0).children(".jstree-anchor").focus(),this.element[0].scrollTop=_,this.element[0].scrollLeft=u),this.redraw_node(s,!0),!0},check:function(t,r,i,s,a){r=r&&r.id?r:this.get_node(r),i=i&&i.id?i:this.get_node(i);var n=t.match(/^move_node|copy_node|create_node$/i)?i:r,o=this.settings.core.check_callback;return"move_node"!==t&&"copy_node"!==t||a&&a.is_multi||r.id!==i.id&&("move_node"!==t||e.inArray(r.id,i.children)!==s)&&e.inArray(i.id,r.children_d)===-1?(n&&n.data&&(n=n.data),n&&n.functions&&(n.functions[t]===!1||n.functions[t]===!0)?(n.functions[t]===!1&&(this._data.core.last_error={error:"check",plugin:"core",id:"core_02",reason:"Node data prevents function: "+t,data:JSON.stringify({chk:t,pos:s,obj:!(!r||!r.id)&&r.id,par:!(!i||!i.id)&&i.id})}),n.functions[t]):!(o===!1||e.isFunction(o)&&o.call(this,t,r,i,s,a)===!1||o&&o[t]===!1)||(this._data.core.last_error={error:"check",plugin:"core",id:"core_03",reason:"User config for core.check_callback prevents function: "+t,data:JSON.stringify({chk:t,pos:s,obj:!(!r||!r.id)&&r.id,par:!(!i||!i.id)&&i.id})},!1)):(this._data.core.last_error={error:"check",plugin:"core",id:"core_01",reason:"Moving parent inside child",data:JSON.stringify({chk:t,pos:s,obj:!(!r||!r.id)&&r.id,par:!(!i||!i.id)&&i.id})},!1)},last_error:function(){return this._data.core.last_error},move_node:function(r,i,s,a,n,o,d){var c,l,h,_,u,g,f,p,m,v,j,y,k,x;if(i=this.get_node(i),s=s===t?0:s,!i)return!1;if(!s.toString().match(/^(before|after)$/)&&!n&&!this.is_loaded(i))return this.load_node(i,function(){this.move_node(r,i,s,a,!0,!1,d)});if(e.isArray(r)){if(1!==r.length){for(c=0,l=r.length;c<l;c++)(m=this.move_node(r[c],i,s,a,n,!1,d))&&(i=m,s="after");return this.redraw(),!0}r=r[0]}if(!(r=r&&r.id?r:this.get_node(r))||r.id===e.jstree.root)return!1;if(h=(r.parent||e.jstree.root).toString(),u=s.toString().match(/^(before|after)$/)&&i.id!==e.jstree.root?this.get_node(i.parent):i,g=d||(this._model.data[r.id]?this:e.jstree.reference(r.id)),f=!g||!g._id||this._id!==g._id,_=g&&g._id&&h&&g._model.data[h]&&g._model.data[h].children?e.inArray(r.id,g._model.data[h].children):-1,g&&g._id&&(r=g._model.data[r.id]),f)return!!(m=this.copy_node(r,i,s,a,n,!1,d))&&(g&&g.delete_node(r),m);switch(i.id===e.jstree.root&&("before"===s&&(s="first"),"after"===s&&(s="last")),s){case"before":s=e.inArray(i.id,u.children);break;case"after":s=e.inArray(i.id,u.children)+1;break;case"inside":case"first":s=0;break;case"last":s=u.children.length;break;default:s||(s=0)}if(s>u.children.length&&(s=u.children.length),!this.check("move_node",r,u,s,{core:!0,origin:d,is_multi:g&&g._id&&g._id!==this._id,is_foreign:!g||!g._id}))return this.settings.core.error.call(this,this._data.core.last_error),!1;if(r.parent===u.id){for(p=u.children.concat(),m=e.inArray(r.id,p),m!==-1&&(p=e.vakata.array_remove(p,m),s>m&&s--),m=[],v=0,j=p.length;v<j;v++)m[v>=s?v+1:v]=p[v];m[s]=r.id,u.children=m,this._node_changed(u.id),this.redraw(u.id===e.jstree.root)}else{for(m=r.children_d.concat(),m.push(r.id),v=0,j=r.parents.length;v<j;v++){for(p=[],x=g._model.data[r.parents[v]].children_d,y=0,k=x.length;y<k;y++)e.inArray(x[y],m)===-1&&p.push(x[y]);g._model.data[r.parents[v]].children_d=p}for(g._model.data[h].children=e.vakata.array_remove_item(g._model.data[h].children,r.id),v=0,j=u.parents.length;v<j;v++)this._model.data[u.parents[v]].children_d=this._model.data[u.parents[v]].children_d.concat(m);for(p=[],v=0,j=u.children.length;v<j;v++)p[v>=s?v+1:v]=u.children[v];for(p[s]=r.id,u.children=p,u.children_d.push(r.id),u.children_d=u.children_d.concat(r.children_d),r.parent=u.id,m=u.parents.concat(),m.unshift(u.id),x=r.parents.length,r.parents=m,m=m.concat(),v=0,j=r.children_d.length;v<j;v++)this._model.data[r.children_d[v]].parents=this._model.data[r.children_d[v]].parents.slice(0,x*-1),Array.prototype.push.apply(this._model.data[r.children_d[v]].parents,m);h!==e.jstree.root&&u.id!==e.jstree.root||(this._model.force_full_redraw=!0),this._model.force_full_redraw||(this._node_changed(h),this._node_changed(u.id)),o||this.redraw()}return a&&a.call(this,r,u,s),this.trigger("move_node",{node:r,parent:u.id,position:s,old_parent:h,old_position:_,is_multi:g&&g._id&&g._id!==this._id,is_foreign:!g||!g._id,old_instance:g,new_instance:this}),r.id},copy_node:function(r,i,s,a,n,o,d){var c,l,h,_,u,g,f,p,m,v;if(i=this.get_node(i),s=s===t?0:s,!i)return!1;if(!s.toString().match(/^(before|after)$/)&&!n&&!this.is_loaded(i))return this.load_node(i,function(){this.copy_node(r,i,s,a,!0,!1,d)});if(e.isArray(r)){if(1!==r.length){for(c=0,l=r.length;c<l;c++)(_=this.copy_node(r[c],i,s,a,n,!0,d))&&(i=_,s="after");return this.redraw(),!0}r=r[0]}if(!(r=r&&r.id?r:this.get_node(r))||r.id===e.jstree.root)return!1;switch(p=(r.parent||e.jstree.root).toString(),m=s.toString().match(/^(before|after)$/)&&i.id!==e.jstree.root?this.get_node(i.parent):i,v=d||(this._model.data[r.id]?this:e.jstree.reference(r.id)),!v||!v._id||this._id!==v._id,v&&v._id&&(r=v._model.data[r.id]),i.id===e.jstree.root&&("before"===s&&(s="first"),"after"===s&&(s="last")),s){case"before":s=e.inArray(i.id,m.children);break;case"after":s=e.inArray(i.id,m.children)+1;break;case"inside":case"first":s=0;break;case"last":s=m.children.length;break;default:s||(s=0)}if(s>m.children.length&&(s=m.children.length),!this.check("copy_node",r,m,s,{core:!0,origin:d,is_multi:v&&v._id&&v._id!==this._id,is_foreign:!v||!v._id}))return this.settings.core.error.call(this,this._data.core.last_error),!1;if(!(f=v?v.get_json(r,{no_id:!0,no_data:!0,no_state:!0}):r))return!1;if(f.id===!0&&delete f.id,!(f=this._parse_model_from_json(f,m.id,m.parents.concat())))return!1;for(_=this.get_node(f),r&&r.state&&r.state.loaded===!1&&(_.state.loaded=!1),h=[],h.push(f),h=h.concat(_.children_d),this.trigger("model",{nodes:h,parent:m.id}),u=0,g=m.parents.length;u<g;u++)this._model.data[m.parents[u]].children_d=this._model.data[m.parents[u]].children_d.concat(h);for(h=[],u=0,g=m.children.length;u<g;u++)h[u>=s?u+1:u]=m.children[u];return h[s]=_.id,m.children=h,m.children_d.push(_.id),m.children_d=m.children_d.concat(_.children_d),m.id===e.jstree.root&&(this._model.force_full_redraw=!0),this._model.force_full_redraw||this._node_changed(m.id),o||this.redraw(m.id===e.jstree.root),a&&a.call(this,_,m,s),this.trigger("copy_node",{node:_,original:r,parent:m.id,position:s,old_parent:p,old_position:v&&v._id&&p&&v._model.data[p]&&v._model.data[p].children?e.inArray(r.id,v._model.data[p].children):-1,is_multi:v&&v._id&&v._id!==this._id,is_foreign:!v||!v._id,old_instance:v,new_instance:this}),_.id},cut:function(t){if(t||(t=this._data.core.selected.concat()),e.isArray(t)||(t=[t]),!t.length)return!1;var r,n,o,d=[];for(n=0,o=t.length;n<o;n++)(r=this.get_node(t[n]))&&r.id&&r.id!==e.jstree.root&&d.push(r);if(!d.length)return!1;i=d,a=this,s="move_node",this.trigger("cut",{node:t})},copy:function(t){if(t||(t=this._data.core.selected.concat()),e.isArray(t)||(t=[t]),!t.length)return!1;var r,n,o,d=[];for(n=0,o=t.length;n<o;n++)(r=this.get_node(t[n]))&&r.id&&r.id!==e.jstree.root&&d.push(r);if(!d.length)return!1;i=d,a=this,s="copy_node",this.trigger("copy",{node:t})},get_buffer:function(){return{mode:s,node:i,inst:a}},can_paste:function(){return s!==!1&&i!==!1},paste:function(e,t){if(!((e=this.get_node(e))&&s&&s.match(/^(copy_node|move_node)$/)&&i))return!1;this[s](i,e,t,!1,!1,!1,a)&&this.trigger("paste",{parent:e.id,node:i,mode:s}),i=!1,s=!1,a=!1},clear_buffer:function(){i=!1,s=!1,a=!1,this.trigger("clear_buffer")},edit:function(t,r,i){var s,a,n,o,c,l,h,_,u,g=!1;return!!(t=this.get_node(t))&&(this.settings.core.check_callback===!1?(this._data.core.last_error={error:"check",plugin:"core",id:"core_07",reason:"Could not edit node because of check_callback"},this.settings.core.error.call(this,this._data.core.last_error),!1):(u=t,r="string"==typeof r?r:t.text,this.set_text(t,""),t=this._open_to(t),u.text=r,s=this._data.core.rtl,a=this.element.width(),this._data.core.focused=u.id,n=t.children(".jstree-anchor").focus(),o=e("<span>"),c=r,l=e("<div />",{css:{position:"absolute",top:"-200px",left:s?"0px":"-1000px",visibility:"hidden"}}).appendTo("body"),h=e("<input />",{value:c,class:"jstree-rename-input",css:{padding:"0",border:"1px solid silver","box-sizing":"border-box",display:"inline-block",height:this._data.core.li_height+"px",lineHeight:this._data.core.li_height+"px",width:"150px"},blur:e.proxy(function(r){r.stopImmediatePropagation(),r.preventDefault();var s,a=o.children(".jstree-rename-input"),d=a.val(),_=this.settings.core.force_text;""===d&&(d=c),l.remove(),o.replaceWith(n),o.remove(),c=_?c:e("<div></div>").append(e.parseHTML(c)).html(),this.set_text(t,c),s=!!this.rename_node(t,_?e("<div></div>").text(d).text():e("<div></div>").append(e.parseHTML(d)).html()),s||this.set_text(t,c),this._data.core.focused=u.id,setTimeout(e.proxy(function(){var e=this.get_node(u.id,!0);e.length&&(this._data.core.focused=u.id,e.children(".jstree-anchor").focus())},this),0),i&&i.call(this,u,s,g),h=null},this),keydown:function(e){var t=e.which;27===t&&(g=!0,this.value=c),27!==t&&13!==t&&37!==t&&38!==t&&39!==t&&40!==t&&32!==t||e.stopImmediatePropagation(),27!==t&&13!==t||(e.preventDefault(),this.blur())},click:function(e){e.stopImmediatePropagation()},mousedown:function(e){e.stopImmediatePropagation()},keyup:function(e){h.width(Math.min(l.text("pW"+this.value).width(),a))},keypress:function(e){if(13===e.which)return!1}}),_={fontFamily:n.css("fontFamily")||"",fontSize:n.css("fontSize")||"",fontWeight:n.css("fontWeight")||"",
fontStyle:n.css("fontStyle")||"",fontStretch:n.css("fontStretch")||"",fontVariant:n.css("fontVariant")||"",letterSpacing:n.css("letterSpacing")||"",wordSpacing:n.css("wordSpacing")||""},o.attr("class",n.attr("class")).append(n.contents().clone()).append(h),n.replaceWith(o),l.css(_),h.css(_).width(Math.min(l.text("pW"+h[0].value).width(),a))[0].select(),void e(d).one("mousedown.jstree touchstart.jstree dnd_start.vakata",function(t){h&&t.target!==h&&e(h).blur()})))},set_theme:function(t,r){if(!t)return!1;if(r===!0){var i=this.settings.core.themes.dir;i||(i=e.jstree.path+"/themes"),r=i+"/"+t+"/style.css"}r&&e.inArray(r,n)===-1&&(e("head").append('<link rel="stylesheet" href="'+r+'" type="text/css" />'),n.push(r)),this._data.core.themes.name&&this.element.removeClass("jstree-"+this._data.core.themes.name),this._data.core.themes.name=t,this.element.addClass("jstree-"+t),this.element[this.settings.core.themes.responsive?"addClass":"removeClass"]("jstree-"+t+"-responsive"),this.trigger("set_theme",{theme:t})},get_theme:function(){return this._data.core.themes.name},set_theme_variant:function(e){this._data.core.themes.variant&&this.element.removeClass("jstree-"+this._data.core.themes.name+"-"+this._data.core.themes.variant),this._data.core.themes.variant=e,e&&this.element.addClass("jstree-"+this._data.core.themes.name+"-"+this._data.core.themes.variant)},get_theme_variant:function(){return this._data.core.themes.variant},show_stripes:function(){this._data.core.themes.stripes=!0,this.get_container_ul().addClass("jstree-striped"),this.trigger("show_stripes")},hide_stripes:function(){this._data.core.themes.stripes=!1,this.get_container_ul().removeClass("jstree-striped"),this.trigger("hide_stripes")},toggle_stripes:function(){this._data.core.themes.stripes?this.hide_stripes():this.show_stripes()},show_dots:function(){this._data.core.themes.dots=!0,this.get_container_ul().removeClass("jstree-no-dots"),this.trigger("show_dots")},hide_dots:function(){this._data.core.themes.dots=!1,this.get_container_ul().addClass("jstree-no-dots"),this.trigger("hide_dots")},toggle_dots:function(){this._data.core.themes.dots?this.hide_dots():this.show_dots()},show_icons:function(){this._data.core.themes.icons=!0,this.get_container_ul().removeClass("jstree-no-icons"),this.trigger("show_icons")},hide_icons:function(){this._data.core.themes.icons=!1,this.get_container_ul().addClass("jstree-no-icons"),this.trigger("hide_icons")},toggle_icons:function(){this._data.core.themes.icons?this.hide_icons():this.show_icons()},show_ellipsis:function(){this._data.core.themes.ellipsis=!0,this.get_container_ul().addClass("jstree-ellipsis"),this.trigger("show_ellipsis")},hide_ellipsis:function(){this._data.core.themes.ellipsis=!1,this.get_container_ul().removeClass("jstree-ellipsis"),this.trigger("hide_ellipsis")},toggle_ellipsis:function(){this._data.core.themes.ellipsis?this.hide_ellipsis():this.show_ellipsis()},set_icon:function(r,i){var s,a,n,o;if(e.isArray(r)){for(r=r.slice(),s=0,a=r.length;s<a;s++)this.set_icon(r[s],i);return!0}return!(!(r=this.get_node(r))||r.id===e.jstree.root)&&(o=r.icon,r.icon=i===!0||null===i||i===t||""===i||i,n=this.get_node(r,!0).children(".jstree-anchor").children(".jstree-themeicon"),i===!1?this.hide_icon(r):i===!0||null===i||i===t||""===i?(n.removeClass("jstree-themeicon-custom "+o).css("background","").removeAttr("rel"),o===!1&&this.show_icon(r)):i.indexOf("/")===-1&&i.indexOf(".")===-1?(n.removeClass(o).css("background",""),n.addClass(i+" jstree-themeicon-custom").attr("rel",i),o===!1&&this.show_icon(r)):(n.removeClass(o).css("background",""),n.addClass("jstree-themeicon-custom").css("background","url('"+i+"') center center no-repeat").attr("rel",i),o===!1&&this.show_icon(r)),!0)},get_icon:function(t){return!(!(t=this.get_node(t))||t.id===e.jstree.root)&&t.icon},hide_icon:function(t){var r,i;if(e.isArray(t)){for(t=t.slice(),r=0,i=t.length;r<i;r++)this.hide_icon(t[r]);return!0}return!(!(t=this.get_node(t))||t===e.jstree.root)&&(t.icon=!1,this.get_node(t,!0).children(".jstree-anchor").children(".jstree-themeicon").addClass("jstree-themeicon-hidden"),!0)},show_icon:function(t){var r,i,s;if(e.isArray(t)){for(t=t.slice(),r=0,i=t.length;r<i;r++)this.show_icon(t[r]);return!0}return!(!(t=this.get_node(t))||t===e.jstree.root)&&(s=this.get_node(t,!0),t.icon=!s.length||s.children(".jstree-anchor").children(".jstree-themeicon").attr("rel"),t.icon||(t.icon=!0),s.children(".jstree-anchor").children(".jstree-themeicon").removeClass("jstree-themeicon-hidden"),!0)}},e.vakata={},e.vakata.attributes=function(t,r){t=e(t)[0];var i=r?{}:[];return t&&t.attributes&&e.each(t.attributes,function(t,s){e.inArray(s.name.toLowerCase(),["style","contenteditable","hasfocus","tabindex"])===-1&&null!==s.value&&""!==e.trim(s.value)&&(r?i[s.name]=s.value:i.push(s.name))}),i},e.vakata.array_unique=function(e){var r,i,s=[],a={};for(r=0,i=e.length;r<i;r++)a[e[r]]===t&&(s.push(e[r]),a[e[r]]=!0);return s},e.vakata.array_remove=function(e,t){return e.splice(t,1),e},e.vakata.array_remove_item=function(t,r){var i=e.inArray(r,t);return i!==-1?e.vakata.array_remove(t,i):t},e.vakata.array_filter=function(e,t,r,i,s){if(e.filter)return e.filter(t,r);i=[];for(s in e)~~s+""==s+""&&s>=0&&t.call(r,e[s],+s,e)&&i.push(e[s]);return i},e.jstree.plugins.changed=function(e,t){var r=[];this.trigger=function(e,i){var s,a;if(i||(i={}),"changed"===e.replace(".jstree","")){i.changed={selected:[],deselected:[]};var n={};for(s=0,a=r.length;s<a;s++)n[r[s]]=1;for(s=0,a=i.selected.length;s<a;s++)n[i.selected[s]]?n[i.selected[s]]=2:i.changed.selected.push(i.selected[s]);for(s=0,a=r.length;s<a;s++)1===n[r[s]]&&i.changed.deselected.push(r[s]);r=i.selected.slice()}t.trigger.call(this,e,i)},this.refresh=function(e,i){return r=[],t.refresh.apply(this,arguments)}};var c=d.createElement("I");c.className="jstree-icon jstree-checkbox",c.setAttribute("role","presentation"),e.jstree.defaults.checkbox={visible:!0,three_state:!0,whole_node:!0,keep_selected_style:!0,cascade:"",tie_selection:!0},e.jstree.plugins.checkbox=function(r,i){this.bind=function(){i.bind.call(this),this._data.checkbox.uto=!1,this._data.checkbox.selected=[],this.settings.checkbox.three_state&&(this.settings.checkbox.cascade="up+down+undetermined"),this.element.on("init.jstree",e.proxy(function(){this._data.checkbox.visible=this.settings.checkbox.visible,this.settings.checkbox.keep_selected_style||this.element.addClass("jstree-checkbox-no-clicked"),this.settings.checkbox.tie_selection&&this.element.addClass("jstree-checkbox-selection")},this)).on("loading.jstree",e.proxy(function(){this[this._data.checkbox.visible?"show_checkboxes":"hide_checkboxes"]()},this)),this.settings.checkbox.cascade.indexOf("undetermined")!==-1&&this.element.on("changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree",e.proxy(function(){this._data.checkbox.uto&&clearTimeout(this._data.checkbox.uto),this._data.checkbox.uto=setTimeout(e.proxy(this._undetermined,this),50)},this)),this.settings.checkbox.tie_selection||this.element.on("model.jstree",e.proxy(function(e,t){var r,i,s=this._model.data,a=(s[t.parent],t.nodes);for(r=0,i=a.length;r<i;r++)s[a[r]].state.checked=s[a[r]].state.checked||s[a[r]].original&&s[a[r]].original.state&&s[a[r]].original.state.checked,s[a[r]].state.checked&&this._data.checkbox.selected.push(a[r])},this)),this.settings.checkbox.cascade.indexOf("up")===-1&&this.settings.checkbox.cascade.indexOf("down")===-1||this.element.on("model.jstree",e.proxy(function(t,r){var i,s,a,n,o,d,c=this._model.data,l=c[r.parent],h=r.nodes,_=[],u=this.settings.checkbox.cascade,g=this.settings.checkbox.tie_selection;if(u.indexOf("down")!==-1)if(l.state[g?"selected":"checked"]){for(s=0,a=h.length;s<a;s++)c[h[s]].state[g?"selected":"checked"]=!0;this._data[g?"core":"checkbox"].selected=this._data[g?"core":"checkbox"].selected.concat(h)}else for(s=0,a=h.length;s<a;s++)if(c[h[s]].state[g?"selected":"checked"]){for(n=0,o=c[h[s]].children_d.length;n<o;n++)c[c[h[s]].children_d[n]].state[g?"selected":"checked"]=!0;this._data[g?"core":"checkbox"].selected=this._data[g?"core":"checkbox"].selected.concat(c[h[s]].children_d)}if(u.indexOf("up")!==-1){for(s=0,a=l.children_d.length;s<a;s++)c[l.children_d[s]].children.length||_.push(c[l.children_d[s]].parent);for(_=e.vakata.array_unique(_),n=0,o=_.length;n<o;n++)for(l=c[_[n]];l&&l.id!==e.jstree.root;){for(i=0,s=0,a=l.children.length;s<a;s++)i+=c[l.children[s]].state[g?"selected":"checked"];if(i!==a)break;l.state[g?"selected":"checked"]=!0,this._data[g?"core":"checkbox"].selected.push(l.id),(d=this.get_node(l,!0))&&d.length&&d.attr("aria-selected",!0).children(".jstree-anchor").addClass(g?"jstree-clicked":"jstree-checked"),l=this.get_node(l.parent)}}this._data[g?"core":"checkbox"].selected=e.vakata.array_unique(this._data[g?"core":"checkbox"].selected)},this)).on(this.settings.checkbox.tie_selection?"select_node.jstree":"check_node.jstree",e.proxy(function(t,r){var i,s,a,n,o=r.node,d=this._model.data,c=this.get_node(o.parent),l=this.get_node(o,!0),h=this.settings.checkbox.cascade,_=this.settings.checkbox.tie_selection,u={},g=this._data[_?"core":"checkbox"].selected;for(i=0,s=g.length;i<s;i++)u[g[i]]=!0;if(h.indexOf("down")!==-1)for(i=0,s=o.children_d.length;i<s;i++)u[o.children_d[i]]=!0,n=d[o.children_d[i]],n.state[_?"selected":"checked"]=!0,n&&n.original&&n.original.state&&n.original.state.undetermined&&(n.original.state.undetermined=!1);if(h.indexOf("up")!==-1)for(;c&&c.id!==e.jstree.root;){for(a=0,i=0,s=c.children.length;i<s;i++)a+=d[c.children[i]].state[_?"selected":"checked"];if(a!==s)break;c.state[_?"selected":"checked"]=!0,u[c.id]=!0,(n=this.get_node(c,!0))&&n.length&&n.attr("aria-selected",!0).children(".jstree-anchor").addClass(_?"jstree-clicked":"jstree-checked"),c=this.get_node(c.parent)}g=[];for(i in u)u.hasOwnProperty(i)&&g.push(i);this._data[_?"core":"checkbox"].selected=g,h.indexOf("down")!==-1&&l.length&&l.find(".jstree-anchor").addClass(_?"jstree-clicked":"jstree-checked").parent().attr("aria-selected",!0)},this)).on(this.settings.checkbox.tie_selection?"deselect_all.jstree":"uncheck_all.jstree",e.proxy(function(t,r){var i,s,a,n=this.get_node(e.jstree.root),o=this._model.data;for(i=0,s=n.children_d.length;i<s;i++)(a=o[n.children_d[i]])&&a.original&&a.original.state&&a.original.state.undetermined&&(a.original.state.undetermined=!1)},this)).on(this.settings.checkbox.tie_selection?"deselect_node.jstree":"uncheck_node.jstree",e.proxy(function(t,r){var i,s,a,n=r.node,o=this.get_node(n,!0),d=this.settings.checkbox.cascade,c=this.settings.checkbox.tie_selection,l=this._data[c?"core":"checkbox"].selected,h={};if(n&&n.original&&n.original.state&&n.original.state.undetermined&&(n.original.state.undetermined=!1),d.indexOf("down")!==-1)for(i=0,s=n.children_d.length;i<s;i++)a=this._model.data[n.children_d[i]],a.state[c?"selected":"checked"]=!1,a&&a.original&&a.original.state&&a.original.state.undetermined&&(a.original.state.undetermined=!1);if(d.indexOf("up")!==-1)for(i=0,s=n.parents.length;i<s;i++)a=this._model.data[n.parents[i]],a.state[c?"selected":"checked"]=!1,a&&a.original&&a.original.state&&a.original.state.undetermined&&(a.original.state.undetermined=!1),(a=this.get_node(n.parents[i],!0))&&a.length&&a.attr("aria-selected",!1).children(".jstree-anchor").removeClass(c?"jstree-clicked":"jstree-checked");for(h={},i=0,s=l.length;i<s;i++)d.indexOf("down")!==-1&&e.inArray(l[i],n.children_d)!==-1||d.indexOf("up")!==-1&&e.inArray(l[i],n.parents)!==-1||(h[l[i]]=!0);l=[];for(i in h)h.hasOwnProperty(i)&&l.push(i);this._data[c?"core":"checkbox"].selected=l,d.indexOf("down")!==-1&&o.length&&o.find(".jstree-anchor").removeClass(c?"jstree-clicked":"jstree-checked").parent().attr("aria-selected",!1)},this)),this.settings.checkbox.cascade.indexOf("up")!==-1&&this.element.on("delete_node.jstree",e.proxy(function(t,r){for(var i,s,a,n,o=this.get_node(r.parent),d=this._model.data,c=this.settings.checkbox.tie_selection;o&&o.id!==e.jstree.root&&!o.state[c?"selected":"checked"];){for(a=0,i=0,s=o.children.length;i<s;i++)a+=d[o.children[i]].state[c?"selected":"checked"];if(!(s>0&&a===s))break;o.state[c?"selected":"checked"]=!0,this._data[c?"core":"checkbox"].selected.push(o.id),(n=this.get_node(o,!0))&&n.length&&n.attr("aria-selected",!0).children(".jstree-anchor").addClass(c?"jstree-clicked":"jstree-checked"),o=this.get_node(o.parent)}},this)).on("move_node.jstree",e.proxy(function(t,r){var i,s,a,n,o,d=r.is_multi,c=r.old_parent,l=this.get_node(r.parent),h=this._model.data,_=this.settings.checkbox.tie_selection;if(!d)for(i=this.get_node(c);i&&i.id!==e.jstree.root&&!i.state[_?"selected":"checked"];){for(s=0,a=0,n=i.children.length;a<n;a++)s+=h[i.children[a]].state[_?"selected":"checked"];if(!(n>0&&s===n))break;i.state[_?"selected":"checked"]=!0,this._data[_?"core":"checkbox"].selected.push(i.id),(o=this.get_node(i,!0))&&o.length&&o.attr("aria-selected",!0).children(".jstree-anchor").addClass(_?"jstree-clicked":"jstree-checked"),i=this.get_node(i.parent)}for(i=l;i&&i.id!==e.jstree.root;){for(s=0,a=0,n=i.children.length;a<n;a++)s+=h[i.children[a]].state[_?"selected":"checked"];if(s===n)i.state[_?"selected":"checked"]||(i.state[_?"selected":"checked"]=!0,this._data[_?"core":"checkbox"].selected.push(i.id),(o=this.get_node(i,!0))&&o.length&&o.attr("aria-selected",!0).children(".jstree-anchor").addClass(_?"jstree-clicked":"jstree-checked"));else{if(!i.state[_?"selected":"checked"])break;i.state[_?"selected":"checked"]=!1,this._data[_?"core":"checkbox"].selected=e.vakata.array_remove_item(this._data[_?"core":"checkbox"].selected,i.id),(o=this.get_node(i,!0))&&o.length&&o.attr("aria-selected",!1).children(".jstree-anchor").removeClass(_?"jstree-clicked":"jstree-checked")}i=this.get_node(i.parent)}},this))},this._undetermined=function(){if(null!==this.element){var r,i,s,a,n={},o=this._model.data,d=this.settings.checkbox.tie_selection,c=this._data[d?"core":"checkbox"].selected,l=[],h=this;for(r=0,i=c.length;r<i;r++)if(o[c[r]]&&o[c[r]].parents)for(s=0,a=o[c[r]].parents.length;s<a&&n[o[c[r]].parents[s]]===t;s++)o[c[r]].parents[s]!==e.jstree.root&&(n[o[c[r]].parents[s]]=!0,l.push(o[c[r]].parents[s]));for(this.element.find(".jstree-closed").not(":has(.jstree-children)").each(function(){var d,c=h.get_node(this);if(c.state.loaded){for(r=0,i=c.children_d.length;r<i;r++)if(d=o[c.children_d[r]],!d.state.loaded&&d.original&&d.original.state&&d.original.state.undetermined&&d.original.state.undetermined===!0)for(n[d.id]===t&&d.id!==e.jstree.root&&(n[d.id]=!0,l.push(d.id)),s=0,a=d.parents.length;s<a;s++)n[d.parents[s]]===t&&d.parents[s]!==e.jstree.root&&(n[d.parents[s]]=!0,l.push(d.parents[s]))}else if(c.original&&c.original.state&&c.original.state.undetermined&&c.original.state.undetermined===!0)for(n[c.id]===t&&c.id!==e.jstree.root&&(n[c.id]=!0,l.push(c.id)),s=0,a=c.parents.length;s<a;s++)n[c.parents[s]]===t&&c.parents[s]!==e.jstree.root&&(n[c.parents[s]]=!0,l.push(c.parents[s]))}),this.element.find(".jstree-undetermined").removeClass("jstree-undetermined"),r=0,i=l.length;r<i;r++)o[l[r]].state[d?"selected":"checked"]||(c=this.get_node(l[r],!0))&&c.length&&c.children(".jstree-anchor").children(".jstree-checkbox").addClass("jstree-undetermined")}},this.redraw_node=function(t,r,s,a){if(t=i.redraw_node.apply(this,arguments)){var n,o,d=null,l=null;for(n=0,o=t.childNodes.length;n<o;n++)if(t.childNodes[n]&&t.childNodes[n].className&&t.childNodes[n].className.indexOf("jstree-anchor")!==-1){d=t.childNodes[n];break}d&&(!this.settings.checkbox.tie_selection&&this._model.data[t.id].state.checked&&(d.className+=" jstree-checked"),l=c.cloneNode(!1),this._model.data[t.id].state.checkbox_disabled&&(l.className+=" jstree-checkbox-disabled"),d.insertBefore(l,d.childNodes[0]))}return s||this.settings.checkbox.cascade.indexOf("undetermined")===-1||(this._data.checkbox.uto&&clearTimeout(this._data.checkbox.uto),this._data.checkbox.uto=setTimeout(e.proxy(this._undetermined,this),50)),t},this.show_checkboxes=function(){this._data.core.themes.checkboxes=!0,this.get_container_ul().removeClass("jstree-no-checkboxes")},this.hide_checkboxes=function(){this._data.core.themes.checkboxes=!1,this.get_container_ul().addClass("jstree-no-checkboxes")},this.toggle_checkboxes=function(){this._data.core.themes.checkboxes?this.hide_checkboxes():this.show_checkboxes()},this.is_undetermined=function(t){t=this.get_node(t);var r,i,s=this.settings.checkbox.cascade,a=this.settings.checkbox.tie_selection,n=this._data[a?"core":"checkbox"].selected,o=this._model.data;if(!t||t.state[a?"selected":"checked"]===!0||s.indexOf("undetermined")===-1||s.indexOf("down")===-1&&s.indexOf("up")===-1)return!1;if(!t.state.loaded&&t.original.state.undetermined===!0)return!0;for(r=0,i=t.children_d.length;r<i;r++)if(e.inArray(t.children_d[r],n)!==-1||!o[t.children_d[r]].state.loaded&&o[t.children_d[r]].original.state.undetermined)return!0;return!1},this.disable_checkbox=function(t){var r,i,s;if(e.isArray(t)){for(t=t.slice(),r=0,i=t.length;r<i;r++)this.disable_checkbox(t[r]);return!0}if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;s=this.get_node(t,!0),t.state.checkbox_disabled||(t.state.checkbox_disabled=!0,s&&s.length&&s.children(".jstree-anchor").children(".jstree-checkbox").addClass("jstree-checkbox-disabled"),this.trigger("disable_checkbox",{node:t}))},this.enable_checkbox=function(t){var r,i,s;if(e.isArray(t)){for(t=t.slice(),r=0,i=t.length;r<i;r++)this.enable_checkbox(t[r]);return!0}if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;s=this.get_node(t,!0),t.state.checkbox_disabled&&(t.state.checkbox_disabled=!1,s&&s.length&&s.children(".jstree-anchor").children(".jstree-checkbox").removeClass("jstree-checkbox-disabled"),this.trigger("enable_checkbox",{node:t}))},this.activate_node=function(t,r){return!e(r.target).hasClass("jstree-checkbox-disabled")&&(this.settings.checkbox.tie_selection&&(this.settings.checkbox.whole_node||e(r.target).hasClass("jstree-checkbox"))&&(r.ctrlKey=!0),this.settings.checkbox.tie_selection||!this.settings.checkbox.whole_node&&!e(r.target).hasClass("jstree-checkbox")?i.activate_node.call(this,t,r):!this.is_disabled(t)&&(this.is_checked(t)?this.uncheck_node(t,r):this.check_node(t,r),void this.trigger("activate_node",{node:this.get_node(t)})))},this.check_node=function(t,r){if(this.settings.checkbox.tie_selection)return this.select_node(t,!1,!0,r);var i,s,a;if(e.isArray(t)){for(t=t.slice(),s=0,a=t.length;s<a;s++)this.check_node(t[s],r);return!0}if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;i=this.get_node(t,!0),t.state.checked||(t.state.checked=!0,this._data.checkbox.selected.push(t.id),i&&i.length&&i.children(".jstree-anchor").addClass("jstree-checked"),this.trigger("check_node",{node:t,selected:this._data.checkbox.selected,event:r}))},this.uncheck_node=function(t,r){if(this.settings.checkbox.tie_selection)return this.deselect_node(t,!1,r);var i,s,a;if(e.isArray(t)){for(t=t.slice(),i=0,s=t.length;i<s;i++)this.uncheck_node(t[i],r);return!0}if(!(t=this.get_node(t))||t.id===e.jstree.root)return!1;a=this.get_node(t,!0),t.state.checked&&(t.state.checked=!1,this._data.checkbox.selected=e.vakata.array_remove_item(this._data.checkbox.selected,t.id),a.length&&a.children(".jstree-anchor").removeClass("jstree-checked"),this.trigger("uncheck_node",{node:t,selected:this._data.checkbox.selected,event:r}))},this.check_all=function(){if(this.settings.checkbox.tie_selection)return this.select_all();var t,r;this._data.checkbox.selected.concat([]);for(this._data.checkbox.selected=this._model.data[e.jstree.root].children_d.concat(),t=0,r=this._data.checkbox.selected.length;t<r;t++)this._model.data[this._data.checkbox.selected[t]]&&(this._model.data[this._data.checkbox.selected[t]].state.checked=!0);this.redraw(!0),this.trigger("check_all",{selected:this._data.checkbox.selected})},this.uncheck_all=function(){if(this.settings.checkbox.tie_selection)return this.deselect_all();var e,t,r=this._data.checkbox.selected.concat([]);for(e=0,t=this._data.checkbox.selected.length;e<t;e++)this._model.data[this._data.checkbox.selected[e]]&&(this._model.data[this._data.checkbox.selected[e]].state.checked=!1);this._data.checkbox.selected=[],this.element.find(".jstree-checked").removeClass("jstree-checked"),this.trigger("uncheck_all",{selected:this._data.checkbox.selected,node:r})},this.is_checked=function(t){return this.settings.checkbox.tie_selection?this.is_selected(t):!(!(t=this.get_node(t))||t.id===e.jstree.root)&&t.state.checked},this.get_checked=function(t){return this.settings.checkbox.tie_selection?this.get_selected(t):t?e.map(this._data.checkbox.selected,e.proxy(function(e){return this.get_node(e)},this)):this._data.checkbox.selected},this.get_top_checked=function(t){if(this.settings.checkbox.tie_selection)return this.get_top_selected(t);var r,i,s,a,n=this.get_checked(!0),o={};for(r=0,i=n.length;r<i;r++)o[n[r].id]=n[r];for(r=0,i=n.length;r<i;r++)for(s=0,a=n[r].children_d.length;s<a;s++)o[n[r].children_d[s]]&&delete o[n[r].children_d[s]];n=[];for(r in o)o.hasOwnProperty(r)&&n.push(r);return t?e.map(n,e.proxy(function(e){return this.get_node(e)},this)):n},this.get_bottom_checked=function(t){if(this.settings.checkbox.tie_selection)return this.get_bottom_selected(t);var r,i,s=this.get_checked(!0),a=[];for(r=0,i=s.length;r<i;r++)s[r].children.length||a.push(s[r].id);return t?e.map(a,e.proxy(function(e){return this.get_node(e)},this)):a},this.load_node=function(t,r){var s,a,n;if(!e.isArray(t)&&!this.settings.checkbox.tie_selection&&(n=this.get_node(t))&&n.state.loaded)for(s=0,a=n.children_d.length;s<a;s++)this._model.data[n.children_d[s]].state.checked&&(!0,this._data.checkbox.selected=e.vakata.array_remove_item(this._data.checkbox.selected,n.children_d[s]));return i.load_node.apply(this,arguments)},this.get_state=function(){var e=i.get_state.apply(this,arguments);return this.settings.checkbox.tie_selection?e:(e.checkbox=this._data.checkbox.selected.slice(),e)},this.set_state=function(t,r){var s=i.set_state.apply(this,arguments);if(s&&t.checkbox){if(!this.settings.checkbox.tie_selection){this.uncheck_all();var a=this;e.each(t.checkbox,function(e,t){a.check_node(t)})}return delete t.checkbox,this.set_state(t,r),!1}return s},this.refresh=function(e,t){return this.settings.checkbox.tie_selection||(this._data.checkbox.selected=[]),i.refresh.apply(this,arguments)}},e.jstree.defaults.conditionalselect=function(){return!0},e.jstree.plugins.conditionalselect=function(e,t){this.activate_node=function(e,r){this.settings.conditionalselect.call(this,this.get_node(e),r)&&t.activate_node.call(this,e,r)}},e.jstree.defaults.contextmenu={select_node:!0,show_at_node:!0,items:function(t,r){return{create:{separator_before:!1,separator_after:!0,_disabled:!1,label:"Create",action:function(t){var r=e.jstree.reference(t.reference),i=r.get_node(t.reference);r.create_node(i,{},"last",function(e){setTimeout(function(){r.edit(e)},0)})}},rename:{separator_before:!1,separator_after:!1,_disabled:!1,label:"Rename",action:function(t){var r=e.jstree.reference(t.reference),i=r.get_node(t.reference);r.edit(i)}},remove:{separator_before:!1,icon:!1,separator_after:!1,_disabled:!1,label:"Delete",action:function(t){var r=e.jstree.reference(t.reference),i=r.get_node(t.reference);r.is_selected(i)?r.delete_node(r.get_selected()):r.delete_node(i)}},ccp:{separator_before:!0,icon:!1,separator_after:!1,label:"Edit",action:!1,submenu:{cut:{separator_before:!1,separator_after:!1,label:"Cut",action:function(t){var r=e.jstree.reference(t.reference),i=r.get_node(t.reference);r.is_selected(i)?r.cut(r.get_top_selected()):r.cut(i)}},copy:{separator_before:!1,icon:!1,separator_after:!1,label:"Copy",action:function(t){var r=e.jstree.reference(t.reference),i=r.get_node(t.reference);r.is_selected(i)?r.copy(r.get_top_selected()):r.copy(i)}},paste:{separator_before:!1,icon:!1,_disabled:function(t){return!e.jstree.reference(t.reference).can_paste()},separator_after:!1,label:"Paste",action:function(t){var r=e.jstree.reference(t.reference),i=r.get_node(t.reference);r.paste(i)}}}}}}},e.jstree.plugins.contextmenu=function(r,i){this.bind=function(){i.bind.call(this);var t,r,s=0,a=null;this.element.on("contextmenu.jstree",".jstree-anchor",e.proxy(function(e,t){"input"!==e.target.tagName.toLowerCase()&&(e.preventDefault(),s=e.ctrlKey?+new Date:0,(t||a)&&(s=+new Date+1e4),a&&clearTimeout(a),this.is_loading(e.currentTarget)||this.show_contextmenu(e.currentTarget,e.pageX,e.pageY,e))},this)).on("click.jstree",".jstree-anchor",e.proxy(function(t){this._data.contextmenu.visible&&(!s||+new Date-s>250)&&e.vakata.context.hide(),s=0},this)).on("touchstart.jstree",".jstree-anchor",function(i){i.originalEvent&&i.originalEvent.changedTouches&&i.originalEvent.changedTouches[0]&&(t=i.originalEvent.changedTouches[0].clientX,r=i.originalEvent.changedTouches[0].clientY,a=setTimeout(function(){e(i.currentTarget).trigger("contextmenu",!0)},750))}).on("touchmove.vakata.jstree",function(e){a&&e.originalEvent&&e.originalEvent.changedTouches&&e.originalEvent.changedTouches[0]&&(Math.abs(t-e.originalEvent.changedTouches[0].clientX)>50||Math.abs(r-e.originalEvent.changedTouches[0].clientY)>50)&&clearTimeout(a)}).on("touchend.vakata.jstree",function(e){a&&clearTimeout(a)}),e(d).on("context_hide.vakata.jstree",e.proxy(function(t,r){this._data.contextmenu.visible=!1,e(r.reference).removeClass("jstree-context")},this))},this.teardown=function(){this._data.contextmenu.visible&&e.vakata.context.hide(),i.teardown.call(this)},this.show_contextmenu=function(r,i,s,a){if(!(r=this.get_node(r))||r.id===e.jstree.root)return!1;var n=this.settings.contextmenu,o=this.get_node(r,!0),d=o.children(".jstree-anchor"),c=!1,l=!1;(n.show_at_node||i===t||s===t)&&(c=d.offset(),i=c.left,s=c.top+this._data.core.li_height),this.settings.contextmenu.select_node&&!this.is_selected(r)&&this.activate_node(r,a),l=n.items,e.isFunction(l)&&(l=l.call(this,r,e.proxy(function(e){this._show_contextmenu(r,i,s,e)},this))),e.isPlainObject(l)&&this._show_contextmenu(r,i,s,l)},this._show_contextmenu=function(t,r,i,s){var a=this.get_node(t,!0),n=a.children(".jstree-anchor");e(d).one("context_show.vakata.jstree",e.proxy(function(t,r){var i="jstree-contextmenu jstree-"+this.get_theme()+"-contextmenu";e(r.element).addClass(i),n.addClass("jstree-context")},this)),this._data.contextmenu.visible=!0,e.vakata.context.show(n,{x:r,y:i},s),this.trigger("show_contextmenu",{node:t,x:r,y:i})}},function(e){var t=!1,r={element:!1,reference:!1,position_x:0,position_y:0,items:[],html:"",is_visible:!1};e.vakata.context={settings:{hide_onmouseleave:0,icons:!0},_trigger:function(t){e(d).triggerHandler("context_"+t+".vakata",{reference:r.reference,element:r.element,position:{x:r.position_x,y:r.position_y}})},_execute:function(t){return!(!(t=r.items[t])||t._disabled&&(!e.isFunction(t._disabled)||t._disabled({item:t,reference:r.reference,element:r.element}))||!t.action)&&t.action.call(null,{item:t,reference:r.reference,element:r.element,position:{x:r.position_x,y:r.position_y}})},_parse:function(t,i){if(!t)return!1;i||(r.html="",r.items=[]);var s,a="",n=!1;return i&&(a+="<ul>"),e.each(t,function(t,i){if(!i)return!0;r.items.push(i),!n&&i.separator_before&&(a+="<li class='vakata-context-separator'><a href='#' "+(e.vakata.context.settings.icons?"":'style="margin-left:0px;"')+">&#160;</a></li>"),n=!1,a+="<li class='"+(i._class||"")+(i._disabled===!0||e.isFunction(i._disabled)&&i._disabled({item:i,reference:r.reference,element:r.element})?" vakata-contextmenu-disabled ":"")+"' "+(i.shortcut?" data-shortcut='"+i.shortcut+"' ":"")+">",a+="<a href='#' rel='"+(r.items.length-1)+"' "+(i.title?"title='"+i.title+"'":"")+">",e.vakata.context.settings.icons&&(a+="<i ",i.icon&&(i.icon.indexOf("/")!==-1||i.icon.indexOf(".")!==-1?a+=" style='background:url(\""+i.icon+"\") center center no-repeat' ":a+=" class='"+i.icon+"' "),a+="></i><span class='vakata-contextmenu-sep'>&#160;</span>"),a+=(e.isFunction(i.label)?i.label({item:t,reference:r.reference,element:r.element}):i.label)+(i.shortcut?' <span class="vakata-contextmenu-shortcut vakata-contextmenu-shortcut-'+i.shortcut+'">'+(i.shortcut_label||"")+"</span>":"")+"</a>",i.submenu&&(s=e.vakata.context._parse(i.submenu,!0))&&(a+=s),a+="</li>",i.separator_after&&(a+="<li class='vakata-context-separator'><a href='#' "+(e.vakata.context.settings.icons?"":'style="margin-left:0px;"')+">&#160;</a></li>",n=!0)}),a=a.replace(/<li class\='vakata-context-separator'\><\/li\>$/,""),i&&(a+="</ul>"),i||(r.html=a,e.vakata.context._trigger("parse")),a.length>10&&a},_show_submenu:function(r){if(r=e(r),r.length&&r.children("ul").length){var i=r.children("ul"),s=r.offset().left,a=s+r.outerWidth(),n=r.offset().top,o=i.width(),d=i.height(),c=e(window).width()+e(window).scrollLeft(),l=e(window).height()+e(window).scrollTop();t?r[a-(o+10+r.outerWidth())<0?"addClass":"removeClass"]("vakata-context-left"):r[a+o>c&&s>c-a?"addClass":"removeClass"]("vakata-context-right"),n+d+10>l&&i.css("bottom","-1px"),r.hasClass("vakata-context-right")?s<o&&i.css("margin-right",s-o):c-a<o&&i.css("margin-left",c-a-o),i.show()}},show:function(i,s,a){var n,o,d,c,l,h,_,u;switch(r.element&&r.element.length&&r.element.width(""),!0){case!s&&!i:return!1;case!!s&&!!i:r.reference=i,r.position_x=s.x,r.position_y=s.y;break;case!s&&!!i:r.reference=i,n=i.offset(),r.position_x=n.left+i.outerHeight(),r.position_y=n.top;break;case!!s&&!i:r.position_x=s.x,r.position_y=s.y}i&&!a&&e(i).data("vakata_contextmenu")&&(a=e(i).data("vakata_contextmenu")),e.vakata.context._parse(a)&&r.element.html(r.html),r.items.length&&(r.element.appendTo("body"),o=r.element,d=r.position_x,c=r.position_y,l=o.width(),h=o.height(),_=e(window).width()+e(window).scrollLeft(),u=e(window).height()+e(window).scrollTop(),t&&(d-=o.outerWidth()-e(i).outerWidth())<e(window).scrollLeft()+20&&(d=e(window).scrollLeft()+20),d+l+20>_&&(d=_-(l+20)),c+h+20>u&&(c=u-(h+20)),r.element.css({left:d,top:c}).show().find("a").first().focus().parent().addClass("vakata-context-hover"),r.is_visible=!0,e.vakata.context._trigger("show"))},hide:function(){r.is_visible&&(r.element.hide().find("ul").hide().end().find(":focus").blur().end().detach(),r.is_visible=!1,e.vakata.context._trigger("hide"))}},e(function(){t="rtl"===e("body").css("direction");var i=!1;r.element=e("<ul class='vakata-context'></ul>"),r.element.on("mouseenter","li",function(t){t.stopImmediatePropagation(),e.contains(this,t.relatedTarget)||(i&&clearTimeout(i),r.element.find(".vakata-context-hover").removeClass("vakata-context-hover").end(),e(this).siblings().find("ul").hide().end().end().parentsUntil(".vakata-context","li").addBack().addClass("vakata-context-hover"),e.vakata.context._show_submenu(this))}).on("mouseleave","li",function(t){e.contains(this,t.relatedTarget)||e(this).find(".vakata-context-hover").addBack().removeClass("vakata-context-hover")}).on("mouseleave",function(t){e(this).find(".vakata-context-hover").removeClass("vakata-context-hover"),e.vakata.context.settings.hide_onmouseleave&&(i=setTimeout(function(t){return function(){e.vakata.context.hide()}}(),e.vakata.context.settings.hide_onmouseleave))}).on("click","a",function(t){t.preventDefault(),e(this).blur().parent().hasClass("vakata-context-disabled")||e.vakata.context._execute(e(this).attr("rel"))===!1||e.vakata.context.hide()}).on("keydown","a",function(t){var i=null;switch(t.which){case 13:case 32:t.type="click",t.preventDefault(),e(t.currentTarget).trigger(t);break;case 37:r.is_visible&&(r.element.find(".vakata-context-hover").last().closest("li").first().find("ul").hide().find(".vakata-context-hover").removeClass("vakata-context-hover").end().end().children("a").focus(),t.stopImmediatePropagation(),t.preventDefault());break;case 38:r.is_visible&&(i=r.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").prevAll("li:not(.vakata-context-separator)").first(),
i.length||(i=r.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").last()),i.addClass("vakata-context-hover").children("a").focus(),t.stopImmediatePropagation(),t.preventDefault());break;case 39:r.is_visible&&(r.element.find(".vakata-context-hover").last().children("ul").show().children("li:not(.vakata-context-separator)").removeClass("vakata-context-hover").first().addClass("vakata-context-hover").children("a").focus(),t.stopImmediatePropagation(),t.preventDefault());break;case 40:r.is_visible&&(i=r.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").nextAll("li:not(.vakata-context-separator)").first(),i.length||(i=r.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").first()),i.addClass("vakata-context-hover").children("a").focus(),t.stopImmediatePropagation(),t.preventDefault());break;case 27:e.vakata.context.hide(),t.preventDefault()}}).on("keydown",function(e){e.preventDefault();var t=r.element.find(".vakata-contextmenu-shortcut-"+e.which).parent();t.parent().not(".vakata-context-disabled")&&t.click()}),e(d).on("mousedown.vakata.jstree",function(t){r.is_visible&&!e.contains(r.element[0],t.target)&&e.vakata.context.hide()}).on("context_show.vakata.jstree",function(e,i){r.element.find("li:has(ul)").children("a").addClass("vakata-context-parent"),t&&r.element.addClass("vakata-context-rtl").css("direction","rtl"),r.element.find("ul").hide().end()})})}(e),e.jstree.defaults.dnd={copy:!0,open_timeout:500,is_draggable:!0,check_while_dragging:!0,always_copy:!1,inside_pos:0,drag_selection:!0,touch:!0,large_drop_target:!1,large_drag_target:!1,use_html5:!1};var l,h;e.jstree.plugins.dnd=function(t,r){this.init=function(e,t){r.init.call(this,e,t),this.settings.dnd.use_html5=this.settings.dnd.use_html5&&"draggable"in d.createElement("span")},this.bind=function(){r.bind.call(this),this.element.on(this.settings.dnd.use_html5?"dragstart.jstree":"mousedown.jstree touchstart.jstree",this.settings.dnd.large_drag_target?".jstree-node":".jstree-anchor",e.proxy(function(t){if(this.settings.dnd.large_drag_target&&e(t.target).closest(".jstree-node")[0]!==t.currentTarget)return!0;if("touchstart"===t.type&&(!this.settings.dnd.touch||"selected"===this.settings.dnd.touch&&!e(t.currentTarget).closest(".jstree-node").children(".jstree-anchor").hasClass("jstree-clicked")))return!0;var r=this.get_node(t.target),i=this.is_selected(r)&&this.settings.dnd.drag_selection?this.get_top_selected().length:1,s=i>1?i+" "+this.get_string("nodes"):this.get_text(t.currentTarget);if(this.settings.core.force_text&&(s=e.vakata.html.escape(s)),r&&r.id&&r.id!==e.jstree.root&&(1===t.which||"touchstart"===t.type||"dragstart"===t.type)&&(this.settings.dnd.is_draggable===!0||e.isFunction(this.settings.dnd.is_draggable)&&this.settings.dnd.is_draggable.call(this,i>1?this.get_top_selected(!0):[r],t))){if(l={jstree:!0,origin:this,obj:this.get_node(r,!0),nodes:i>1?this.get_top_selected():[r.id]},h=t.currentTarget,!this.settings.dnd.use_html5)return this.element.trigger("mousedown.jstree"),e.vakata.dnd.start(t,l,'<div id="jstree-dnd" class="jstree-'+this.get_theme()+" jstree-"+this.get_theme()+"-"+this.get_theme_variant()+" "+(this.settings.core.themes.responsive?" jstree-dnd-responsive":"")+'"><i class="jstree-icon jstree-er"></i>'+s+'<ins class="jstree-copy" style="display:none;">+</ins></div>');e.vakata.dnd._trigger("start",t,{helper:e(),element:h,data:l})}},this)),this.settings.dnd.use_html5&&this.element.on("dragover.jstree",function(t){return t.preventDefault(),e.vakata.dnd._trigger("move",t,{helper:e(),element:h,data:l}),!1}).on("drop.jstree",e.proxy(function(t){return t.preventDefault(),e.vakata.dnd._trigger("stop",t,{helper:e(),element:h,data:l}),!1},this))},this.redraw_node=function(e,t,i,s){if((e=r.redraw_node.apply(this,arguments))&&this.settings.dnd.use_html5)if(this.settings.dnd.large_drag_target)e.setAttribute("draggable",!0);else{var a,n,o=null;for(a=0,n=e.childNodes.length;a<n;a++)if(e.childNodes[a]&&e.childNodes[a].className&&e.childNodes[a].className.indexOf("jstree-anchor")!==-1){o=e.childNodes[a];break}o&&o.setAttribute("draggable",!0)}return e}},e(function(){var r=!1,i=!1,s=!1,a=!1,n=e('<div id="jstree-marker">&#160;</div>').hide();e(d).on("dnd_start.vakata.jstree",function(e,t){r=!1,s=!1,t&&t.data&&t.data.jstree&&n.appendTo("body")}).on("dnd_move.vakata.jstree",function(o,d){if(a&&(d.event&&"dragover"===d.event.type&&d.event.target===s.target||clearTimeout(a)),d&&d.data&&d.data.jstree&&(!d.event.target.id||"jstree-marker"!==d.event.target.id)){s=d.event;var c,l,h,_,u,g,f,p,m,v,j,y,k,x,b,w,C=e.jstree.reference(d.event.target),T=!1,O=!1,A=!1;if(C&&C._data&&C._data.dnd)if(n.attr("class","jstree-"+C.get_theme()+(C.settings.core.themes.responsive?" jstree-dnd-responsive":"")),b=d.data.origin&&(d.data.origin.settings.dnd.always_copy||d.data.origin.settings.dnd.copy&&(d.event.metaKey||d.event.ctrlKey)),d.helper.children().attr("class","jstree-"+C.get_theme()+" jstree-"+C.get_theme()+"-"+C.get_theme_variant()+" "+(C.settings.core.themes.responsive?" jstree-dnd-responsive":"")).find(".jstree-copy").first()[b?"show":"hide"](),d.event.target!==C.element[0]&&d.event.target!==C.get_container_ul()[0]||0!==C.get_container_ul().children().length){if((T=C.settings.dnd.large_drop_target?e(d.event.target).closest(".jstree-node").children(".jstree-anchor"):e(d.event.target).closest(".jstree-anchor"))&&T.length&&T.parent().is(".jstree-closed, .jstree-open, .jstree-leaf")&&(O=T.offset(),A=(d.event.pageY!==t?d.event.pageY:d.event.originalEvent.pageY)-O.top,h=T.outerHeight(),g=A<h/3?["b","i","a"]:A>h-h/3?["a","i","b"]:A>h/2?["i","a","b"]:["i","b","a"],e.each(g,function(t,s){switch(s){case"b":c=O.left-6,l=O.top,_=C.get_parent(T),u=T.parent().index();break;case"i":k=C.settings.dnd.inside_pos,x=C.get_node(T.parent()),c=O.left-2,l=O.top+h/2+1,_=x.id,u="first"===k?0:"last"===k?x.children.length:Math.min(k,x.children.length);break;case"a":c=O.left-6,l=O.top+h,_=C.get_parent(T),u=T.parent().index()+1}for(f=!0,p=0,m=d.data.nodes.length;p<m;p++)if(v=d.data.origin&&(d.data.origin.settings.dnd.always_copy||d.data.origin.settings.dnd.copy&&(d.event.metaKey||d.event.ctrlKey))?"copy_node":"move_node",j=u,"move_node"===v&&"a"===s&&d.data.origin&&d.data.origin===C&&_===C.get_parent(d.data.nodes[p])&&(y=C.get_node(_),j>e.inArray(d.data.nodes[p],y.children)&&(j-=1)),!(f=f&&(C&&C.settings&&C.settings.dnd&&C.settings.dnd.check_while_dragging===!1||C.check(v,d.data.origin&&d.data.origin!==C?d.data.origin.get_node(d.data.nodes[p]):d.data.nodes[p],_,j,{dnd:!0,ref:C.get_node(T.parent()),pos:s,origin:d.data.origin,is_multi:d.data.origin&&d.data.origin!==C,is_foreign:!d.data.origin})))){C&&C.last_error&&(i=C.last_error());break}if("i"===s&&T.parent().is(".jstree-closed")&&C.settings.dnd.open_timeout&&(a=setTimeout(function(e,t){return function(){e.open_node(t)}}(C,T),C.settings.dnd.open_timeout)),f)return w=C.get_node(_,!0),w.hasClass(".jstree-dnd-parent")||(e(".jstree-dnd-parent").removeClass("jstree-dnd-parent"),w.addClass("jstree-dnd-parent")),r={ins:C,par:_,pos:"i"!==s||"last"!==k||0!==u||C.is_loaded(x)?u:"last"},n.css({left:c+"px",top:l+"px"}).show(),d.helper.find(".jstree-icon").first().removeClass("jstree-er").addClass("jstree-ok"),d.event.originalEvent&&d.event.originalEvent.dataTransfer&&(d.event.originalEvent.dataTransfer.dropEffect=b?"copy":"move"),i={},g=!0,!1}),g===!0))return}else{for(f=!0,p=0,m=d.data.nodes.length;p<m&&(f=f&&C.check(d.data.origin&&(d.data.origin.settings.dnd.always_copy||d.data.origin.settings.dnd.copy&&(d.event.metaKey||d.event.ctrlKey))?"copy_node":"move_node",d.data.origin&&d.data.origin!==C?d.data.origin.get_node(d.data.nodes[p]):d.data.nodes[p],e.jstree.root,"last",{dnd:!0,ref:C.get_node(e.jstree.root),pos:"i",origin:d.data.origin,is_multi:d.data.origin&&d.data.origin!==C,is_foreign:!d.data.origin}));p++);if(f)return r={ins:C,par:e.jstree.root,pos:"last"},n.hide(),d.helper.find(".jstree-icon").first().removeClass("jstree-er").addClass("jstree-ok"),void(d.event.originalEvent&&d.event.originalEvent.dataTransfer&&(d.event.originalEvent.dataTransfer.dropEffect=b?"copy":"move"))}e(".jstree-dnd-parent").removeClass("jstree-dnd-parent"),r=!1,d.helper.find(".jstree-icon").removeClass("jstree-ok").addClass("jstree-er"),d.event.originalEvent&&d.event.originalEvent.dataTransfer&&(d.event.originalEvent.dataTransfer.dropEffect="none"),n.hide()}}).on("dnd_scroll.vakata.jstree",function(e,t){t&&t.data&&t.data.jstree&&(n.hide(),r=!1,s=!1,t.helper.find(".jstree-icon").first().removeClass("jstree-ok").addClass("jstree-er"))}).on("dnd_stop.vakata.jstree",function(t,o){if(e(".jstree-dnd-parent").removeClass("jstree-dnd-parent"),a&&clearTimeout(a),o&&o.data&&o.data.jstree){n.hide().detach();var d,c,l=[];if(r){for(d=0,c=o.data.nodes.length;d<c;d++)l[d]=o.data.origin?o.data.origin.get_node(o.data.nodes[d]):o.data.nodes[d];r.ins[o.data.origin&&(o.data.origin.settings.dnd.always_copy||o.data.origin.settings.dnd.copy&&(o.event.metaKey||o.event.ctrlKey))?"copy_node":"move_node"](l,r.par,r.pos,!1,!1,!1,o.data.origin)}else d=e(o.event.target).closest(".jstree"),d.length&&i&&i.error&&"check"===i.error&&(d=d.jstree(!0))&&d.settings.core.error.call(this,i);s=!1,r=!1}}).on("keyup.jstree keydown.jstree",function(t,o){(o=e.vakata.dnd._get())&&o.data&&o.data.jstree&&("keyup"===t.type&&27===t.which?(a&&clearTimeout(a),r=!1,i=!1,s=!1,a=!1,n.hide().detach(),e.vakata.dnd._clean()):(o.helper.find(".jstree-copy").first()[o.data.origin&&(o.data.origin.settings.dnd.always_copy||o.data.origin.settings.dnd.copy&&(t.metaKey||t.ctrlKey))?"show":"hide"](),s&&(s.metaKey=t.metaKey,s.ctrlKey=t.ctrlKey,e.vakata.dnd._trigger("move",s))))})}),function(e){e.vakata.html={div:e("<div />"),escape:function(t){return e.vakata.html.div.text(t).html()},strip:function(t){return e.vakata.html.div.empty().append(e.parseHTML(t)).text()}};var r={element:!1,target:!1,is_down:!1,is_drag:!1,helper:!1,helper_w:0,data:!1,init_x:0,init_y:0,scroll_l:0,scroll_t:0,scroll_e:!1,scroll_i:!1,is_touch:!1};e.vakata.dnd={settings:{scroll_speed:10,scroll_proximity:20,helper_left:5,helper_top:10,threshold:5,threshold_touch:50},_trigger:function(r,i,s){s===t&&(s=e.vakata.dnd._get()),s.event=i,e(d).triggerHandler("dnd_"+r+".vakata",s)},_get:function(){return{data:r.data,element:r.element,helper:r.helper}},_clean:function(){r.helper&&r.helper.remove(),r.scroll_i&&(clearInterval(r.scroll_i),r.scroll_i=!1),r={element:!1,target:!1,is_down:!1,is_drag:!1,helper:!1,helper_w:0,data:!1,init_x:0,init_y:0,scroll_l:0,scroll_t:0,scroll_e:!1,scroll_i:!1,is_touch:!1},e(d).off("mousemove.vakata.jstree touchmove.vakata.jstree",e.vakata.dnd.drag),e(d).off("mouseup.vakata.jstree touchend.vakata.jstree",e.vakata.dnd.stop)},_scroll:function(t){if(!r.scroll_e||!r.scroll_l&&!r.scroll_t)return r.scroll_i&&(clearInterval(r.scroll_i),r.scroll_i=!1),!1;if(!r.scroll_i)return r.scroll_i=setInterval(e.vakata.dnd._scroll,100),!1;if(t===!0)return!1;var i=r.scroll_e.scrollTop(),s=r.scroll_e.scrollLeft();r.scroll_e.scrollTop(i+r.scroll_t*e.vakata.dnd.settings.scroll_speed),r.scroll_e.scrollLeft(s+r.scroll_l*e.vakata.dnd.settings.scroll_speed),i===r.scroll_e.scrollTop()&&s===r.scroll_e.scrollLeft()||e.vakata.dnd._trigger("scroll",r.scroll_e)},start:function(t,i,s){"touchstart"===t.type&&t.originalEvent&&t.originalEvent.changedTouches&&t.originalEvent.changedTouches[0]&&(t.pageX=t.originalEvent.changedTouches[0].pageX,t.pageY=t.originalEvent.changedTouches[0].pageY,t.target=d.elementFromPoint(t.originalEvent.changedTouches[0].pageX-window.pageXOffset,t.originalEvent.changedTouches[0].pageY-window.pageYOffset)),r.is_drag&&e.vakata.dnd.stop({});try{t.currentTarget.unselectable="on",t.currentTarget.onselectstart=function(){return!1},t.currentTarget.style&&(t.currentTarget.style.touchAction="none",t.currentTarget.style.msTouchAction="none",t.currentTarget.style.MozUserSelect="none")}catch(e){}return r.init_x=t.pageX,r.init_y=t.pageY,r.data=i,r.is_down=!0,r.element=t.currentTarget,r.target=t.target,r.is_touch="touchstart"===t.type,s!==!1&&(r.helper=e("<div id='vakata-dnd'></div>").html(s).css({display:"block",margin:"0",padding:"0",position:"absolute",top:"-2000px",lineHeight:"16px",zIndex:"10000"})),e(d).on("mousemove.vakata.jstree touchmove.vakata.jstree",e.vakata.dnd.drag),e(d).on("mouseup.vakata.jstree touchend.vakata.jstree",e.vakata.dnd.stop),!1},drag:function(t){if("touchmove"===t.type&&t.originalEvent&&t.originalEvent.changedTouches&&t.originalEvent.changedTouches[0]&&(t.pageX=t.originalEvent.changedTouches[0].pageX,t.pageY=t.originalEvent.changedTouches[0].pageY,t.target=d.elementFromPoint(t.originalEvent.changedTouches[0].pageX-window.pageXOffset,t.originalEvent.changedTouches[0].pageY-window.pageYOffset)),r.is_down){if(!r.is_drag){if(!(Math.abs(t.pageX-r.init_x)>(r.is_touch?e.vakata.dnd.settings.threshold_touch:e.vakata.dnd.settings.threshold)||Math.abs(t.pageY-r.init_y)>(r.is_touch?e.vakata.dnd.settings.threshold_touch:e.vakata.dnd.settings.threshold)))return;r.helper&&(r.helper.appendTo("body"),r.helper_w=r.helper.outerWidth()),r.is_drag=!0,e(r.target).one("click.vakata",!1),e.vakata.dnd._trigger("start",t)}var i=!1,s=!1,a=!1,n=!1,o=!1,c=!1,l=!1,h=!1,_=!1,u=!1;return r.scroll_t=0,r.scroll_l=0,r.scroll_e=!1,e(e(t.target).parentsUntil("body").addBack().get().reverse()).filter(function(){return/^auto|scroll$/.test(e(this).css("overflow"))&&(this.scrollHeight>this.offsetHeight||this.scrollWidth>this.offsetWidth)}).each(function(){var i=e(this),s=i.offset();if(this.scrollHeight>this.offsetHeight&&(s.top+i.height()-t.pageY<e.vakata.dnd.settings.scroll_proximity&&(r.scroll_t=1),t.pageY-s.top<e.vakata.dnd.settings.scroll_proximity&&(r.scroll_t=-1)),this.scrollWidth>this.offsetWidth&&(s.left+i.width()-t.pageX<e.vakata.dnd.settings.scroll_proximity&&(r.scroll_l=1),t.pageX-s.left<e.vakata.dnd.settings.scroll_proximity&&(r.scroll_l=-1)),r.scroll_t||r.scroll_l)return r.scroll_e=e(this),!1}),r.scroll_e||(i=e(d),s=e(window),a=i.height(),n=s.height(),o=i.width(),c=s.width(),l=i.scrollTop(),h=i.scrollLeft(),a>n&&t.pageY-l<e.vakata.dnd.settings.scroll_proximity&&(r.scroll_t=-1),a>n&&n-(t.pageY-l)<e.vakata.dnd.settings.scroll_proximity&&(r.scroll_t=1),o>c&&t.pageX-h<e.vakata.dnd.settings.scroll_proximity&&(r.scroll_l=-1),o>c&&c-(t.pageX-h)<e.vakata.dnd.settings.scroll_proximity&&(r.scroll_l=1),(r.scroll_t||r.scroll_l)&&(r.scroll_e=i)),r.scroll_e&&e.vakata.dnd._scroll(!0),r.helper&&(_=parseInt(t.pageY+e.vakata.dnd.settings.helper_top,10),u=parseInt(t.pageX+e.vakata.dnd.settings.helper_left,10),a&&_+25>a&&(_=a-50),o&&u+r.helper_w>o&&(u=o-(r.helper_w+2)),r.helper.css({left:u+"px",top:_+"px"})),e.vakata.dnd._trigger("move",t),!1}},stop:function(t){if("touchend"===t.type&&t.originalEvent&&t.originalEvent.changedTouches&&t.originalEvent.changedTouches[0]&&(t.pageX=t.originalEvent.changedTouches[0].pageX,t.pageY=t.originalEvent.changedTouches[0].pageY,t.target=d.elementFromPoint(t.originalEvent.changedTouches[0].pageX-window.pageXOffset,t.originalEvent.changedTouches[0].pageY-window.pageYOffset)),r.is_drag)t.target!==r.target&&e(r.target).off("click.vakata"),e.vakata.dnd._trigger("stop",t);else if("touchend"===t.type&&t.target===r.target){var i=setTimeout(function(){e(t.target).click()},100);e(t.target).one("click",function(){i&&clearTimeout(i)})}return e.vakata.dnd._clean(),!1}}}(e),e.jstree.defaults.massload=null,e.jstree.plugins.massload=function(t,r){this.init=function(e,t){this._data.massload={},r.init.call(this,e,t)},this._load_nodes=function(t,i,s,a){var n,o,d,c=this.settings.massload,l=(JSON.stringify(t),[]),h=this._model.data;if(!s){for(n=0,o=t.length;n<o;n++)h[t[n]]&&(h[t[n]].state.loaded||h[t[n]].state.failed)&&!a||(l.push(t[n]),(d=this.get_node(t[n],!0))&&d.length&&d.addClass("jstree-loading").attr("aria-busy",!0));if(this._data.massload={},l.length){if(e.isFunction(c))return c.call(this,l,e.proxy(function(e){var n,o;if(e)for(n in e)e.hasOwnProperty(n)&&(this._data.massload[n]=e[n]);for(n=0,o=t.length;n<o;n++)(d=this.get_node(t[n],!0))&&d.length&&d.removeClass("jstree-loading").attr("aria-busy",!1);r._load_nodes.call(this,t,i,s,a)},this));if("object"==typeof c&&c&&c.url)return c=e.extend(!0,{},c),e.isFunction(c.url)&&(c.url=c.url.call(this,l)),e.isFunction(c.data)&&(c.data=c.data.call(this,l)),e.ajax(c).done(e.proxy(function(e,n,o){var c,l;if(e)for(c in e)e.hasOwnProperty(c)&&(this._data.massload[c]=e[c]);for(c=0,l=t.length;c<l;c++)(d=this.get_node(t[c],!0))&&d.length&&d.removeClass("jstree-loading").attr("aria-busy",!1);r._load_nodes.call(this,t,i,s,a)},this)).fail(e.proxy(function(e){r._load_nodes.call(this,t,i,s,a)},this))}}return r._load_nodes.call(this,t,i,s,a)},this._load_node=function(t,i){var s,a=this._data.massload[t.id],n=null;return a?(n=this["string"==typeof a?"_append_html_data":"_append_json_data"](t,"string"==typeof a?e(e.parseHTML(a)).filter(function(){return 3!==this.nodeType}):a,function(e){i.call(this,e)}),s=this.get_node(t.id,!0),s&&s.length&&s.removeClass("jstree-loading").attr("aria-busy",!1),delete this._data.massload[t.id],n):r._load_node.call(this,t,i)}},e.jstree.defaults.search={ajax:!1,fuzzy:!1,case_sensitive:!1,show_only_matches:!1,show_only_matches_children:!1,close_opened_onclear:!0,search_leaves_only:!1,search_callback:!1},e.jstree.plugins.search=function(r,i){this.bind=function(){i.bind.call(this),this._data.search.str="",this._data.search.dom=e(),this._data.search.res=[],this._data.search.opn=[],this._data.search.som=!1,this._data.search.smc=!1,this._data.search.hdn=[],this.element.on("search.jstree",e.proxy(function(t,r){if(this._data.search.som&&r.res.length){var i,s,a,n,o=this._model.data,d=[];for(i=0,s=r.res.length;i<s;i++)if(o[r.res[i]]&&!o[r.res[i]].state.hidden&&(d.push(r.res[i]),d=d.concat(o[r.res[i]].parents),this._data.search.smc))for(a=0,n=o[r.res[i]].children_d.length;a<n;a++)o[o[r.res[i]].children_d[a]]&&!o[o[r.res[i]].children_d[a]].state.hidden&&d.push(o[r.res[i]].children_d[a]);d=e.vakata.array_remove_item(e.vakata.array_unique(d),e.jstree.root),this._data.search.hdn=this.hide_all(!0),this.show_node(d,!0),this.redraw(!0)}},this)).on("clear_search.jstree",e.proxy(function(e,t){this._data.search.som&&t.res.length&&(this.show_node(this._data.search.hdn,!0),this.redraw(!0))},this))},this.search=function(r,i,s,a,n,o){if(r===!1||""===e.trim(r.toString()))return this.clear_search();a=this.get_node(a),a=a&&a.id?a.id:null,r=r.toString();var d,c,l=this.settings.search,h=!!l.ajax&&l.ajax,_=this._model.data,u=null,g=[],f=[];if(this._data.search.res.length&&!n&&this.clear_search(),s===t&&(s=l.show_only_matches),o===t&&(o=l.show_only_matches_children),!i&&h!==!1)return e.isFunction(h)?h.call(this,r,e.proxy(function(t){t&&t.d&&(t=t.d),this._load_nodes(e.isArray(t)?e.vakata.array_unique(t):[],function(){this.search(r,!0,s,a,n,o)})},this),a):(h=e.extend({},h),h.data||(h.data={}),h.data.str=r,a&&(h.data.inside=a),this._data.search.lastRequest&&this._data.search.lastRequest.abort(),this._data.search.lastRequest=e.ajax(h).fail(e.proxy(function(){this._data.core.last_error={error:"ajax",plugin:"search",id:"search_01",reason:"Could not load search parents",data:JSON.stringify(h)},this.settings.core.error.call(this,this._data.core.last_error)},this)).done(e.proxy(function(t){t&&t.d&&(t=t.d),this._load_nodes(e.isArray(t)?e.vakata.array_unique(t):[],function(){this.search(r,!0,s,a,n,o)})},this)),this._data.search.lastRequest);if(n||(this._data.search.str=r,this._data.search.dom=e(),this._data.search.res=[],this._data.search.opn=[],this._data.search.som=s,this._data.search.smc=o),u=new e.vakata.search(r,!0,{caseSensitive:l.case_sensitive,fuzzy:l.fuzzy}),e.each(_[a||e.jstree.root].children_d,function(e,t){var i=_[t];i.text&&!i.state.hidden&&(!l.search_leaves_only||i.state.loaded&&0===i.children.length)&&(l.search_callback&&l.search_callback.call(this,r,i)||!l.search_callback&&u.search(i.text).isMatch)&&(g.push(t),f=f.concat(i.parents))}),g.length){for(f=e.vakata.array_unique(f),d=0,c=f.length;d<c;d++)f[d]!==e.jstree.root&&_[f[d]]&&this.open_node(f[d],null,0)===!0&&this._data.search.opn.push(f[d]);n?(this._data.search.dom=this._data.search.dom.add(e(this.element[0].querySelectorAll("#"+e.map(g,function(t){return"0123456789".indexOf(t[0])!==-1?"\\3"+t[0]+" "+t.substr(1).replace(e.jstree.idregex,"\\$&"):t.replace(e.jstree.idregex,"\\$&")}).join(", #")))),this._data.search.res=e.vakata.array_unique(this._data.search.res.concat(g))):(this._data.search.dom=e(this.element[0].querySelectorAll("#"+e.map(g,function(t){return"0123456789".indexOf(t[0])!==-1?"\\3"+t[0]+" "+t.substr(1).replace(e.jstree.idregex,"\\$&"):t.replace(e.jstree.idregex,"\\$&")}).join(", #"))),this._data.search.res=g),this._data.search.dom.children(".jstree-anchor").addClass("jstree-search")}this.trigger("search",{nodes:this._data.search.dom,str:r,res:this._data.search.res,show_only_matches:s})},this.clear_search=function(){this.settings.search.close_opened_onclear&&this.close_node(this._data.search.opn,0),this.trigger("clear_search",{nodes:this._data.search.dom,str:this._data.search.str,res:this._data.search.res}),this._data.search.res.length&&(this._data.search.dom=e(this.element[0].querySelectorAll("#"+e.map(this._data.search.res,function(t){return"0123456789".indexOf(t[0])!==-1?"\\3"+t[0]+" "+t.substr(1).replace(e.jstree.idregex,"\\$&"):t.replace(e.jstree.idregex,"\\$&")}).join(", #"))),this._data.search.dom.children(".jstree-anchor").removeClass("jstree-search")),this._data.search.str="",this._data.search.res=[],this._data.search.opn=[],this._data.search.dom=e()},this.redraw_node=function(t,r,s,a){if((t=i.redraw_node.apply(this,arguments))&&e.inArray(t.id,this._data.search.res)!==-1){var n,o,d=null;for(n=0,o=t.childNodes.length;n<o;n++)if(t.childNodes[n]&&t.childNodes[n].className&&t.childNodes[n].className.indexOf("jstree-anchor")!==-1){d=t.childNodes[n];break}d&&(d.className+=" jstree-search")}return t}},function(e){e.vakata.search=function(t,r,i){i=i||{},i=e.extend({},e.vakata.search.defaults,i),i.fuzzy!==!1&&(i.fuzzy=!0),t=i.caseSensitive?t:t.toLowerCase();var s,a,n,o,d=i.location,c=i.distance,l=i.threshold,h=t.length;return h>32&&(i.fuzzy=!1),i.fuzzy&&(s=1<<h-1,a=function(){var e={},r=0;for(r=0;r<h;r++)e[t.charAt(r)]=0;for(r=0;r<h;r++)e[t.charAt(r)]|=1<<h-r-1;return e}(),n=function(e,t){var r=e/h,i=Math.abs(d-t);return c?r+i/c:i?1:r}),o=function(e){if(e=i.caseSensitive?e:e.toLowerCase(),t===e||e.indexOf(t)!==-1)return{isMatch:!0,score:0};if(!i.fuzzy)return{isMatch:!1,score:1};var r,o,c,_,u,g,f,p,m,v=e.length,j=l,y=e.indexOf(t,d),k=h+v,x=1,b=[];for(y!==-1&&(j=Math.min(n(0,y),j),(y=e.lastIndexOf(t,d+h))!==-1&&(j=Math.min(n(0,y),j))),y=-1,r=0;r<h;r++){for(c=0,_=k;c<_;)n(r,d+_)<=j?c=_:k=_,_=Math.floor((k-c)/2+c);for(k=_,g=Math.max(1,d-_+1),f=Math.min(d+_,v)+h,p=new Array(f+2),p[f+1]=(1<<r)-1,o=f;o>=g;o--)if(m=a[e.charAt(o-1)],p[o]=0===r?(p[o+1]<<1|1)&m:(p[o+1]<<1|1)&m|(u[o+1]|u[o])<<1|1|u[o+1],p[o]&s&&(x=n(r,o-1))<=j){if(j=x,y=o-1,b.push(y),!(y>d))break;g=Math.max(1,2*d-y)}if(n(r+1,d)>j)break;u=p}return{isMatch:y>=0,score:x}},r===!0?{search:o}:o(r)},e.vakata.search.defaults={location:0,distance:100,threshold:.6,fuzzy:!1,caseSensitive:!1}}(e),e.jstree.defaults.sort=function(e,t){return this.get_text(e)>this.get_text(t)?1:-1},e.jstree.plugins.sort=function(t,r){this.bind=function(){r.bind.call(this),this.element.on("model.jstree",e.proxy(function(e,t){this.sort(t.parent,!0)},this)).on("rename_node.jstree create_node.jstree",e.proxy(function(e,t){this.sort(t.parent||t.node.parent,!1),this.redraw_node(t.parent||t.node.parent,!0)},this)).on("move_node.jstree copy_node.jstree",e.proxy(function(e,t){this.sort(t.parent,!1),this.redraw_node(t.parent,!0)},this))},this.sort=function(t,r){var i,s;if((t=this.get_node(t))&&t.children&&t.children.length&&(t.children.sort(e.proxy(this.settings.sort,this)),r))for(i=0,s=t.children_d.length;i<s;i++)this.sort(t.children_d[i],!1)}};var _=!1;e.jstree.defaults.state={key:"jstree",events:"changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree",ttl:!1,filter:!1},e.jstree.plugins.state=function(t,r){this.bind=function(){r.bind.call(this);var t=e.proxy(function(){this.element.on(this.settings.state.events,e.proxy(function(){_&&clearTimeout(_),_=setTimeout(e.proxy(function(){this.save_state()},this),100)},this)),this.trigger("state_ready")},this);this.element.on("ready.jstree",e.proxy(function(e,r){this.element.one("restore_state.jstree",t),this.restore_state()||t()},this))},this.save_state=function(){var t={state:this.get_state(),ttl:this.settings.state.ttl,sec:+new Date};e.vakata.storage.set(this.settings.state.key,JSON.stringify(t))},this.restore_state=function(){var t=e.vakata.storage.get(this.settings.state.key);if(t)try{t=JSON.parse(t)}catch(e){return!1}return!(t&&t.ttl&&t.sec&&+new Date-t.sec>t.ttl)&&(t&&t.state&&(t=t.state),t&&e.isFunction(this.settings.state.filter)&&(t=this.settings.state.filter.call(this,t)),!!t&&(this.element.one("set_state.jstree",function(r,i){i.instance.trigger("restore_state",{state:e.extend(!0,{},t)})}),this.set_state(t),!0))},this.clear_state=function(){return e.vakata.storage.del(this.settings.state.key)}},function(e,t){e.vakata.storage={set:function(e,t){return window.localStorage.setItem(e,t)},get:function(e){return window.localStorage.getItem(e)},del:function(e){return window.localStorage.removeItem(e)}}}(e),e.jstree.defaults.types={default:{}},e.jstree.defaults.types[e.jstree.root]={},e.jstree.plugins.types=function(r,i){this.init=function(r,s){var a,n;if(s&&s.types&&s.types.default)for(a in s.types)if("default"!==a&&a!==e.jstree.root&&s.types.hasOwnProperty(a))for(n in s.types.default)s.types.default.hasOwnProperty(n)&&s.types[a][n]===t&&(s.types[a][n]=s.types.default[n]);i.init.call(this,r,s),this._model.data[e.jstree.root].type=e.jstree.root},this.refresh=function(t,r){i.refresh.call(this,t,r),this._model.data[e.jstree.root].type=e.jstree.root},this.bind=function(){this.element.on("model.jstree",e.proxy(function(r,i){var s,a,n,o=this._model.data,d=i.nodes,c=this.settings.types,l="default";for(s=0,a=d.length;s<a;s++){if(l="default",o[d[s]].original&&o[d[s]].original.type&&c[o[d[s]].original.type]&&(l=o[d[s]].original.type),o[d[s]].data&&o[d[s]].data.jstree&&o[d[s]].data.jstree.type&&c[o[d[s]].data.jstree.type]&&(l=o[d[s]].data.jstree.type),o[d[s]].type=l,o[d[s]].icon===!0&&c[l].icon!==t&&(o[d[s]].icon=c[l].icon),c[l].li_attr!==t&&"object"==typeof c[l].li_attr)for(n in c[l].li_attr)if(c[l].li_attr.hasOwnProperty(n)){if("id"===n)continue;o[d[s]].li_attr[n]===t?o[d[s]].li_attr[n]=c[l].li_attr[n]:"class"===n&&(o[d[s]].li_attr.class=c[l].li_attr.class+" "+o[d[s]].li_attr.class)}if(c[l].a_attr!==t&&"object"==typeof c[l].a_attr)for(n in c[l].a_attr)if(c[l].a_attr.hasOwnProperty(n)){if("id"===n)continue;o[d[s]].a_attr[n]===t?o[d[s]].a_attr[n]=c[l].a_attr[n]:"href"===n&&"#"===o[d[s]].a_attr[n]?o[d[s]].a_attr.href=c[l].a_attr.href:"class"===n&&(o[d[s]].a_attr.class=c[l].a_attr.class+" "+o[d[s]].a_attr.class)}}o[e.jstree.root].type=e.jstree.root},this)),i.bind.call(this)},this.get_json=function(t,r,s){var a,n,o=this._model.data,d=r?e.extend(!0,{},r,{no_id:!1}):{},c=i.get_json.call(this,t,d,s);if(c===!1)return!1;if(e.isArray(c))for(a=0,n=c.length;a<n;a++)c[a].type=c[a].id&&o[c[a].id]&&o[c[a].id].type?o[c[a].id].type:"default",r&&r.no_id&&(delete c[a].id,c[a].li_attr&&c[a].li_attr.id&&delete c[a].li_attr.id,c[a].a_attr&&c[a].a_attr.id&&delete c[a].a_attr.id);else c.type=c.id&&o[c.id]&&o[c.id].type?o[c.id].type:"default",r&&r.no_id&&(c=this._delete_ids(c));return c},this._delete_ids=function(t){if(e.isArray(t)){for(var r=0,i=t.length;r<i;r++)t[r]=this._delete_ids(t[r]);return t}return delete t.id,t.li_attr&&t.li_attr.id&&delete t.li_attr.id,t.a_attr&&t.a_attr.id&&delete t.a_attr.id,t.children&&e.isArray(t.children)&&(t.children=this._delete_ids(t.children)),t},this.check=function(r,s,a,n,o){if(i.check.call(this,r,s,a,n,o)===!1)return!1;s=s&&s.id?s:this.get_node(s),a=a&&a.id?a:this.get_node(a);var d,c,l,h,_=s&&s.id?o&&o.origin?o.origin:e.jstree.reference(s.id):null;switch(_=_&&_._model&&_._model.data?_._model.data:null,r){case"create_node":case"move_node":case"copy_node":if("move_node"!==r||e.inArray(s.id,a.children)===-1){if(d=this.get_rules(a),d.max_children!==t&&d.max_children!==-1&&d.max_children===a.children.length)return this._data.core.last_error={error:"check",plugin:"types",id:"types_01",reason:"max_children prevents function: "+r,data:JSON.stringify({chk:r,pos:n,obj:!(!s||!s.id)&&s.id,par:!(!a||!a.id)&&a.id})},!1;if(d.valid_children!==t&&d.valid_children!==-1&&e.inArray(s.type||"default",d.valid_children)===-1)return this._data.core.last_error={error:"check",plugin:"types",id:"types_02",reason:"valid_children prevents function: "+r,data:JSON.stringify({chk:r,pos:n,obj:!(!s||!s.id)&&s.id,par:!(!a||!a.id)&&a.id})},!1;if(_&&s.children_d&&s.parents){for(c=0,l=0,h=s.children_d.length;l<h;l++)c=Math.max(c,_[s.children_d[l]].parents.length);c=c-s.parents.length+1}(c<=0||c===t)&&(c=1);do{if(d.max_depth!==t&&d.max_depth!==-1&&d.max_depth<c)return this._data.core.last_error={error:"check",plugin:"types",id:"types_03",reason:"max_depth prevents function: "+r,data:JSON.stringify({chk:r,pos:n,obj:!(!s||!s.id)&&s.id,par:!(!a||!a.id)&&a.id})},!1;a=this.get_node(a.parent),d=this.get_rules(a),c++}while(a)}}return!0},this.get_rules=function(e){if(!(e=this.get_node(e)))return!1;var r=this.get_type(e,!0);return r.max_depth===t&&(r.max_depth=-1),r.max_children===t&&(r.max_children=-1),r.valid_children===t&&(r.valid_children=-1),r},this.get_type=function(t,r){return!!(t=this.get_node(t))&&(r?e.extend({type:t.type},this.settings.types[t.type]):t.type)},this.set_type=function(r,i){var s,a,n,o,d,c,l,h,_=this._model.data;if(e.isArray(r)){for(r=r.slice(),a=0,n=r.length;a<n;a++)this.set_type(r[a],i);return!0}if(s=this.settings.types,r=this.get_node(r),!s[i]||!r)return!1;if(l=this.get_node(r,!0),l&&l.length&&(h=l.children(".jstree-anchor")),o=r.type,d=this.get_icon(r),r.type=i,(d===!0||!s[o]||s[o].icon!==t&&d===s[o].icon)&&this.set_icon(r,s[i].icon===t||s[i].icon),s[o]&&s[o].li_attr!==t&&"object"==typeof s[o].li_attr)for(c in s[o].li_attr)if(s[o].li_attr.hasOwnProperty(c)){if("id"===c)continue;"class"===c?(_[r.id].li_attr.class=(_[r.id].li_attr.class||"").replace(s[o].li_attr[c],""),l&&l.removeClass(s[o].li_attr[c])):_[r.id].li_attr[c]===s[o].li_attr[c]&&(_[r.id].li_attr[c]=null,l&&l.removeAttr(c))}if(s[o]&&s[o].a_attr!==t&&"object"==typeof s[o].a_attr)for(c in s[o].a_attr)if(s[o].a_attr.hasOwnProperty(c)){if("id"===c)continue;"class"===c?(_[r.id].a_attr.class=(_[r.id].a_attr.class||"").replace(s[o].a_attr[c],""),h&&h.removeClass(s[o].a_attr[c])):_[r.id].a_attr[c]===s[o].a_attr[c]&&("href"===c?(_[r.id].a_attr[c]="#",h&&h.attr("href","#")):(delete _[r.id].a_attr[c],h&&h.removeAttr(c)))}if(s[i].li_attr!==t&&"object"==typeof s[i].li_attr)for(c in s[i].li_attr)if(s[i].li_attr.hasOwnProperty(c)){if("id"===c)continue;_[r.id].li_attr[c]===t?(_[r.id].li_attr[c]=s[i].li_attr[c],l&&("class"===c?l.addClass(s[i].li_attr[c]):l.attr(c,s[i].li_attr[c]))):"class"===c&&(_[r.id].li_attr.class=s[i].li_attr[c]+" "+_[r.id].li_attr.class,l&&l.addClass(s[i].li_attr[c]))}if(s[i].a_attr!==t&&"object"==typeof s[i].a_attr)for(c in s[i].a_attr)if(s[i].a_attr.hasOwnProperty(c)){if("id"===c)continue;_[r.id].a_attr[c]===t?(_[r.id].a_attr[c]=s[i].a_attr[c],h&&("class"===c?h.addClass(s[i].a_attr[c]):h.attr(c,s[i].a_attr[c]))):"href"===c&&"#"===_[r.id].a_attr[c]?(_[r.id].a_attr.href=s[i].a_attr.href,h&&h.attr("href",s[i].a_attr.href)):"class"===c&&(_[r.id].a_attr.class=s[i].a_attr.class+" "+_[r.id].a_attr.class,h&&h.addClass(s[i].a_attr[c]))}return!0}},e.jstree.defaults.unique={case_sensitive:!1,duplicate:function(e,t){return e+" ("+t+")"}},e.jstree.plugins.unique=function(r,i){this.check=function(t,r,s,a,n){if(i.check.call(this,t,r,s,a,n)===!1)return!1;if(r=r&&r.id?r:this.get_node(r),
!(s=s&&s.id?s:this.get_node(s))||!s.children)return!0;var o,d,c="rename_node"===t?a:r.text,l=[],h=this.settings.unique.case_sensitive,_=this._model.data;for(o=0,d=s.children.length;o<d;o++)l.push(h?_[s.children[o]].text:_[s.children[o]].text.toLowerCase());switch(h||(c=c.toLowerCase()),t){case"delete_node":return!0;case"rename_node":return o=e.inArray(c,l)===-1||r.text&&r.text[h?"toString":"toLowerCase"]()===c,o||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_01",reason:"Child with name "+c+" already exists. Preventing: "+t,data:JSON.stringify({chk:t,pos:a,obj:!(!r||!r.id)&&r.id,par:!(!s||!s.id)&&s.id})}),o;case"create_node":return o=e.inArray(c,l)===-1,o||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_04",reason:"Child with name "+c+" already exists. Preventing: "+t,data:JSON.stringify({chk:t,pos:a,obj:!(!r||!r.id)&&r.id,par:!(!s||!s.id)&&s.id})}),o;case"copy_node":return o=e.inArray(c,l)===-1,o||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_02",reason:"Child with name "+c+" already exists. Preventing: "+t,data:JSON.stringify({chk:t,pos:a,obj:!(!r||!r.id)&&r.id,par:!(!s||!s.id)&&s.id})}),o;case"move_node":return o=r.parent===s.id&&(!n||!n.is_multi)||e.inArray(c,l)===-1,o||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_03",reason:"Child with name "+c+" already exists. Preventing: "+t,data:JSON.stringify({chk:t,pos:a,obj:!(!r||!r.id)&&r.id,par:!(!s||!s.id)&&s.id})}),o}return!0},this.create_node=function(r,s,a,n,o){if(!s||s.text===t){if(null===r&&(r=e.jstree.root),!(r=this.get_node(r)))return i.create_node.call(this,r,s,a,n,o);if(a=a===t?"last":a,!a.toString().match(/^(before|after)$/)&&!o&&!this.is_loaded(r))return i.create_node.call(this,r,s,a,n,o);s||(s={});var d,c,l,h,_,u=this._model.data,g=this.settings.unique.case_sensitive,f=this.settings.unique.duplicate;for(c=d=this.get_string("New node"),l=[],h=0,_=r.children.length;h<_;h++)l.push(g?u[r.children[h]].text:u[r.children[h]].text.toLowerCase());for(h=1;e.inArray(g?c:c.toLowerCase(),l)!==-1;)c=f.call(this,d,++h).toString();s.text=c}return i.create_node.call(this,r,s,a,n,o)}};var u=d.createElement("DIV");if(u.setAttribute("unselectable","on"),u.setAttribute("role","presentation"),u.className="jstree-wholerow",u.innerHTML="&#160;",e.jstree.plugins.wholerow=function(t,r){this.bind=function(){r.bind.call(this),this.element.on("ready.jstree set_state.jstree",e.proxy(function(){this.hide_dots()},this)).on("init.jstree loading.jstree ready.jstree",e.proxy(function(){this.get_container_ul().addClass("jstree-wholerow-ul")},this)).on("deselect_all.jstree",e.proxy(function(e,t){this.element.find(".jstree-wholerow-clicked").removeClass("jstree-wholerow-clicked")},this)).on("changed.jstree",e.proxy(function(e,t){this.element.find(".jstree-wholerow-clicked").removeClass("jstree-wholerow-clicked");var r,i,s=!1;for(r=0,i=t.selected.length;r<i;r++)(s=this.get_node(t.selected[r],!0))&&s.length&&s.children(".jstree-wholerow").addClass("jstree-wholerow-clicked")},this)).on("open_node.jstree",e.proxy(function(e,t){this.get_node(t.node,!0).find(".jstree-clicked").parent().children(".jstree-wholerow").addClass("jstree-wholerow-clicked")},this)).on("hover_node.jstree dehover_node.jstree",e.proxy(function(e,t){"hover_node"===e.type&&this.is_disabled(t.node)||this.get_node(t.node,!0).children(".jstree-wholerow")["hover_node"===e.type?"addClass":"removeClass"]("jstree-wholerow-hovered")},this)).on("contextmenu.jstree",".jstree-wholerow",e.proxy(function(t){if(this._data.contextmenu){t.preventDefault();var r=e.Event("contextmenu",{metaKey:t.metaKey,ctrlKey:t.ctrlKey,altKey:t.altKey,shiftKey:t.shiftKey,pageX:t.pageX,pageY:t.pageY});e(t.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(r)}},this)).on("click.jstree",".jstree-wholerow",function(t){t.stopImmediatePropagation();var r=e.Event("click",{metaKey:t.metaKey,ctrlKey:t.ctrlKey,altKey:t.altKey,shiftKey:t.shiftKey});e(t.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(r).focus()}).on("dblclick.jstree",".jstree-wholerow",function(t){t.stopImmediatePropagation();var r=e.Event("dblclick",{metaKey:t.metaKey,ctrlKey:t.ctrlKey,altKey:t.altKey,shiftKey:t.shiftKey});e(t.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(r).focus()}).on("click.jstree",".jstree-leaf > .jstree-ocl",e.proxy(function(t){t.stopImmediatePropagation();var r=e.Event("click",{metaKey:t.metaKey,ctrlKey:t.ctrlKey,altKey:t.altKey,shiftKey:t.shiftKey});e(t.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(r).focus()},this)).on("mouseover.jstree",".jstree-wholerow, .jstree-icon",e.proxy(function(e){return e.stopImmediatePropagation(),this.is_disabled(e.currentTarget)||this.hover_node(e.currentTarget),!1},this)).on("mouseleave.jstree",".jstree-node",e.proxy(function(e){this.dehover_node(e.currentTarget)},this))},this.teardown=function(){this.settings.wholerow&&this.element.find(".jstree-wholerow").remove(),r.teardown.call(this)},this.redraw_node=function(t,i,s,a){if(t=r.redraw_node.apply(this,arguments)){var n=u.cloneNode(!0);e.inArray(t.id,this._data.core.selected)!==-1&&(n.className+=" jstree-wholerow-clicked"),this._data.core.focused&&this._data.core.focused===t.id&&(n.className+=" jstree-wholerow-hovered"),t.insertBefore(n,t.childNodes[0])}return t}},d.registerElement&&Object&&Object.create){var g=Object.create(HTMLElement.prototype);g.createdCallback=function(){var t,r={core:{},plugins:[]};for(t in e.jstree.plugins)e.jstree.plugins.hasOwnProperty(t)&&this.attributes[t]&&(r.plugins.push(t),this.getAttribute(t)&&JSON.parse(this.getAttribute(t))&&(r[t]=JSON.parse(this.getAttribute(t))));for(t in e.jstree.defaults.core)e.jstree.defaults.core.hasOwnProperty(t)&&this.attributes[t]&&(r.core[t]=JSON.parse(this.getAttribute(t))||this.getAttribute(t));e(this).jstree(r)};try{d.registerElement("vakata-jstree",{prototype:g})}catch(e){}}}});

},{"jquery":9}],11:[function(require,module,exports){
(function (process){
function normalizeArray(r,t){for(var e=0,n=r.length-1;n>=0;n--){var s=r[n];"."===s?r.splice(n,1):".."===s?(r.splice(n,1),e++):e&&(r.splice(n,1),e--)}if(t)for(;e--;e)r.unshift("..");return r}function filter(r,t){if(r.filter)return r.filter(t);for(var e=[],n=0;n<r.length;n++)t(r[n],n,r)&&e.push(r[n]);return e}var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,splitPath=function(r){return splitPathRe.exec(r).slice(1)};exports.resolve=function(){for(var r="",t=!1,e=arguments.length-1;e>=-1&&!t;e--){var n=e>=0?arguments[e]:process.cwd();if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");n&&(r=n+"/"+r,t="/"===n.charAt(0))}return r=normalizeArray(filter(r.split("/"),function(r){return!!r}),!t).join("/"),(t?"/":"")+r||"."},exports.normalize=function(r){var t=exports.isAbsolute(r),e="/"===substr(r,-1);return r=normalizeArray(filter(r.split("/"),function(r){return!!r}),!t).join("/"),r||t||(r="."),r&&e&&(r+="/"),(t?"/":"")+r},exports.isAbsolute=function(r){return"/"===r.charAt(0)},exports.join=function(){var r=Array.prototype.slice.call(arguments,0);return exports.normalize(filter(r,function(r,t){if("string"!=typeof r)throw new TypeError("Arguments to path.join must be strings");return r}).join("/"))},exports.relative=function(r,t){function e(r){for(var t=0;t<r.length&&""===r[t];t++);for(var e=r.length-1;e>=0&&""===r[e];e--);return t>e?[]:r.slice(t,e-t+1)}r=exports.resolve(r).substr(1),t=exports.resolve(t).substr(1);for(var n=e(r.split("/")),s=e(t.split("/")),i=Math.min(n.length,s.length),o=i,u=0;u<i;u++)if(n[u]!==s[u]){o=u;break}for(var l=[],u=o;u<n.length;u++)l.push("..");return l=l.concat(s.slice(o)),l.join("/")},exports.sep="/",exports.delimiter=":",exports.dirname=function(r){var t=splitPath(r),e=t[0],n=t[1];return e||n?(n&&(n=n.substr(0,n.length-1)),e+n):"."},exports.basename=function(r,t){var e=splitPath(r)[2];return t&&e.substr(-1*t.length)===t&&(e=e.substr(0,e.length-t.length)),e},exports.extname=function(r){return splitPath(r)[3]};var substr="b"==="ab".substr(-1)?function(r,t,e){return r.substr(t,e)}:function(r,t,e){return t<0&&(t=r.length+t),r.substr(t,e)};

}).call(this,require('_process'))

},{"_process":12}],12:[function(require,module,exports){
function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}var process=module.exports={},cachedSetTimeout,cachedClearTimeout;!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var u=1;u<arguments.length;u++)t[u-1]=arguments[u];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],13:[function(require,module,exports){
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Ractive=e()}(this,function(){"use strict";function t(t){var e;if(t&&"boolean"!=typeof t)return"undefined"!=typeof window&&document&&t?t.nodeType?t:"string"==typeof t&&(e=document.getElementById(t),!e&&document.querySelector&&(e=document.querySelector(t)),e&&e.nodeType)?e:t[0]&&t[0].nodeType?t[0]:null:null}function e(t){return t&&"unknown"!=typeof t.parentNode&&t.parentNode&&t.parentNode.removeChild(t),t}function n(t){return null!=t&&t.toString?t:""}function i(t){for(var e=arguments.length,n=Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];for(var r,s;s=n.shift();)for(r in s)Aa.call(s,r)&&(t[r]=s[r]);return t}function r(t){for(var e=arguments.length,n=Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];return n.forEach(function(e){for(var n in e)!e.hasOwnProperty(n)||n in t||(t[n]=e[n])}),t}function s(t){return"[object Array]"===Sa.call(t)}function o(t){return Ca.test(Sa.call(t))}function a(t,e){return null===t&&null===e||"object"!=typeof t&&"object"!=typeof e&&t===e}function u(t){return!isNaN(parseFloat(t))&&isFinite(t)}function h(t){return t&&"[object Object]"===Sa.call(t)}function c(t,e){return t.replace(/%s/g,function(){return e.shift()})}function l(t){for(var e=arguments.length,n=Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];throw t=c(t,n),new Error(t)}function f(){Vb.DEBUG&&ka.apply(null,arguments)}function d(t){for(var e=arguments.length,n=Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];t=c(t,n),Ea(t,n)}function p(t){for(var e=arguments.length,n=Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];t=c(t,n),Pa[t]||(Pa[t]=!0,Ea(t,n))}function m(){Vb.DEBUG&&d.apply(null,arguments)}function v(){Vb.DEBUG&&p.apply(null,arguments)}function g(t,e,n){var i=y(t,e,n);return i?i[t][n]:null}function y(t,e,n){for(;e;){if(n in e[t])return e;if(e.isolated)return null;e=e.parent}}function b(t){return function(){return t}}function w(t){var e,n,i,r,s,o;for(e=t.split("."),(n=Va[e.length])||(n=x(e.length)),s=[],i=function(t,n){return t?"*":e[n]},r=n.length;r--;)o=n[r].map(i).join("."),s.hasOwnProperty(o)||(s.push(o),s[o]=!0);return s}function x(t){var e,n,i,r,s,o,a,u,h="";if(!Va[t]){for(i=[];h.length<t;)h+=1;for(e=parseInt(h,2),r=function(t){return"1"===t},s=0;s<=e;s+=1){for(n=s.toString(2);n.length<t;)n="0"+n;for(u=[],a=n.length,o=0;o<a;o++)u.push(r(n[o]));i[s]=u}Va[t]=i}return Va[t]}function k(t,e,n,i){var r=t[e];if(!r||!r.equalsOrStartsWith(i)&&r.equalsOrStartsWith(n))return t[e]=r?r.replace(n,i):i,!0}function E(t){var e=t.slice(2);return"i"===t[1]&&u(e)?+e:e}function _(t){return null==t?t:(Wa.hasOwnProperty(t)||(Wa[t]=new za(t)),Wa[t])}function A(t,e){function n(e,n){var i,r,o;return n.isRoot?o=[].concat(Object.keys(t.viewmodel.data),Object.keys(t.viewmodel.mappings),Object.keys(t.viewmodel.computations)):(i=t.viewmodel.wrapped[n.str],r=i?i.get():t.viewmodel.get(n),o=r?Object.keys(r):null),o&&o.forEach(function(t){"_ractive"===t&&s(r)||e.push(n.join(t))}),e}var i,r,o;for(i=e.str.split("."),o=[qa];r=i.shift();)"*"===r?o=o.reduce(n,[]):o[0]===qa?o[0]=_(r):o=o.map(S(r));return o}function S(t){return function(e){return e.join(t)}}function C(t){return t?t.replace(Ma,".$1"):""}function O(t,e,n){if("string"!=typeof e||!u(n))throw new Error("Bad arguments");var i=void 0,r=void 0;if(/\*/.test(e))return r={},A(t,_(C(e))).forEach(function(e){var i=t.viewmodel.get(e);if(!u(i))throw new Error(Qa);r[e.str]=i+n}),t.set(r);if(i=t.get(e),!u(i))throw new Error(Qa);return t.set(e,+i+n)}function P(t,e){return $a(this,t,void 0===e?1:+e)}function T(t){this.event=t,this.method="on"+t,this.deprecate=Ya[t]}function F(t,e){t.indexOf(e)===-1&&t.push(e)}function R(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]==e)return!0;return!1}function j(t,e){var n;if(!s(t)||!s(e))return!1;if(t.length!==e.length)return!1;for(n=t.length;n--;)if(t[n]!==e[n])return!1;return!0}function N(t){return"string"==typeof t?[t]:void 0===t?[]:t}function D(t){return t[t.length-1]}function I(t,e){var n=t.indexOf(e);n!==-1&&t.splice(n,1)}function L(t){for(var e=[],n=t.length;n--;)e[n]=t[n];return e}function V(t){setTimeout(t,0)}function M(t,e){return function(){for(var n;n=t.shift();)n(e)}}function U(t,e,n,i){var r;if(e===t)throw new TypeError("A promise's fulfillment handler cannot return the same promise");if(e instanceof Ja)e.then(n,i);else if(!e||"object"!=typeof e&&"function"!=typeof e)n(e);else{try{r=e.then}catch(t){return void i(t)}if("function"==typeof r){var s,o,a;o=function(e){s||(s=!0,U(t,e,n,i))},a=function(t){s||(s=!0,i(t))};try{r.call(e,o,a)}catch(t){if(!s)return i(t),void(s=!0)}}else n(e)}}function W(t,e,n){var i;return e=C(e),"~/"===e.substr(0,2)?(i=_(e.substring(2)),q(t,i.firstKey)):"."===e[0]?(i=z(ru(n),e))&&q(t,i.firstKey):i=B(t,_(e),n),i}function z(t,e){var n;if(void 0!=t&&"string"!=typeof t&&(t=t.str),"."===e)return _(t);if(n=t?t.split("."):[],"../"===e.substr(0,3)){for(;"../"===e.substr(0,3);){if(!n.length)throw new Error('Could not resolve reference - too many "../" prefixes');n.pop(),e=e.substring(3)}return n.push(e),_(n.join("."))}return _(t?t+e.replace(/^\.\//,"."):e.replace(/^\.\/?/,""))}function B(t,e,n,i){var r,s,o,a,u;if(e.isRoot)return e;for(s=e.firstKey;n;)if(r=n.context,n=n.parent,r&&(a=!0,(o=t.viewmodel.get(r))&&("object"==typeof o||"function"==typeof o)&&s in o))return r.join(e.str);return $(t.viewmodel,s)?e:t.parent&&!t.isolated&&(a=!0,n=t.component.parentFragment,s=_(s),u=B(t.parent,s,n,!0))?(t.viewmodel.map(s,{origin:t.parent.viewmodel,keypath:u}),e):i||a?void 0:(t.viewmodel.set(e,void 0),e)}function q(t,e){var n;!t.parent||t.isolated||$(t.viewmodel,e)||(e=_(e),(n=B(t.parent,e,t.component.parentFragment,!0))&&t.viewmodel.map(e,{origin:t.parent.viewmodel,keypath:n}))}function $(t,e){return""===e||e in t.data||e in t.computations||e in t.mappings}function Q(t){t.teardown()}function Z(t){t.unbind()}function H(t){t.unrender()}function K(t){t.cancel()}function G(t){t.detach()}function Y(t){t.detachNodes()}function J(t){!t.ready||t.outros.length||t.outroChildren||(t.outrosComplete||(t.parent?t.parent.decrementOutros(t):t.detachNodes(),t.outrosComplete=!0),t.intros.length||t.totalChildren||("function"==typeof t.callback&&t.callback(),t.parent&&t.parent.decrementTotal()))}function X(){for(var t,e,n;au.ractives.length;)e=au.ractives.pop(),(n=e.viewmodel.applyChanges())&&lu.fire(e,n);for(tt(),t=0;t<au.views.length;t+=1)au.views[t].update();for(au.views.length=0,t=0;t<au.tasks.length;t+=1)au.tasks[t]();if(au.tasks.length=0,au.ractives.length)return X()}function tt(){var t,e,n,i;for(t=cu.length;t--;)e=cu[t],e.keypath?cu.splice(t,1):(n=su(e.root,e.ref,e.parentFragment))&&((i||(i=[])).push({item:e,keypath:n}),cu.splice(t,1));i&&i.forEach(et)}function et(t){t.item.resolve(t.keypath)}function nt(t,e,n){var i,r,s,o,a,u,h,c,l,f,d,p,m,v;if(i=new iu(function(t){return r=t}),"object"==typeof t){n=e||{},u=n.easing,h=n.duration,a=[],c=n.step,l=n.complete,(c||l)&&(d={},n.step=null,n.complete=null,f=function(t){return function(e,n){d[t]=n}});for(s in t)t.hasOwnProperty(s)&&((c||l)&&(p=f(s),n={easing:u,duration:h},c&&(n.step=p)),n.complete=l?p:Oa,a.push(it(this,s,t[s],n)));return v={easing:u,duration:h},c&&(v.step=function(t){return c(t,d)}),l&&i.then(function(t){return l(t,d)}),v.complete=r,m=it(this,null,null,v),a.push(m),i.stop=function(){for(var t;t=a.pop();)t.stop();m&&m.stop()},i}return n=n||{},n.complete&&i.then(n.complete),n.complete=r,o=it(this,t,e,n),i.stop=function(){return o.stop()},i}function it(t,e,n,i){var r,s,o,u;return e&&(e=_(C(e))),null!==e&&(u=t.viewmodel.get(e)),mu.abort(e,t),a(u,n)?(i.complete&&i.complete(i.to),bu):(i.easing&&"function"!=typeof(r="function"==typeof i.easing?i.easing:t.easing[i.easing])&&(r=null),s=void 0===i.duration?400:i.duration,o=new gu({keypath:e,from:u,to:n,root:t,duration:s,easing:r,interpolator:i.interpolator,step:i.step,complete:i.complete}),mu.add(o),t._animations.push(o),o)}function rt(){return this.detached?this.detached:(this.el&&I(this.el.__ractive_instances__,this),this.detached=this.fragment.detach(),xu.fire(this),this.detached)}function st(t){return this.el?this.fragment.find(t):null}function ot(t,e){if(this._isComponentQuery?!this.selector||t.name===this.selector:t.node?la(t.node,this.selector):null)return this.push(t.node||t.instance),e||this._makeDirty(),!0}function at(t){var e;return(e=t.parentFragment)?e.owner:t.component&&(e=t.component.parentFragment)?e.owner:void 0}function ut(t){var e,n;for(e=[t],n=at(t);n;)e.push(n),n=at(n);return e}function ht(t,e,n,i){var r=[];return xa(r,{selector:{value:e},live:{value:n},_isComponentQuery:{value:i},_test:{value:Eu}}),n?(xa(r,{cancel:{value:_u},_root:{value:t},_sort:{value:Cu},_makeDirty:{value:Ou},_remove:{value:Pu},_dirty:{value:!1,writable:!0}}),r):r}function ct(t,e){var n,i;return this.el?(e=e||{},n=this._liveQueries,(i=n[t])?e&&e.live?i:i.slice():(i=Tu(this,t,!!e.live,!1),i.live&&(n.push(t),n["_"+t]=i),this.fragment.findAll(t,i),i)):[]}function lt(t,e){var n,i;return e=e||{},n=this._liveComponentQueries,(i=n[t])?e&&e.live?i:i.slice():(i=Tu(this,t,!!e.live,!0),i.live&&(n.push(t),n["_"+t]=i),this.fragment.findAllComponents(t,i),i)}function ft(t){return this.fragment.findComponent(t)}function dt(t){return this.container?this.container.component&&this.container.component.name===t?this.container:this.container.findContainer(t):null}function pt(t){return this.parent?this.parent.component&&this.parent.component.name===t?this.parent:this.parent.findParent(t):null}function mt(t,e){var n=void 0===arguments[2]?{}:arguments[2];if(e){n.event?n.event.name=e:n.event={name:e,_noArg:!0};vt(t,_(e).wildcardMatches(),n.event,n.args,!0)}}function vt(t,e,n,i){var r,s,o=void 0!==arguments[4]&&arguments[4],a=!0;for(Lu.enqueue(t,n),s=e.length;s>=0;s--)(r=t._subs[e[s]])&&(a=gt(t,r,n,i)&&a);if(Lu.dequeue(t),t.parent&&a){if(o&&t.component){e=_(t.component.name+"."+e[e.length-1]).wildcardMatches(),n&&(n.component=t)}vt(t.parent,e,n,i)}}function gt(t,e,n,i){var r=null,s=!1;n&&!n._noArg&&(i=[n].concat(i)),e=e.slice();for(var o=0,a=e.length;o<a;o+=1)e[o].apply(t,i)===!1&&(s=!0);return n&&!n._noArg&&s&&(r=n.original)&&(r.preventDefault&&r.preventDefault(),r.stopPropagation&&r.stopPropagation()),!s}function yt(t){var e={args:Array.prototype.slice.call(arguments,1)};Vu(this,t,e)}function bt(t){var e;return t=_(C(t)),e=this.viewmodel.get(t,Wu),void 0===e&&this.parent&&!this.isolated&&su(this,t.str,this.component.parentFragment)&&(e=this.viewmodel.get(t)),e}function wt(e,n){if(!this.fragment.rendered)throw new Error("The API has changed - you must call `ractive.render(target[, anchor])` to render your Ractive instance. Once rendered you can use `ractive.insert()`.");if(e=t(e),n=t(n)||null,!e)throw new Error("You must specify a valid target to insert into");e.insertBefore(this.detach(),n),this.el=e,(e.__ractive_instances__||(e.__ractive_instances__=[])).push(this),this.detached=null,xt(this)}function xt(t){Bu.fire(t),t.findAllComponents("*").forEach(function(t){xt(t.instance)})}function kt(t,e,n){var i,r;return t=_(C(t)),i=this.viewmodel.get(t),s(i)&&s(e)?(r=fu.start(this,!0),this.viewmodel.merge(t,i,e,n),fu.end(),r):this.set(t,e,n&&n.complete)}function Et(t,e){var n,i;return n=A(t,e),i={},n.forEach(function(e){i[e.str]=t.get(e.str)}),i}function _t(t,e,n,i){var r,s,o;e=_(C(e)),i=i||rh,e.isPattern?(r=new nh(t,e,n,i),t.viewmodel.patternObservers.push(r),s=!0):r=new Zu(t,e,n,i),r.init(i.init),t.viewmodel.register(e,r,s?"patternObservers":"observers"),r.ready=!0;var a={cancel:function(){var n;o||(s?(n=t.viewmodel.patternObservers.indexOf(r),t.viewmodel.patternObservers.splice(n,1),t.viewmodel.unregister(e,r,"patternObservers")):t.viewmodel.unregister(e,r,"observers"),o=!0)}};return t._observers.push(a),a}function At(t,e,n){var i,r,s,o;if(h(t)){n=e,r=t,i=[];for(t in r)r.hasOwnProperty(t)&&(e=r[t],i.push(this.observe(t,e,n)));return{cancel:function(){for(;i.length;)i.pop().cancel()}}}if("function"==typeof t)return n=e,e=t,t="",ih(this,t,e,n);if(s=t.split(" "),1===s.length)return ih(this,t,e,n);for(i=[],o=s.length;o--;)(t=s[o])&&i.push(ih(this,t,e,n));return{cancel:function(){for(;i.length;)i.pop().cancel()}}}function St(t,e,n){var i=this.observe(t,function(){e.apply(this,arguments),i.cancel()},{init:!1,defer:n&&n.defer});return i}function Ct(t,e){var n,i=this;if(t)n=t.split(" ").map(ah).filter(uh),n.forEach(function(t){var n,r;(n=i._subs[t])&&(e?(r=n.indexOf(e))!==-1&&n.splice(r,1):i._subs[t]=[])});else for(t in this._subs)delete this._subs[t];return this}function Ot(t,e){var n,i,r,s=this;if("object"==typeof t){n=[];for(i in t)t.hasOwnProperty(i)&&n.push(this.on(i,t[i]));return{cancel:function(){for(var t;t=n.pop();)t.cancel()}}}return r=t.split(" ").map(ah).filter(uh),r.forEach(function(t){(s._subs[t]||(s._subs[t]=[])).push(e)}),{cancel:function(){return s.off(t,e)}}}function Pt(t,e){var n=this.on(t,function(){e.apply(this,arguments),n.cancel()});return n}function Tt(t,e,n){var i,r,s,o,a,u,h=[];if(!(i=Ft(t,e,n)))return null;for(r=t.length,a=i.length-2-i[1],s=Math.min(r,i[0]),o=s+i[1],u=0;u<s;u+=1)h.push(u);for(;u<o;u+=1)h.push(-1);for(;u<r;u+=1)h.push(u+a);return h.touchedFrom=0!==a?i[0]:t.length,h}function Ft(t,e,n){switch(e){case"splice":for(void 0!==n[0]&&n[0]<0&&(n[0]=t.length+Math.max(n[0],-t.length));n.length<2;)n.push(0);return n[1]=Math.min(n[1],t.length-n[0]),n;case"sort":case"reverse":return null;case"pop":return t.length?[t.length-1,1]:[0,0];case"push":return[t.length,0].concat(n);case"shift":return[0,t.length?1:0];case"unshift":return[0,0].concat(n)}}function Rt(e,n){var i,r,s,o=this;if(s=this.transitionsEnabled,this.noIntro&&(this.transitionsEnabled=!1),i=fu.start(this,!0),fu.scheduleTask(function(){return Eh.fire(o)},!0),this.fragment.rendered)throw new Error("You cannot call ractive.render() on an already rendered instance! Call ractive.unrender() first");if(e=t(e)||this.el,n=t(n)||this.anchor,this.el=e,this.anchor=n,!this.append&&e){var a=e.__ractive_instances__;a&&a.length&&jt(a),e.innerHTML=""}return this.cssId&&xh.apply(),e&&((r=e.__ractive_instances__)?r.push(this):e.__ractive_instances__=[this],n?e.insertBefore(this.fragment.render(),n):e.appendChild(this.fragment.render())),fu.end(),this.transitionsEnabled=s,i.then(function(){return _h.fire(o)})}function jt(t){t.splice(0,t.length).forEach(Q)}function Nt(t,e){for(var n=t.slice(),i=e.length;i--;)~n.indexOf(e[i])||n.push(e[i]);return n}function Dt(t,e){var n,i;return n='[data-ractive-css~="{'+e+'}"]',i=function(t){var e,i,r,s,o,a,u,h=[];for(e=[];i=Th.exec(t);)e.push({str:i[0],base:i[1],modifiers:i[2]});for(s=e.map(Lt),u=e.length;u--;)a=s.slice(),r=e[u],a[u]=r.base+n+r.modifiers||"",o=s.slice(),o[u]=n+" "+o[u],h.push(a.join(" "),o.join(" "));return h.join(", ")},Rh.test(t)?t.replace(Rh,n):t.replace(Ph,"").replace(Oh,function(t,e){var n,r;return Fh.test(e)?t:(n=e.split(",").map(It),r=n.map(i).join(", ")+" ",t.replace(e,r))})}function It(t){return t.trim?t.trim():t.replace(/^\s+/,"").replace(/\s+$/,"")}function Lt(t){return t.str}function Vt(t){t&&t.constructor!==Object&&("function"==typeof t||("object"!=typeof t?l("data option must be an object or a function, `"+t+"` is not valid"):m("If supplied, options.data should be a plain JavaScript object - using a non-POJO as the root object may work, but is discouraged")))}function Mt(t,e){Vt(e);var n="function"==typeof t,i="function"==typeof e;return e||n||(e={}),n||i?function(){return Wt(i?Ut(e,this):e,n?Ut(t,this):t)}:Wt(e,t)}function Ut(t,e){var n=t.call(e);if(n)return"object"!=typeof n&&l("Data function must return an object"),n.constructor!==Object&&v("Data function returned something other than a plain JavaScript object. This might work, but is strongly discouraged"),n}function Wt(t,e){if(t&&e){for(var n in e)n in t||(t[n]=e[n]);return t}return t||e}function zt(t){var e,n,i;return t.matchString("=")?(e=t.pos,t.allowWhitespace(),(n=t.matchPattern(Cc))?t.matchPattern(Oc)?(i=t.matchPattern(Cc))?(t.allowWhitespace(),t.matchString("=")?[n,i]:(t.pos=e,null)):(t.pos=e,null):null:(t.pos=e,null)):null}function Bt(t){var e;return(e=t.matchPattern(Tc))?{t:uc,v:e}:null}function qt(t){var e,n;if(t.interpolate[t.inside]===!1)return null;for(n=0;n<t.tags.length;n+=1)if(e=$t(t,t.tags[n]))return e}function $t(t,e){var n,i,r,s;if(n=t.pos,t.matchString("\\"+e.open)){if(0===n||"\\"!==t.str[n-1])return e.open}else if(!t.matchString(e.open))return null;if(i=Sc(t))return t.matchString(e.close)?(e.open=i[0],e.close=i[1],t.sortMustacheTags(),Rc):null;if(t.allowWhitespace(),t.matchString("/")){t.pos-=1;var o=t.pos;Pc(t)?t.pos=o:(t.pos=o-e.close.length,t.error("Attempted to close a section that wasn't open"))}for(s=0;s<e.readers.length;s+=1)if(r=e.readers[s],i=r(t,e))return e.isStatic&&(i.s=!0),t.includeLinePositions&&(i.p=t.getLinePos(n)),i;return t.pos=n,null}function Qt(t){var e;return(e=t.matchPattern(Ic))?{t:ic,v:e}:null}function Zt(t){var e=t.remaining();return"true"===e.substr(0,4)?(t.pos+=4,{t:ac,v:"true"}):"false"===e.substr(0,5)?(t.pos+=5,{t:ac,v:"false"}):null}function Ht(t){var e;return(e=Bc(t))?Qc.test(e.v)?e.v:'"'+e.v.replace(/"/g,'\\"')+'"':(e=Dc(t))?e.v:(e=t.matchPattern(qc))?e:void 0}function Kt(t){var e,n,i;return e=t.pos,t.allowWhitespace(),null===(n=$c(t))?(t.pos=e,null):(t.allowWhitespace(),t.matchString(":")?(t.allowWhitespace(),i=kl(t),null===i?(t.pos=e,null):{t:cc,k:n,v:i}):(t.pos=e,null))}function Gt(t){var e,n,i,r;return e=t.pos,null===(i=Zc(t))?null:(n=[i],t.matchString(",")?(r=Gt(t),r?n.concat(r):(t.pos=e,null)):n)}function Yt(t){function e(t){n.push(t)}var n,i,r;return t.pos,t.allowWhitespace(),null===(i=kl(t))?null:(n=[i],t.allowWhitespace(),t.matchString(",")&&(r=Yt(t),null===r&&t.error(jc),r.forEach(e)),n)}function Jt(t){return Dc(t)||Lc(t)||Bc(t)||Kc(t)||Yc(t)||Pc(t)}function Xt(t){var e,n,i,r,s,o;return e=t.pos,i=t.matchPattern(/^@(?:keypath|index|key)/),i||(n=t.matchPattern(tl)||"",(i=!n&&t.relaxedNames&&t.matchPattern(rl)||t.matchPattern(il))||"."!==n||(n="",i=".")),i?n||t.relaxedNames||!Mc.test(i)?!n&&Vc.test(i)?(r=Vc.exec(i)[0],t.pos=e+r.length,{t:hc,v:r}):(s=(n||"")+C(i),t.matchString("(")&&(o=s.lastIndexOf("."),o!==-1?(s=s.substr(0,o),t.pos=e+s.length):t.pos-=1),{t:lc,n:s.replace(/^this\./,"./").replace(/^this$/,".")}):(t.pos=e,null):null}function te(t){var e;return t.pos,t.matchString("(")?(t.allowWhitespace(),e=kl(t),e||t.error(jc),t.allowWhitespace(),t.matchString(")")||t.error(Nc),{t:mc,x:e}):null}function ee(t){var e,n;if(t.pos,t.allowWhitespace(),t.matchString(".")){if(t.allowWhitespace(),e=t.matchPattern(qc))return{t:fc,n:e};t.error("Expected a property name")}return t.matchString("[")?(t.allowWhitespace(),n=kl(t),n||t.error(jc),t.allowWhitespace(),t.matchString("]")||t.error("Expected ']'"),{t:fc,x:n}):null}function ne(t){var e,n,i,r;return(n=wl(t))?(e=t.pos,t.allowWhitespace(),t.matchString("?")?(t.allowWhitespace(),i=kl(t),i||t.error(jc),t.allowWhitespace(),t.matchString(":")||t.error('Expected ":"'),t.allowWhitespace(),r=kl(t),r||t.error(jc),{t:vc,o:[n,i,r]}):(t.pos=e,n)):null}function ie(t){return xl(t)}function re(t){function e(t){switch(t.t){case ac:case hc:case ic:case uc:return t.v;case rc:return JSON.stringify(String(t.v));case sc:return"["+(t.m?t.m.map(e).join(","):"")+"]";case oc:return"{"+(t.m?t.m.map(e).join(","):"")+"}";case cc:return t.k+":"+e(t.v);case pc:return("typeof"===t.s?"typeof ":t.s)+e(t.o);case gc:return e(t.o[0])+("in"===t.s.substr(0,2)?" "+t.s+" ":t.s)+e(t.o[1]);case yc:return e(t.x)+"("+(t.o?t.o.map(e).join(","):"")+")";case mc:return"("+e(t.x)+")";case dc:return e(t.x)+e(t.r);case fc:return t.n?"."+t.n:"["+e(t.x)+"]";case vc:return e(t.o[0])+"?"+e(t.o[1])+":"+e(t.o[2]);case lc:return"_"+n.indexOf(t.n);default:throw new Error("Expected legal JavaScript")}}var n;return se(t,n=[]),{r:n,s:e(t)}}function se(t,e){var n,i;if(t.t===lc&&e.indexOf(t.n)===-1&&e.unshift(t.n),i=t.o||t.m)if(h(i))se(i,e);else for(n=i.length;n--;)se(i[n],e);t.x&&se(t.x,e),t.r&&se(t.r,e),t.v&&se(t.v,e)}function oe(t,e){var n;if(t){for(;t.t===mc&&t.x;)t=t.x;return t.t===lc?e.r=t.n:t.t===ic&&Al.test(t.v)?e.r=t.v:(n=ae(t))?e.rx=n:e.x=El(t),e}}function ae(t){for(var e,n=[];t.t===dc&&t.r.t===fc;)e=t.r,e.x?e.x.t===lc?n.unshift(e.x):n.unshift(El(e.x)):n.unshift(e.n),t=t.x;return t.t!==lc?null:{r:t.n,m:n}}function ue(t,e){var n,i=kl(t);return i?(t.matchString(e.close)||t.error("Expected closing delimiter '"+e.close+"'"),n={t:Bh},_l(i,n),n):null}function he(t,e){var n,i;return t.matchString("&")?(t.allowWhitespace(),(n=kl(t))?(t.matchString(e.close)||t.error("Expected closing delimiter '"+e.close+"'"),i={t:Bh},_l(n,i),i):null):null}function ce(t,e){var n,i,r;return t.pos,t.matchString(">")?(t.allowWhitespace(),t.pos,t.relaxedNames=!0,n=kl(t),t.relaxedNames=!1,t.allowWhitespace(),i=kl(t),t.allowWhitespace(),n?(r={t:Hh},_l(n,r),t.allowWhitespace(),i&&(r={t:qh,n:kc,f:[r]},_l(i,r)),t.matchString(e.close)||t.error("Expected closing delimiter '"+e.close+"'"),r):null):null}function le(t,e){var n;return t.matchString("!")?(n=t.remaining().indexOf(e.close),n!==-1?(t.pos+=n+e.close.length,{t:Kh}):void 0):null}function fe(t,e){var n,i,r;if(n=t.pos,!(i=kl(t)))return null;for(r=0;r<e.length;r+=1)if(t.remaining().substr(0,e[r].length)===e[r])return i;return t.pos=n,Xc(t)}function de(t,e){var n,i,r,s;n=t.pos;try{i=Tl(t,[e.close])}catch(t){s=t}if(!i){if("!"===t.str.charAt(n))return t.pos=n,null;if(s)throw s}if(!t.matchString(e.close)&&(t.error("Expected closing delimiter '"+e.close+"' after reference"),!i)){if("!"===t.nextChar())return null;t.error("Expected expression or legal reference")}return r={t:zh},_l(i,r),r}function pe(t,e){var n,i;return t.matchPattern(jl)?(t.pos,n=t.matchPattern(/^[a-zA-Z_$][a-zA-Z_$0-9\-]*/),t.allowWhitespace(),t.matchString(e.close)||t.error("expected legal partial name"),i={t:tc},n&&(i.n=n),i):null}function me(t,e){var n,i,r,s;return n=t.pos,t.matchString(e.open)?(t.allowWhitespace(),t.matchString("/")?(t.allowWhitespace(),i=t.remaining(),(r=i.indexOf(e.close))!==-1?(s={t:Qh,r:i.substr(0,r).split(" ")[0]},t.pos+=r,t.matchString(e.close)||t.error("Expected closing delimiter '"+e.close+"'"),s):(t.pos=n,null)):(t.pos=n,null)):null}function ve(t,e){var n=t.pos;return t.matchString(e.open)?t.matchPattern(Il)?(t.matchString(e.close)||t.error("Expected closing delimiter '"+e.close+"'"),{t:_c}):(t.pos=n,null):null}function ge(t,e){var n,i=t.pos;return t.matchString(e.open)?t.matchPattern(Vl)?(n=kl(t),t.matchString(e.close)||t.error("Expected closing delimiter '"+e.close+"'"),{t:Ac,x:n}):(t.pos=i,null):null}function ye(t,e){var n,i,r,s,o,a,u,h,c,l,f,d;if(n=t.pos,t.matchString("^"))r={t:qh,f:[],n:wc};else{if(!t.matchString("#"))return null;r={t:qh,f:[]},t.matchString("partial")&&(t.pos=n-t.standardDelimiters[0].length,t.error("Partial definitions can only be at the top level of the template, or immediately inside components")),(u=t.matchPattern(Bl))&&(d=u,r.n=Ml[u])}if(t.allowWhitespace(),i=kl(t),i||t.error("Expected expression"),f=t.matchPattern(Wl)){var p=void 0;(p=t.matchPattern(zl))?r.i=f+","+p:r.i=f}t.allowWhitespace(),t.matchString(e.close)||t.error("Expected closing delimiter '"+e.close+"'"),t.sectionDepth+=1,o=r.f,c=[];do{if(s=Nl(t,e))d&&s.r!==d&&t.error("Expected "+e.open+"/"+d+e.close),t.sectionDepth-=1,l=!0;else if(s=Ll(t,e))r.n===wc&&t.error("{{else}} not allowed in {{#unless}}"),a&&t.error("illegal {{elseif...}} after {{else}}"),h||(h=be(i,r.n)),h.f.push({t:qh,n:bc,x:El(xe(c.concat(s.x))),f:o=[]}),c.push(we(s.x));else if(s=Dl(t,e))r.n===wc&&t.error("{{else}} not allowed in {{#unless}}"),a&&t.error("there can only be one {{else}} block, at the end of a section"),a=!0,h?h.f.push({t:qh,n:bc,x:El(xe(c)),f:o=[]}):(h=be(i,r.n),o=h.f);else{if(!(s=t.read(Hf)))break;o.push(s)}}while(!l);return h&&(r.n===kc&&(r.n=Ec),r.l=h),_l(i,r),r.f.length||delete r.f,r}function be(t,e){var n;return e===kc?(n={t:qh,n:bc,f:[]},_l(we(t),n)):(n={t:qh,n:wc,f:[]},_l(t,n)),n}function we(t){return t.t===pc&&"!"===t.s?t.o:{t:pc,s:"!",o:ke(t)}}function xe(t){return 1===t.length?t[0]:{t:gc,s:"&&",o:[ke(t[0]),ke(xe(t.slice(1)))]}}function ke(t){return{t:mc,x:t}}function Ee(t){var e,n,i,r,s;return e=t.pos,t.matchString($l)?(i=t.remaining(),r=i.indexOf(Ql),r===-1&&t.error("Illegal HTML - expected closing comment sequence ('-->')"),n=i.substr(0,r),t.pos+=r+3,s={t:Kh,c:n},t.includeLinePositions&&(s.p=t.getLinePos(e)),s):null}function _e(t){return t.replace(vl,function(t,e){var n;return n="#"!==e[0]?pl[e]:"x"===e[1]?parseInt(e.substring(2),16):parseInt(e.substring(1),10),n?String.fromCharCode(Ae(n)):t})}function Ae(t){return t?10===t?32:t<128?t:t<=159?ml[t-128]:t<55296?t:t<=57343?65533:t<=65535?t:65533:65533}function Se(t){return t.replace(bl,"&amp;").replace(gl,"&lt;").replace(yl,"&gt;")}function Ce(t){return"string"==typeof t}function Oe(t){return t.t===Kh||t.t===Gh}function Pe(t){return(t.t===qh||t.t===$h)&&t.f}function Te(t,e,n,i,r){var o,a,u,h,c,l,f,d;for(nf(t),o=t.length;o--;)a=t[o],a.exclude?t.splice(o,1):e&&a.t===Kh&&t.splice(o,1);for(rf(t,i?uf:null,r?hf:null),o=t.length;o--;){if(a=t[o],a.f){var p=a.t===Zh&&af.test(a.e);c=n||p,!n&&p&&rf(a.f,cf,lf),c||(u=t[o-1],h=t[o+1],(!u||"string"==typeof u&&hf.test(u))&&(l=!0),(!h||"string"==typeof h&&uf.test(h))&&(f=!0)),Te(a.f,e,c,l,f)}if(a.l&&(Te(a.l.f,e,n,l,f),t.splice(o+1,0,a.l),delete a.l),a.a)for(d in a.a)a.a.hasOwnProperty(d)&&"string"!=typeof a.a[d]&&Te(a.a[d],e,n,l,f);if(a.m&&Te(a.m,e,n,l,f),a.v)for(d in a.v)a.v.hasOwnProperty(d)&&(s(a.v[d].n)&&Te(a.v[d].n,e,n,l,f),s(a.v[d].d)&&Te(a.v[d].d,e,n,l,f))}for(o=t.length;o--;)"string"==typeof t[o]&&("string"==typeof t[o+1]&&(t[o]=t[o]+t[o+1],t.splice(o+1,1)),n||(t[o]=t[o].replace(of," ")),""===t[o]&&t.splice(o,1))}function Fe(t){var e,n;return e=t.pos,t.matchString("</")?(n=t.matchPattern(df))?t.inside&&n!==t.inside?(t.pos=e,null):{t:Jh,e:n}:(t.pos-=2,void t.error("Illegal closing tag")):null}function Re(t){var e,n,i;return t.allowWhitespace(),(n=t.matchPattern(vf))?(e={name:n},i=je(t),null!=i&&(e.value=i),e):null}function je(t){var e,n,i,r;return e=t.pos,/[=\/>\s]/.test(t.nextChar())||t.error("Expected `=`, `/`, `>` or whitespace"),t.allowWhitespace(),t.matchString("=")?(t.allowWhitespace(),n=t.pos,i=t.sectionDepth,r=Ie(t,"'")||Ie(t,'"')||De(t),null===r&&t.error("Expected valid attribute value"),t.sectionDepth!==i&&(t.pos=n,t.error("An attribute value must contain as many opening section tags as closing section tags")),r.length?1===r.length&&"string"==typeof r[0]?_e(r[0]):r:""):(t.pos=e,null)}function Ne(t){var e,n,i,r,s;return e=t.pos,(n=t.matchPattern(gf))?(i=n,r=t.tags.map(function(t){return t.open}),(s=pf(i,r))!==-1&&(n=n.substr(0,s),t.pos=e+n.length),n):null}function De(t){var e,n;for(t.inAttribute=!0,e=[],n=Fc(t)||Ne(t);null!==n;)e.push(n),n=Fc(t)||Ne(t);return e.length?(t.inAttribute=!1,e):null}function Ie(t,e){var n,i,r;if(n=t.pos,!t.matchString(e))return null;for(t.inAttribute=e,i=[],r=Fc(t)||Le(t,e);null!==r;)i.push(r),r=Fc(t)||Le(t,e);return t.matchString(e)?(t.inAttribute=!1,i):(t.pos=n,null)}function Le(t,e){var n,i,r;return t.pos,i=t.remaining(),r=t.tags.map(function(t){return t.open}),r.push(e),n=pf(i,r),n===-1&&t.error("Quoted attribute value must have a closing quote"),n?(t.pos+=n,i.substr(0,n)):null}function Ve(t){var e,n,i;return t.allowWhitespace(),(e=$c(t))?(i={key:e},t.allowWhitespace(),t.matchString(":")?(t.allowWhitespace(),(n=t.read())?(i.value=n.v,i):null):null):null}function Me(t,e){var n,i,r,s,o,a,u,h,c;if("string"==typeof t){if(i=xf.exec(t)){var l=t.lastIndexOf(")");return kf.test(t)||e.error("Invalid input after method call expression '"+t.slice(l+1)+"'"),n={m:i[1]},s="["+t.slice(n.m.length+1,l)+"]",r=new yf(s),n.a=El(r.result[0]),n}if(t.indexOf(":")===-1)return t.trim();t=[t]}if(n={},u=[],h=[],t){for(;t.length;)if("string"==typeof(o=t.shift())){if((a=o.indexOf(":"))!==-1){a&&u.push(o.substr(0,a)),o.length>a+1&&(h[0]=o.substring(a+1));break}u.push(o)}else u.push(o);h=h.concat(t)}return u.length?h.length||"string"!=typeof u?(n={n:1===u.length&&"string"==typeof u[0]?u[0]:u},1===h.length&&"string"==typeof h[0]?(c=bf("["+h[0]+"]"),n.a=c?c.value:h[0].trim()):n.d=h):n=u:n="",n}function Ue(t){var e,n,i,r,s,o,a,u,h,c,l,f,d,p,m,v;if(e=t.pos,t.inside||t.inAttribute)return null;if(!t.matchString("<"))return null;if("/"===t.nextChar())return null;if(n={},t.includeLinePositions&&(n.p=t.getLinePos(e)),t.matchString("!"))return n.t=nc,t.matchPattern(/^doctype/i)||t.error("Expected DOCTYPE declaration"),n.a=t.matchPattern(/^(.+?)>/),n;if(n.t=Zh,n.e=t.matchPattern(_f),!n.e)return null;for(Af.test(t.nextChar())||t.error("Illegal tag name"),s=function(e,i){var r=i.n||i;Of.test(r)&&(t.pos-=r.length,t.error("Cannot use reserved event names (change, reset, teardown, update, construct, config, init, render, unrender, detach, insert)")),n.v[e]=i},t.allowWhitespace();o=Fc(t)||mf(t);)o.name?(i=Pf[o.name])?n[i]=wf(o.value,t):(r=Cf.exec(o.name))?(n.v||(n.v={}),a=wf(o.value,t),s(r[1],a)):t.sanitizeEventAttributes&&Sf.test(o.name)||(n.a||(n.a={}),n.a[o.name]=o.value||(""===o.value?"":0)):(n.m||(n.m=[]),n.m.push(o)),t.allowWhitespace();if(t.allowWhitespace(),t.matchString("/")&&(u=!0),!t.matchString(">"))return null;var g=n.e.toLowerCase(),y=t.preserveWhitespace;if(!u&&!dl.test(n.e)){t.elementStack.push(g),"script"!==g&&"style"!==g||(t.inside=g),h=[],c=ba(null);do{if(p=t.pos,m=t.remaining(),We(g,m))if(v=ff(t)){d=!0;var b=v.e.toLowerCase();if(b!==g&&(t.pos=p,!~t.elementStack.indexOf(b))){var w="Unexpected closing tag";dl.test(b)&&(w+=" (<"+b+"> is a void element - it cannot contain children)"),t.error(w)}}else(f=Nl(t,{open:t.standardDelimiters[0],close:t.standardDelimiters[1]}))?(d=!0,t.pos=p):(f=t.read(Kf))?(c[f.n]&&(t.pos=p,t.error("Duplicate partial definition")),sf(f.f,t.stripComments,y,!y,!y),c[f.n]=f.f,l=!0):(f=t.read(Hf))?h.push(f):d=!0;else d=!0}while(!d);h.length&&(n.f=h),l&&(n.p=c),t.elementStack.pop()}return t.inside=null,t.sanitizeElements&&t.sanitizeElements.indexOf(g)!==-1?Tf:n}function We(t,e){var n,i;return n=/^<([a-zA-Z][a-zA-Z0-9]*)/.exec(e),i=Ef[t],!n||!i||!~i.indexOf(n[1].toLowerCase())}function ze(t){var e,n,i,r;return n=t.remaining(),r=t.inside?"</"+t.inside:"<",t.inside&&!t.interpolate[t.inside]?e=n.indexOf(r):(i=t.tags.map(function(t){return t.open}),i=i.concat(t.tags.map(function(t){return"\\"+t.open})),t.inAttribute===!0?i.push('"',"'","=","<",">","`"):t.inAttribute?i.push(t.inAttribute):i.push(r),e=pf(n,i)),e?(e===-1&&(e=n.length),t.pos+=e,t.inside?n.substr(0,e):_e(n.substr(0,e))):null}function Be(t){return t.replace(Df,"\\$&")}function qe(t){var e=t.pos,n=t.standardDelimiters[0],i=t.standardDelimiters[1],r=void 0,s=void 0;if(!t.matchPattern(Lf)||!t.matchString(n))return t.pos=e,null;var o=t.matchPattern(Vf);if(v("Inline partial comments are deprecated.\nUse this...\n  {{#partial "+o+"}} ... {{/partial}}\n\n...instead of this:\n  <!-- {{>"+o+"}} --> ... <!-- {{/"+o+"}} -->'"),!t.matchString(i)||!t.matchPattern(Mf))return t.pos=e,null;r=[];var a=new RegExp("^<!--\\s*"+Nf(n)+"\\s*\\/\\s*"+o+"\\s*"+Nf(i)+"\\s*-->");do{t.matchPattern(a)?s=!0:(Ff=t.read(Hf),Ff||t.error("expected closing comment ('<!-- "+n+"/"+o+i+" -->')"),r.push(Ff))}while(!s);return{t:ec,f:r,n:o}}function $e(t){var e,n,i,r,s;e=t.pos;var o=t.standardDelimiters;if(!t.matchString(o[0]))return null;if(!t.matchPattern(Wf))return t.pos=e,null;n=t.matchPattern(/^[a-zA-Z_$][a-zA-Z_$0-9\-]*/),n||t.error("expected legal partial name"),t.matchString(o[1])||t.error("Expected closing delimiter '"+o[1]+"'"),i=[];do{(r=Nl(t,{open:t.standardDelimiters[0],close:t.standardDelimiters[1]}))?("partial"===!r.r&&t.error("Expected "+o[0]+"/partial"+o[1]),s=!0):(r=t.read(Hf),r||t.error("Expected "+o[0]+"/partial"+o[1]),i.push(r))}while(!s);return{t:ec,n:n,f:i}}function Qe(t){for(var e=[],n=ba(null),i=!1,r=t.preserveWhitespace;t.pos<t.str.length;){var s=t.pos,o=void 0,a=void 0;(a=t.read(Kf))?(n[a.n]&&(t.pos=s,t.error("Duplicated partial definition")),sf(a.f,t.stripComments,r,!r,!r),n[a.n]=a.f,i=!0):(o=t.read(Hf))?e.push(o):t.error("Unexpected template content")}var u={v:oa,t:e}
;return i&&(u.p=n),u}function Ze(t,e){return new Zf(t,e||{}).result}function He(t){var e=ba(td);return e.parse=function(e,n){return Ke(e,n||t)},e}function Ke(t,e){if(!Bf)throw new Error("Missing Ractive.parse - cannot parse template. Either preparse or use the version that includes the parser");return Bf(t,e||this.options)}function Ge(t,e){var n;if(!Xo){if(e&&e.noThrow)return;throw new Error("Cannot retrieve template #"+t+" as Ractive is not running in a browser.")}if(Ye(t)&&(t=t.substring(1)),!(n=document.getElementById(t))){if(e&&e.noThrow)return;throw new Error("Could not find template element with id #"+t)}if("SCRIPT"!==n.tagName.toUpperCase()){if(e&&e.noThrow)return;throw new Error("Template element with id #"+t+", must be a <script> element")}return"textContent"in n?n.textContent:n.innerHTML}function Ye(t){return t&&"#"===t[0]}function Je(t){return!("string"==typeof t)}function Xe(t){return t.defaults&&(t=t.defaults),Xf.reduce(function(e,n){return e[n]=t[n],e},{})}function tn(t){var e,n=t._config.template;if(n&&n.fn)return e=en(t,n.fn),e!==n.result?(n.result=e,e=rn(e,t)):void 0}function en(t,e){var n=nn(ed.getParseOptions(t));return e.call(t,n)}function nn(t){var e=ba(ed);return e.parse=function(e,n){return ed.parse(e,n||t)},e}function rn(t,e){if("string"==typeof t)"#"===t[0]&&(t=ed.fromId(t)),t=Bf(t,ed.getParseOptions(e));else{if(void 0==t)throw new Error("The template cannot be "+t+".");if("number"!=typeof t.v)throw new Error("The template parser was passed a non-string template, but the template doesn't have a version.  Make sure you're passing in the template you think you are.");if(t.v!==oa)throw new Error("Mismatched template version (expected "+oa+", got "+t.v+") Please ensure you are using the latest version of Ractive.js in your build process as well as in your app")}return t}function sn(t,e,n){if(e)for(var i in e)!n&&t.hasOwnProperty(i)||(t[i]=e[i])}function on(t,e,n){if(!/_super/.test(n))return n;var i=function(){var t,r=an(i._parent,e),s="_super"in this,o=this._super;return this._super=r,t=n.apply(this,arguments),s?this._super=o:delete this._super,t};return i._parent=t,i._method=n,i}function an(t,e){var n,i;return e in t?(n=t[e],i="function"==typeof n?n:function(){return n}):i=Oa,i}function un(t,e,n){return"options."+t+" has been deprecated in favour of options."+e+"."+(n?" You cannot specify both options, please use options."+e+".":"")}function hn(t,e,n){if(e in t){if(n in t)throw new Error(un(e,n,!0));m(un(e,n)),t[n]=t[e]}}function cn(t){hn(t,"beforeInit","onconstruct"),hn(t,"init","onrender"),hn(t,"complete","oncomplete"),hn(t,"eventDefinitions","events"),s(t.adaptors)&&hn(t,"adaptors","adapt")}function ln(t,e,n,i){fd(i);for(var r in i)if(hd.hasOwnProperty(r)){var s=i[r];"el"!==r&&"function"==typeof s?m(r+" is a Ractive option that does not expect a function and will be ignored","init"===t?n:null):n[r]=s}cd.forEach(function(r){r[t](e,n,i)}),Sh[t](e,n,i),id[t](e,n,i),Dh[t](e,n,i),fn(e.prototype,n,i)}function fn(t,e,n){for(var i in n)if(!ud[i]&&n.hasOwnProperty(i)){var r=n[i];"function"==typeof r&&(r=ld(t,i,r)),e[i]=r}}function dn(t){var e={};return t.forEach(function(t){return e[t]=!0}),e}function pn(){this.dirtyValue=this.dirtyArgs=!0,this.bound&&"function"==typeof this.owner.bubble&&this.owner.bubble()}function mn(){var t;return 1===this.items.length?this.items[0].detach():(t=document.createDocumentFragment(),this.items.forEach(function(e){var n=e.detach();n&&t.appendChild(n)}),t)}function vn(t){var e,n,i,r;if(this.items){for(n=this.items.length,e=0;e<n;e+=1)if(i=this.items[e],i.find&&(r=i.find(t)))return r;return null}}function gn(t,e){var n,i,r;if(this.items)for(i=this.items.length,n=0;n<i;n+=1)r=this.items[n],r.findAll&&r.findAll(t,e);return e}function yn(t,e){var n,i,r;if(this.items)for(i=this.items.length,n=0;n<i;n+=1)r=this.items[n],r.findAllComponents&&r.findAllComponents(t,e);return e}function bn(t){var e,n,i,r;if(this.items){for(e=this.items.length,n=0;n<e;n+=1)if(i=this.items[n],i.findComponent&&(r=i.findComponent(t)))return r;return null}}function wn(t){var e=t.index;return this.items[e+1]?this.items[e+1].firstNode():this.owner===this.root?this.owner.component?this.owner.component.findNextNode():null:this.owner.findNextNode(this)}function xn(){return this.items&&this.items[0]?this.items[0].firstNode():null}function kn(t,e,n,i){return i=i||0,t.map(function(t){var r,s,o;return t.text?t.text:t.fragments?t.fragments.map(function(t){return kn(t.items,e,n,i)}).join(""):(r=n+"-"+i++,o=t.keypath&&(s=t.root.viewmodel.wrapped[t.keypath.str])?s.value:t.getValue(),e[r]=o,"${"+r+"}")}).join("")}function En(){var t,e,n,i;return this.dirtyArgs&&(e=kd(this.items,t={},this.root._guid),n=bf("["+e+"]",t),i=n?n.value:[this.toString()],this.argsList=i,this.dirtyArgs=!1),this.argsList}function _n(){var t=this;do{if(t.pElement)return t.pElement.node}while(t=t.parent);return this.root.detached||this.root.el}function An(){var t,e,n,i;return this.dirtyValue&&(e=kd(this.items,t={},this.root._guid),n=bf(e,t),i=n?n.value:this.toString(),this.value=i,this.dirtyValue=!1),this.value}function Sn(){this.registered&&this.root.viewmodel.unregister(this.keypath,this),this.resolver&&this.resolver.unbind()}function Cn(){return this.value}function On(t,e){for(var n,i=0;i<e.prop.length;i++)if(void 0!==(n=t[e.prop[i]]))return n}function Pn(t,e){var n,i,r,s,o,a={},u=!1;for(e||(a.refs=n={});t;){if((o=t.owner)&&(i=o.indexRefs)){if(e&&(r=o.getIndexRef(e)))return a.ref={fragment:t,ref:r},a;if(!e)for(s in i)r=i[s],n[r.n]||(u=!0,n[r.n]={fragment:t,ref:r})}!t.parent&&t.owner&&t.owner.component&&t.owner.component.parentFragment&&!t.owner.component.instance.isolated?(a.componentBoundary=!0,t=t.owner.component.parentFragment):t=t.parent}return u?a:void 0}function Tn(t,e,n){var i;return"@"===e.charAt(0)?new Dd(t,e,n):(i=Vd(t.parentFragment,e))?new Ld(t,i,n):new Rd(t,e,n)}function Fn(t,e){var n,i;if(zd[t])return zd[t];for(i=[];e--;)i[e]="_"+e;return n=new Function(i.join(","),"return("+t+")"),zd[t]=n,n}function Rn(t){return t.call()}function jn(t,e){return t.replace(/_([0-9]+)/g,function(t,n){var i,r;return+n>=e.length?"_"+n:(i=e[n],void 0===i?"undefined":i.isSpecial?(r=i.value,"number"==typeof r?r:'"'+r+'"'):i.str)})}function Nn(t){return _("${"+t.replace(/[\.\[\]]/g,"-").replace(/\*/,"#MUL#")+"}")}function Dn(t){return void 0!==t&&"@"!==t[0]}function In(t,e){var n,i,r;if(t.__ractive_nowrap)return t;if(i="__ractive_"+e._guid,n=t[i])return n;if(/this/.test(t.toString())){wa(t,i,{value:Bd.call(t,e),configurable:!0});for(r in t)t.hasOwnProperty(r)&&(t[i][r]=t[r]);return e._boundFunctions.push({fn:t,prop:i}),t[i]}return wa(t,"__ractive_nowrap",{value:t}),t.__ractive_nowrap}function Ln(t){return t.value}function Vn(t){return void 0!=t}function Mn(t){t.forceResolution()}function Un(t,e){function n(e){t.resolve(e)}function i(e){var n=t.keypath;e!=n&&(t.resolve(e),void 0!==n&&t.fragments&&t.fragments.forEach(function(t){t.rebind(n,e)}))}var r,s,o;s=e.parentFragment,o=e.template,t.root=s.root,t.parentFragment=s,t.pElement=s.pElement,t.template=e.template,t.index=e.index||0,t.isStatic=e.template.s,t.type=e.template.t,t.registered=!1,(r=o.r)&&(t.resolver=Ud(t,r,n)),e.template.x&&(t.resolver=new qd(t,s,e.template.x,i)),e.template.rx&&(t.resolver=new Hd(t,e.template.rx,i)),t.template.n!==wc||t.hasOwnProperty("value")||t.setValue(void 0)}function Wn(t){var e,n,i;if(t&&t.isSpecial)return this.keypath=t,void this.setValue(t.value);this.registered&&(this.root.viewmodel.unregister(this.keypath,this),this.registered=!1,e=!0),this.keypath=t,void 0!=t&&(n=this.root.viewmodel.get(t),this.root.viewmodel.register(t,this),this.registered=!0),this.setValue(n),e&&(i=this.twowayBinding)&&i.rebound()}function zn(t,e){this.fragments&&this.fragments.forEach(function(n){return n.rebind(t,e)}),this.resolver&&this.resolver.rebind(t,e)}function Bn(){this.parentFragment.bubble()}function qn(){var t;return 1===this.fragments.length?this.fragments[0].detach():(t=document.createDocumentFragment(),this.fragments.forEach(function(e){t.appendChild(e.detach())}),t)}function $n(t){var e,n,i;for(n=this.fragments.length,e=0;e<n;e+=1)if(i=this.fragments[e].find(t))return i;return null}function Qn(t,e){var n,i;for(i=this.fragments.length,n=0;n<i;n+=1)this.fragments[n].findAll(t,e)}function Zn(t,e){var n,i;for(i=this.fragments.length,n=0;n<i;n+=1)this.fragments[n].findAllComponents(t,e)}function Hn(t){var e,n,i;for(n=this.fragments.length,e=0;e<n;e+=1)if(i=this.fragments[e].findComponent(t))return i;return null}function Kn(t){return this.fragments[t.index+1]?this.fragments[t.index+1].firstNode():this.parentFragment.findNextNode(this)}function Gn(){var t,e,n;if(t=this.fragments.length)for(e=0;e<t;e+=1)if(n=this.fragments[e].firstNode())return n;return this.parentFragment.findNextNode(this)}function Yn(t){var e,n,i,r,s,o=this;if(!this.shuffling&&!this.unbound&&this.currentSubtype===xc){if(this.shuffling=!0,fu.scheduleTask(function(){return o.shuffling=!1}),this.parentFragment,r=[],t.forEach(function(t,n){var i,s,a,u;return t===n?void(r[t]=o.fragments[n]):(i=o.fragments[n],void 0===e&&(e=n),t===-1?(o.fragmentsToUnrender.push(i),void i.unbind()):(t-n,s=o.keypath.join(n),a=o.keypath.join(t),i.index=t,(u=i.registeredIndexRefs)&&u.forEach(Jn),i.rebind(s,a),void(r[t]=i)))}),i=this.root.viewmodel.get(this.keypath).length,void 0===e){if(this.length===i)return;e=this.length}for(this.length=this.fragments.length=i,this.rendered&&fu.addView(this),{template:this.template.f,root:this.root,owner:this},n=e;n<i;n+=1)s=r[n],s||this.fragmentsToCreate.push(n),this.fragments[n]=s}}function Jn(t){t.rebind("","")}function Xn(){var t=this;return this.docFrag=document.createDocumentFragment(),this.fragments.forEach(function(e){return t.docFrag.appendChild(e.render())}),this.renderedFragments=this.fragments.slice(),this.fragmentsToRender=[],this.rendered=!0,this.docFrag}function ti(t){var e,n,i=this;this.updating||(this.updating=!0,this.keypath&&(e=this.root.viewmodel.wrapped[this.keypath.str])&&(t=e.get()),this.fragmentsToCreate.length?(n={template:this.template.f||[],root:this.root,pElement:this.pElement,owner:this},this.fragmentsToCreate.forEach(function(t){var e;n.context=i.keypath.join(t),n.index=t,e=new lb(n),i.fragmentsToRender.push(i.fragments[t]=e)}),this.fragmentsToCreate.length=0):ni(this,t)&&(this.bubble(),this.rendered&&fu.addView(this)),this.value=t,this.updating=!1)}function ei(t,e,n){if(e===xc&&t.indexRefs&&t.indexRefs[0]){var i=t.indexRefs[0];(n&&"i"===i.t||!n&&"k"===i.t)&&(n||(t.length=0,t.fragmentsToUnrender=t.fragments.slice(0),t.fragmentsToUnrender.forEach(function(t){return t.unbind()}))),i.t=n?"k":"i"}t.currentSubtype=e}function ni(t,e){var n={template:t.template.f||[],root:t.root,pElement:t.parentFragment.pElement,owner:t};if(t.hasContext=!0,t.subtype)switch(t.subtype){case bc:return t.hasContext=!1,ai(t,e,!1,n);case wc:return t.hasContext=!1,ai(t,e,!0,n);case kc:return oi(t,n);case Ec:return si(t,e,n);case xc:if(h(e))return ei(t,t.subtype,!0),ri(t,e,n)}return t.ordered=!!o(e),t.ordered?(ei(t,xc,!1),ii(t,e,n)):h(e)||"function"==typeof e?t.template.i?(ei(t,xc,!0),ri(t,e,n)):(ei(t,kc,!1),oi(t,n)):(ei(t,bc,!1),t.hasContext=!1,ai(t,e,!1,n))}function ii(t,e,n){var i,r,s;if((r=e.length)===t.length)return!1;if(r<t.length)t.fragmentsToUnrender=t.fragments.splice(r,t.length-r),t.fragmentsToUnrender.forEach(Z);else if(r>t.length)for(i=t.length;i<r;i+=1)n.context=t.keypath.join(i),n.index=i,s=new lb(n),t.fragmentsToRender.push(t.fragments[i]=s);return t.length=r,!0}function ri(t,e,n){var i,r,s,o,a,u;for(s=t.hasKey||(t.hasKey={}),r=t.fragments.length;r--;)o=t.fragments[r],o.key in e||(a=!0,o.unbind(),t.fragmentsToUnrender.push(o),t.fragments.splice(r,1),s[o.key]=!1);for(r=t.fragments.length;r--;)o=t.fragments[r],o.index!==r&&(o.index=r,(u=o.registeredIndexRefs)&&u.forEach(ci));r=t.fragments.length;for(i in e)s[i]||(a=!0,n.context=t.keypath.join(i),n.key=i,n.index=r++,o=new lb(n),t.fragmentsToRender.push(o),t.fragments.push(o),s[i]=!0);return t.length=t.fragments.length,a}function si(t,e,n){return e?oi(t,n):ui(t)}function oi(t,e){var n;if(!t.length)return e.context=t.keypath,e.index=0,n=new lb(e),t.fragmentsToRender.push(t.fragments[0]=n),t.length=1,!0}function ai(t,e,n,i){var r,s,a,u,c;if(s=o(e)&&0===e.length,a=!1,!o(e)&&h(e)){a=!0;for(c in e){a=!1;break}}return r=n?s||a||!e:e&&!s&&!a,r?t.length?t.length>1?(t.fragmentsToUnrender=t.fragments.splice(1),t.fragmentsToUnrender.forEach(Z),!0):void 0:(i.index=0,u=new lb(i),t.fragmentsToRender.push(t.fragments[0]=u),t.length=1,!0):ui(t)}function ui(t){if(t.length)return t.fragmentsToUnrender=t.fragments.splice(0,t.fragments.length).filter(hi),t.fragmentsToUnrender.forEach(Z),t.length=t.fragmentsToRender.length=0,!0}function hi(t){return t.rendered}function ci(t){t.rebind("","")}function li(t){var e,n,i;for(e="",n=0,i=this.length,n=0;n<i;n+=1)e+=this.fragments[n].toString(t);return e}function fi(){var t=this;this.fragments.forEach(Z),this.fragmentsToRender.forEach(function(e){return I(t.fragments,e)}),this.fragmentsToRender=[],Pd.call(this),this.length=0,this.unbound=!0}function di(t){this.fragments.forEach(t?pi:mi),this.renderedFragments=[],this.rendered=!1}function pi(t){t.unrender(!0)}function mi(t){t.unrender(!1)}function vi(){var t,e,n,i,r,s,o;for(n=this.renderedFragments;t=this.fragmentsToUnrender.pop();)t.unrender(!0),n.splice(n.indexOf(t),1);for(;t=this.fragmentsToRender.shift();)t.render();for(this.rendered&&(r=this.parentFragment.getNode()),o=this.fragments.length,s=0;s<o;s+=1)t=this.fragments[s],e=n.indexOf(t,s),e!==s?(this.docFrag.appendChild(t.detach()),e!==-1&&n.splice(e,1),n.splice(s,0,t)):this.docFrag.childNodes.length&&(i=t.firstNode(),r.insertBefore(this.docFrag,i));this.rendered&&this.docFrag.childNodes.length&&(i=this.parentFragment.findNextNode(this),r.insertBefore(this.docFrag,i)),this.renderedFragments=this.fragments.slice()}function gi(){var t,e;if(this.docFrag){for(t=this.nodes.length,e=0;e<t;e+=1)this.docFrag.appendChild(this.nodes[e]);return this.docFrag}}function yi(t){var e,n,i,r;for(n=this.nodes.length,e=0;e<n;e+=1)if(i=this.nodes[e],1===i.nodeType){if(la(i,t))return i;if(r=i.querySelector(t))return r}return null}function bi(t,e){var n,i,r,s,o,a;for(i=this.nodes.length,n=0;n<i;n+=1)if(r=this.nodes[n],1===r.nodeType&&(la(r,t)&&e.push(r),s=r.querySelectorAll(t)))for(o=s.length,a=0;a<o;a+=1)e.push(s[a])}function wi(){return this.rendered&&this.nodes[0]?this.nodes[0]:this.parentFragment.findNextNode(this)}function xi(t){return Ap[t]||(Ap[t]=ca(t))}function ki(t){var e,n,i;t&&"select"===t.name&&t.binding&&(e=L(t.node.options).filter(Ei),t.getAttribute("multiple")?i=e.map(function(t){return t.value}):(n=e[0])&&(i=n.value),void 0!==i&&t.binding.setValue(i),t.bubble())}function Ei(t){return t.selected}function _i(){if(this.rendered)throw new Error("Attempted to render an item that was already rendered");return this.docFrag=document.createDocumentFragment(),this.nodes=Sp(this.value,this.parentFragment.getNode(),this.docFrag),Cp(this.pElement),this.rendered=!0,this.docFrag}function Ai(t){var e;(e=this.root.viewmodel.wrapped[this.keypath.str])&&(t=e.get()),t!==this.value&&(this.value=t,this.parentFragment.bubble(),this.rendered&&fu.addView(this))}function Si(){return void 0!=this.value?_e(""+this.value):""}function Ci(t){this.rendered&&t&&(this.nodes.forEach(e),this.rendered=!1)}function Oi(){var t,e;if(this.rendered){for(;this.nodes&&this.nodes.length;)t=this.nodes.pop(),t.parentNode.removeChild(t);e=this.parentFragment.getNode(),this.nodes=Sp(this.value,e,this.docFrag),e.insertBefore(this.docFrag,this.parentFragment.findNextNode(this)),Cp(this.pElement)}}function Pi(){var t,e=this.node;if(e)return(t=e.parentNode)&&t.removeChild(e),e}function Ti(){return null}function Fi(){return this.node}function Ri(t){if(this.attributes&&this.attributes[t])return this.attributes[t].value}function ji(){var t=this.useProperty||!this.rendered?this.fragment.getValue():this.fragment.toString();a(t,this.value)||("id"===this.name&&this.value&&delete this.root.nodes[this.value],this.value=t,"value"===this.name&&this.node&&(this.node._ractive.value=t),this.rendered&&fu.addView(this))}function Ni(t){var e=t.fragment.items;if(1===e.length)return e[0].type===zh?e[0]:void 0}function Di(t){if(this.type=Yh,this.element=t.element,this.root=t.root,Xp(this,t.name),this.isBoolean=fl.test(this.name),!t.value||"string"==typeof t.value)return void(this.value=!!this.isBoolean||(t.value||""));this.parentFragment=this.element.parentFragment,this.fragment=new lb({template:t.value,root:this.root,owner:this}),this.value=this.fragment.getValue(),this.interpolator=tm(this),this.isBindable=!!this.interpolator&&!this.interpolator.isStatic,this.ready=!0}function Ii(t,e){this.fragment&&this.fragment.rebind(t,e)}function Li(t){var e;this.node=t,t.namespaceURI&&t.namespaceURI!==ia.html||(e=rm[this.name]||this.name,void 0!==t[e]&&(this.propertyName=e),(this.isBoolean||this.isTwoway)&&(this.useProperty=!0),"value"===e&&(t._ractive.value=this.value)),this.rendered=!0,this.update()}function Vi(){var t=this,e=t.name,n=t.namespacePrefix,i=t.value,r=t.interpolator,s=t.fragment;if(("value"!==e||"select"!==this.element.name&&"textarea"!==this.element.name)&&("value"!==e||void 0===this.element.getAttribute("contenteditable"))){if("name"===e&&"input"===this.element.name&&r)return"name={{"+(r.keypath.str||r.ref)+"}}";if(this.isBoolean)return i?e:"";if(s){if(1===s.items.length&&null==s.items[0].value)return"";i=s.toString()}return n&&(e=n+":"+e),i?e+'="'+Mi(i)+'"':e}}function Mi(t){return t.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function Ui(){this.fragment&&this.fragment.unbind(),"id"===this.name&&delete this.root.nodes[this.value]}function Wi(){var t,e,n,i=this.value;if(!this.locked)for(this.node._ractive.value=i,t=this.node.options,n=t.length;n--;)if(e=t[n],(e._ractive?e._ractive.value:e.value)==i){e.selected=!0;break}}function zi(){var t,e,n,i,r=this.value;for(s(r)||(r=[r]),t=this.node.options,e=t.length;e--;)n=t[e],i=n._ractive?n._ractive.value:n.value,n.selected=R(r,i)}function Bi(){var t=this,e=t.node,n=t.value;e.checked=n==e._ractive.value}function qi(){var t,e,n,i,r=this.node;if(t=r.checked,r.value=this.element.getAttribute("value"),r.checked=this.element.getAttribute("value")===this.element.getAttribute("name"),t&&!r.checked&&this.element.binding&&(n=this.element.binding.siblings,i=n.length)){for(;i--;){if(e=n[i],!e.element.node)return;if(e.element.node.checked)return fu.addRactive(e.root),e.handleChange()}this.root.viewmodel.set(e.keypath,void 0)}}function $i(){var t,e,n=this,i=n.element,r=n.node,o=n.value,a=i.binding;if(t=i.getAttribute("value"),s(o)){for(e=o.length;e--;)if(t==o[e])return void(a.isChecked=r.checked=!0);a.isChecked=r.checked=!1}else a.isChecked=r.checked=o==t}function Qi(){this.node.className=n(this.value)}function Zi(){var t=this,e=t.node,n=t.value;this.root.nodes[n]=e,e.id=n}function Hi(){var t,e;t=this.node,e=this.value,void 0===e&&(e=""),t.style.setAttribute("cssText",e)}function Ki(){var t=this.value;void 0===t&&(t=""),this.locked||(this.node.innerHTML=t)}function Gi(){var t=this,e=t.node,n=t.value;e._ractive.value=n,this.locked||(e.value=void 0==n?"":n)}function Yi(){this.locked||(this.node[this.propertyName]=this.value)}function Ji(){var t=this,e=t.node,n=t.namespace,i=t.name,r=t.value,s=t.fragment;n?e.setAttributeNS(n,i,(s||r).toString()):this.isBoolean?r?e.setAttribute(i,""):e.removeAttribute(i):null==r?e.removeAttribute(i):e.setAttribute(i,(s||r).toString())}function Xi(){var t,e,n=this,i=n.name,r=n.element,s=n.node;"id"===i?e=dm:"value"===i?"select"===r.name&&"value"===i?e=r.getAttribute("multiple")?um:am:"textarea"===r.name?e=vm:null!=r.getAttribute("contenteditable")?e=mm:"input"===r.name&&(t=r.getAttribute("type"),e="file"===t?Oa:"radio"===t&&r.binding&&"name"===r.binding.name?cm:vm):this.isTwoway&&"name"===i?"radio"===s.type?e=hm:"checkbox"===s.type&&(e=lm):"style"===i&&s.style.setAttribute?e=pm:"class"!==i||s.namespaceURI&&s.namespaceURI!==ia.html?this.useProperty&&(e=gm):e=fm,e||(e=ym),this.update=e,this.update()}function tr(t,e){var n=e?"svg":"div";return xm.innerHTML="<"+n+" "+t+"></"+n+">",L(xm.childNodes[0].attributes)}function er(t,e){for(var n=t.length;n--;)if(t[n].name===e.name)return!1;return!0}function nr(t){for(;t=t.parent;)if("form"===t.name)return t}function ir(){this._ractive.binding.handleChange()}function rr(){var t;Tm.call(this),t=this._ractive.root.viewmodel.get(this._ractive.binding.keypath),this.value=void 0==t?"":t}function sr(){var t=this._ractive.binding,e=this;t._timeout&&clearTimeout(t._timeout),t._timeout=setTimeout(function(){t.rendered&&Tm.call(e),t._timeout=void 0},t.element.lazy)}function or(t,e,n){var i=t+e+n;return Dm[i]||(Dm[i]=[])}function ar(t){return t.isChecked}function ur(t){return t.element.getAttribute("value")}function hr(t){var e,n,i,r,s,o=t.attributes;if(t.binding&&(t.binding.teardown(),t.binding=null),(t.getAttribute("contenteditable")||o.contenteditable&&cr(o.contenteditable))&&cr(o.value)?n=jm:"input"===t.name?(e=t.getAttribute("type"),"radio"===e||"checkbox"===e?(i=cr(o.name),r=cr(o.checked),i&&r&&m("A radio input can have two-way binding on its name attribute, or its checked attribute - not both",{ractive:t.root}),i?n="radio"===e?Mm:Wm:r&&(n="radio"===e?Lm:Bm)):"file"===e&&cr(o.value)?n=Km:cr(o.value)&&(n="number"===e||"range"===e?Gm:Fm)):"select"===t.name&&cr(o.value)?n=t.getAttribute("multiple")?Zm:$m:"textarea"===t.name&&cr(o.value)&&(n=Fm),n&&(s=new n(t))&&s.keypath)return s}function cr(t){return t&&t.isBindable}function lr(){var t=this.getAction();t&&!this.hasListener?this.listen():!t&&this.hasListener&&this.unrender()}function fr(t){Vu(this.root,this.getAction(),{event:t})}function dr(){return this.action.toString().trim()}function pr(t,e,n){var i,r,s=this;this.element=t,this.root=t.root,this.parentFragment=t.parentFragment,this.name=e,e.indexOf("*")!==-1&&(l('Only component proxy-events may contain "*" wildcards, <%s on-%s="..."/> is not valid',t.name,e),this.invalid=!0),n.m?(r=n.a.r,this.method=n.m,this.keypaths=[],this.fn=Wd(n.a.s,r.length),this.parentFragment=t.parentFragment,this.root,this.refResolvers=[],r.forEach(function(t,e){var n=void 0;(n=nv.exec(t))?s.keypaths[e]={eventObject:!0,refinements:n[1]?n[1].split("."):[]}:s.refResolvers.push(Ud(s,t,function(t){return s.resolve(e,t)}))}),this.fire=mr):(i=n.n||n,"string"!=typeof i&&(i=new lb({template:i,root:this.root,owner:this})),this.action=i,n.d?(this.dynamicParams=new lb({template:n.d,root:this.root,owner:this.element}),this.fire=gr):n.a&&(this.params=n.a,this.fire=vr))}function mr(t){var e,n,i;if(e=this.root,"function"!=typeof e[this.method])throw new Error('Attempted to call a non-existent method ("'+this.method+'")');n=this.keypaths.map(function(n){var i,r,s;if(void 0!==n){if(n.eventObject){if(i=t,r=n.refinements.length)for(s=0;s<r;s+=1)i=i[n.refinements[s]]}else i=e.viewmodel.get(n);return i}}),Lu.enqueue(e,t),i=this.fn.apply(null,n),e[this.method].apply(e,i),Lu.dequeue(e)}function vr(t){Vu(this.root,this.getAction(),{event:t,args:this.params})}function gr(t){var e=this.dynamicParams.getArgsList();"string"==typeof e&&(e=e.substr(1,e.length-2)),Vu(this.root,this.getAction(),{event:t,args:e})}function yr(t){var e,n,i,r={};e=this._ractive,n=e.events[t.type],(i=Vd(n.element.parentFragment))&&(r=Vd.resolve(i)),n.fire({node:this,original:t,index:r,keypath:e.keypath.str,context:e.root.viewmodel.get(e.keypath)})}function br(){var t,e=this.name;if(!this.invalid){if(t=g("events",this.root,e))this.custom=t(this.node,wr(e));else{if(!("on"+e in this.node||window&&"on"+e in window||ta))return void(ov[e]||v(Ra(e,"event"),{node:this.node}));this.node.addEventListener(e,iv,!1)}this.hasListener=!0}}function wr(t){return sv[t]||(sv[t]=function(e){var n=e.node._ractive;e.index=n.index,e.keypath=n.keypath.str,e.context=n.root.viewmodel.get(n.keypath),n.events[t].fire(e)}),sv[t]}function xr(t,e){function n(n){n&&n.rebind(t,e)}if(this.method)return this.element.parentFragment,void this.refResolvers.forEach(n);"string"!=typeof this.action&&n(this.action),this.dynamicParams&&n(this.dynamicParams)}function kr(){this.node=this.element.node,this.node._ractive.events[this.name]=this,(this.method||this.getAction())&&this.listen()}function Er(t,e){this.keypaths[t]=e}function _r(){if(this.method)return void this.refResolvers.forEach(Z);"string"!=typeof this.action&&this.action.unbind(),this.dynamicParams&&this.dynamicParams.unbind()}function Ar(){this.custom?this.custom.teardown():this.node.removeEventListener(this.name,iv,!1),this.hasListener=!1}function Sr(){var t=this;this.dirty||(this.dirty=!0,fu.scheduleTask(function(){Cr(t),t.dirty=!1})),this.parentFragment.bubble()}function Cr(t){var e,n,i,r,s;(e=t.node)&&(r=L(e.options),n=t.getAttribute("value"),i=t.getAttribute("multiple"),void 0!==n?(r.forEach(function(t){var e,r;e=t._ractive?t._ractive.value:t.value,r=i?Or(n,e):n==e,r&&(s=!0),t.selected=r}),s||(r[0]&&(r[0].selected=!0),t.binding&&t.binding.forceUpdate())):t.binding&&t.binding.forceUpdate())}function Or(t,e){for(var n=t.length;n--;)if(t[n]==e)return!0}function Pr(t,e){t.select=Fr(t.parent),t.select&&(t.select.options.push(t),e.a||(e.a={}),void 0!==e.a.value||e.a.hasOwnProperty("disabled")||(e.a.value=e.f),"selected"in e.a&&void 0!==t.select.getAttribute("value")&&delete e.a.selected)}function Tr(t){t.select&&I(t.select.options,t)}function Fr(t){if(t)do{if("select"===t.name)return t}while(t=t.parent)}function Rr(t){var e,n,i,r,s,o,a;this.type=Zh,e=this.parentFragment=t.parentFragment,n=this.template=t.template,this.parent=t.pElement||e.pElement,this.root=i=e.root,this.index=t.index,this.key=t.key,this.name=Jp(n.e),"option"===this.name&&Pr(this,n),"select"===this.name&&(this.options=[],this.bubble=Sr),"form"===this.name&&(this.formBindings=[]),a=Gp(this,n),this.attributes=Em(this,n.a),this.conditionalAttributes=Sm(this,n.m),n.f&&(this.fragment=new lb({template:n.f,root:i,owner:this,pElement:this,cssIds:null})),o=i.twoway,a.twoway===!1?o=!1:a.twoway===!0&&(o=!0),this.twoway=o,this.lazy=a.lazy,o&&(r=Ym(this,n.a))&&(this.binding=r,s=this.root._twowayBindings[r.keypath.str]||(this.root._twowayBindings[r.keypath.str]=[]),s.push(r)),n.v&&(this.eventHandlers=pv(this,n.v)),n.o&&(this.decorator=new bv(this,n.o)),this.intro=n.t0||n.t1,this.outro=n.t0||n.t2}function jr(t,e){function n(n){n.rebind(t,e)}var i,r,s;if(this.attributes&&this.attributes.forEach(n),this.conditionalAttributes&&this.conditionalAttributes.forEach(n),this.eventHandlers&&this.eventHandlers.forEach(n),this.decorator&&n(this.decorator),this.fragment&&n(this.fragment),s=this.liveQueries)for(this.root,i=s.length;i--;)s[i]._makeDirty();this.node&&(r=this.node._ractive)&&k(r,"keypath",t,e)}function Nr(t){var e;(t.attributes.width||t.attributes.height)&&t.node.addEventListener("load",e=function(){var n=t.getAttribute("width"),i=t.getAttribute("height");void 0!==n&&t.node.setAttribute("width",n),void 0!==i&&t.node.setAttribute("height",i),t.node.removeEventListener("load",e,!1)},!1)}function Dr(t){t.node.addEventListener("reset",Lr,!1)}function Ir(t){t.node.removeEventListener("reset",Lr,!1)}function Lr(){var t=this._ractive.proxy;fu.start(),t.formBindings.forEach(Vr),fu.end()}function Vr(t){t.root.viewmodel.set(t.keypath,t.resetValue)}function Mr(t,e,n){var i,r,s;this.element=t,this.root=i=t.root,this.isIntro=n,"string"!=typeof(r=e.n||e)&&(s=new lb({template:r,root:i,owner:t}),r=s.toString(),s.unbind(),""===r)||(this.name=r,e.a?this.params=e.a:e.d&&(s=new lb({template:e.d,root:i,owner:t}),this.params=s.getArgsList(),s.unbind()),this._fn=g("transitions",i,r),this._fn||v(Ra(r,"transition"),{ractive:this.root}))}function Ur(t){return t}function Wr(){Kv.hidden=document[$v]}function zr(){Kv.hidden=!0}function Br(){Kv.hidden=!1}function qr(){var t,e,n,i=this;if(t=this.node=this.element.node,e=t.getAttribute("style"),this.complete=function(r){n||(!r&&i.isIntro&&$r(t,e),t._ractive.transition=null,i._manager.remove(i),n=!0)},!this._fn)return void this.complete();this._fn.apply(this.root,[this].concat(this.params))}function $r(t,e){e?t.setAttribute("style",e):(t.getAttribute("style"),t.removeAttribute("style"))}function Qr(){var t,e,n,i=this,r=this.root;return t=Zr(this),e=this.node=ca(this.name,t),this.parentFragment.cssIds&&this.node.setAttribute("data-ractive-css",this.parentFragment.cssIds.map(function(t){return"{"+t+"}"}).join(" ")),wa(this.node,"_ractive",{value:{proxy:this,keypath:ru(this.parentFragment),events:ba(null),root:r}}),this.attributes.forEach(function(t){return t.render(e)}),this.conditionalAttributes.forEach(function(t){return t.render(e)}),this.fragment&&("script"===this.name?(this.bubble=og,this.node.text=this.fragment.toString(!1),this.fragment.unrender=Oa):"style"===this.name?(this.bubble=sg,this.bubble(),this.fragment.unrender=Oa):this.binding&&this.getAttribute("contenteditable")?this.fragment.unrender=Oa:this.node.appendChild(this.fragment.render())),this.binding&&(this.binding.render(),this.node._ractive.binding=this.binding),this.eventHandlers&&this.eventHandlers.forEach(function(t){return t.render()}),"option"===this.name&&Hr(this),"img"===this.name?Nr(this):"form"===this.name?Dr(this):"input"===this.name||"textarea"===this.name?this.node.defaultValue=this.node.value:"option"===this.name&&(this.node.defaultSelected=this.node.selected),this.decorator&&this.decorator.fn&&fu.scheduleTask(function(){i.decorator.torndown||i.decorator.init()},!0),r.transitionsEnabled&&this.intro&&(n=new ag(this,this.intro,!0),fu.registerTransition(n),fu.scheduleTask(function(){return n.start()},!0),this.transition=n),this.node.autofocus&&fu.scheduleTask(function(){return i.node.focus()},!0),Kr(this),this.node}function Zr(t){var e,n;return(e=t.getAttribute("xmlns"))?e:"svg"===t.name?ia.svg:(n=t.parent)?"foreignObject"===n.name?ia.html:n.node.namespaceURI:t.root.el.namespaceURI}function Hr(t){var e,n,i;if(t.select&&void 0!==(n=t.select.getAttribute("value")))if(e=t.getAttribute("value"),t.select.node.multiple&&s(n)){for(i=n.length;i--;)if(e==n[i]){t.node.selected=!0;break}}else t.node.selected=e==n}function Kr(t){var e,n,i,r,s;e=t.root;do{for(n=e._liveQueries,i=n.length;i--;)r=n[i],s=n["_"+r],s._test(t)&&(t.liveQueries||(t.liveQueries=[])).push(s)}while(e=e.parent)}function Gr(t){var e,n,i;if(void 0===(e=t.getAttribute("value"))||!t.select)return!1;if((n=t.select.getAttribute("value"))==e)return!0;if(t.select.getAttribute("multiple")&&s(n))for(i=n.length;i--;)if(n[i]==e)return!0}function Yr(t){var e,n,i,r;if(e=t.attributes,n=e.type,i=e.value,r=e.name,n&&"radio"===n.value&&i&&r.interpolator)return i.value===r.interpolator.value||void 0}function Jr(t){var e=t.toString();return e?" "+e:""}function Xr(){this.fragment&&this.fragment.unbind(),this.binding&&this.binding.unbind(),this.eventHandlers&&this.eventHandlers.forEach(Z),"option"===this.name&&Tr(this),this.attributes.forEach(Z),this.conditionalAttributes.forEach(Z)}function ts(t){var e,n,i;(i=this.transition)&&i.complete(),"option"===this.name?this.detach():t&&fu.detachWhenReady(this),this.fragment&&this.fragment.unrender(!1),(e=this.binding)&&(this.binding.unrender(),this.node._ractive.binding=null,n=this.root._twowayBindings[e.keypath.str],n.splice(n.indexOf(e),1)),this.eventHandlers&&this.eventHandlers.forEach(H),this.decorator&&fu.registerDecorator(this.decorator),this.root.transitionsEnabled&&this.outro&&(i=new ag(this,this.outro,!1),fu.registerTransition(i),fu.scheduleTask(function(){return i.start()})),this.liveQueries&&es(this),"form"===this.name&&Ir(this)}function es(t){var e,n;for(n=t.liveQueries.length;n--;)e=t.liveQueries[n],e.selector,e._remove(t.node)}function ns(t,e){var n=mg.exec(e)[0];return null===t||n.length<t.length?n:t}function is(t,e,n){var i;if(i=rs(t,e,n||{}))return i;if(i=ed.fromId(e,{noThrow:!0})){i=vg(i);var r=ed.parse(i,ed.getParseOptions(t));return t.partials[e]=r.t}}function rs(t,e,n){var i=void 0,r=as(e,n.owner);if(r)return r;var s=y("partials",t,e);if(s){
if(r=s.partials[e],"function"==typeof r&&(i=r.bind(s),i.isOwner=s.partials.hasOwnProperty(e),r=i.call(t,ed)),!r&&""!==r)return void m(Fa,e,"partial","partial",{ractive:t});if(!ed.isParsed(r)){var o=ed.parse(r,ed.getParseOptions(s));o.p&&m("Partials ({{>%s}}) cannot contain nested inline partials",e,{ractive:t});(i?s:ss(s,e)).partials[e]=r=o.t}return i&&(r._fn=i),r.v?r.t:r}}function ss(t,e){return t.partials.hasOwnProperty(e)?t:os(t.constructor,e)}function os(t,e){if(t)return t.partials.hasOwnProperty(e)?t:os(t._Parent,e)}function as(t,e){if(e){if(e.template&&e.template.p&&e.template.p[t])return e.template.p[t];if(e.parentFragment&&e.parentFragment.owner)return as(t,e.parentFragment.owner)}}function us(t,e){var n,i=y("components",t,e);if(i&&(n=i.components[e],!n._Parent)){var r=n.bind(i);if(r.isOwner=i.components.hasOwnProperty(e),!(n=r()))return void m(Fa,e,"component","component",{ractive:t});"string"==typeof n&&(n=us(t,n)),n._fn=r,i.components[e]=n}return n}function hs(){var t=this.instance.fragment.detach();return Sg.fire(this.instance),t}function cs(t){return this.instance.fragment.find(t)}function ls(t,e){return this.instance.fragment.findAll(t,e)}function fs(t,e){e._test(this,!0),this.instance.fragment&&this.instance.fragment.findAllComponents(t,e)}function ds(t){return t&&t!==this.name?this.instance.fragment?this.instance.fragment.findComponent(t):null:this.instance}function ps(){return this.parentFragment.findNextNode(this)}function ms(){return this.rendered?this.instance.fragment.firstNode():null}function vs(t,e,n){function i(t){var n,i;t.value=e,t.updating||(i=t.ractive,n=t.keypath,t.updating=!0,fu.start(i),i.viewmodel.mark(n),fu.end(),t.updating=!1)}var r,s,o,a,u,h;if(r=t.obj,s=t.prop,n&&!n.configurable){if("length"===s)return;throw new Error('Cannot use magic mode with property "'+s+'" - object is not configurable')}n&&(o=n.get,a=n.set),u=o||function(){return e},h=function(t){a&&a(t),e=o?o():t,h._ractiveWrappers.forEach(i)},h._ractiveWrappers=[t],Object.defineProperty(r,s,{get:u,set:h,enumerable:!0,configurable:!0})}function gs(t,e){var n,i,r,s;if(this.adaptors)for(n=this.adaptors.length,i=0;i<n;i+=1)if(r=this.adaptors[i],r.filter(e,t,this.ractive))return s=this.wrapped[t]=r.wrap(this.ractive,e,t,bs(t)),void(s.value=e)}function ys(t,e){var n,i={};if(!e)return t;e+=".";for(n in t)t.hasOwnProperty(n)&&(i[e+n]=t[n]);return i}function bs(t){var e;return Gg[t]||(e=t?t+".":"",Gg[t]=function(n,i){var r;return"string"==typeof n?(r={},r[e+n]=i,r):"object"==typeof n?e?ys(n,t):n:void 0}),Gg[t]}function ws(t){var e,n,i=[qa];for(e=t.length;e--;)for(n=t[e].parent;n&&!n.isRoot;)t.indexOf(n)===-1&&F(i,n),n=n.parent;return i}function xs(t,e,n){var i;Es(t,e),n||(i=e.wildcardMatches(),i.forEach(function(n){ks(t,n,e)}))}function ks(t,e,n){var i,r,s;e=e.str||e,i=t.depsMap.patternObservers,(r=i&&i[e])&&r.forEach(function(e){s=n.join(e.lastKey),Es(t,s),ks(t,e,s)})}function Es(t,e){t.patternObservers.forEach(function(t){t.regex.test(e.str)&&t.update(e)})}function _s(){function t(t){var i=t.key;t.viewmodel===o?(o.clearCache(i.str),t.invalidate(),n.push(i),e(i)):t.viewmodel.mark(i)}function e(n){var i,r;o.noCascade.hasOwnProperty(n.str)||((r=o.deps.computed[n.str])&&r.forEach(t),(i=o.depsMap.computed[n.str])&&i.forEach(e))}var n,i,r,s=this,o=this,a={};if(n=this.changes,n.length)return n.slice().forEach(e),i=Yg(n),i.forEach(function(e){var i;n.indexOf(e)===-1&&(i=o.deps.computed[e.str])&&i.forEach(t)}),this.changes=[],this.patternObservers.length&&(i.forEach(function(t){return Jg(s,t,!0)}),n.forEach(function(t){return Jg(s,t)})),this.deps.observers&&(i.forEach(function(t){return As(s,null,t,"observers")}),Cs(this,n,"observers")),this.deps.default&&(r=[],i.forEach(function(t){return As(s,r,t,"default")}),r.length&&Ss(this,r,n),Cs(this,n,"default")),n.forEach(function(t){a[t.str]=s.get(t)}),this.implicitChanges={},this.noCascade={},a}function As(t,e,n,i){var r,s;(r=Os(t,n,i))&&(s=t.get(n),r.forEach(function(t){e&&t.refineValue?e.push(t):t.setValue(s)}))}function Ss(t,e,n){e.forEach(function(e){for(var i=!1,r=0,s=n.length,o=[];r<s;){var a=n[r];if(a===e.keypath){i=!0;break}a.slice(0,e.keypath.length)===e.keypath&&o.push(a),r++}i&&e.setValue(t.get(e.keypath)),o.length&&e.refineValue(o)})}function Cs(t,e,n){function i(t){t.forEach(r),t.forEach(s)}function r(e){var i=Os(t,e,n);i&&a.push({keypath:e,deps:i})}function s(e){var r;(r=t.depsMap[n][e.str])&&i(r)}function o(e){var n=t.get(e.keypath);e.deps.forEach(function(t){return t.setValue(n)})}var a=[];i(e),a.forEach(o)}function Os(t,e,n){var i=t.deps[n];return i?i[e.str]:null}function Ps(){this.captureGroups.push([])}function Ts(t,e){var n,i;if(e||(i=this.wrapped[t])&&i.teardown()!==!1&&(this.wrapped[t]=null),this.cache[t]=void 0,n=this.cacheMap[t])for(;n.length;)this.clearCache(n.pop())}function Fs(t,e){var n=e.firstKey;return!(n in t.data||n in t.computations||n in t.mappings)}function Rs(t,e){var n=new sy(t,e);return this.ready&&n.init(this),this.computations[t.str]=n}function js(t,e){var n,i,r,s,o,a=this.cache,u=t.str;if(e=e||hy,e.capture&&(s=D(this.captureGroups))&&(~s.indexOf(t)||s.push(t)),Aa.call(this.mappings,t.firstKey))return this.mappings[t.firstKey].get(t,e);if(t.isSpecial)return t.value;if(void 0===a[u]?((i=this.computations[u])&&!i.bypass?(n=i.get(),this.adapt(u,n)):(r=this.wrapped[u])?n=r.value:t.isRoot?(this.adapt("",this.data),n=this.data):n=Ns(this,t),a[u]=n):n=a[u],!e.noUnwrap&&(r=this.wrapped[u])&&(n=r.get()),t.isRoot&&e.fullRootGet)for(o in this.mappings)n[o]=this.mappings[o].getValue();return n===ay?void 0:n}function Ns(t,e){var n,i,r,s;if(n=t.get(e.parent),(s=t.wrapped[e.parent.str])&&(n=s.get()),null!==n&&void 0!==n)return(i=t.cacheMap[e.parent.str])?i.indexOf(e.str)===-1&&i.push(e.str):t.cacheMap[e.parent.str]=[e.str],"object"!=typeof n||e.lastKey in n?(r=n[e.lastKey],t.adapt(e.str,r,!1),t.cache[e.str]=r,r):t.cache[e.str]=ay}function Ds(){var t;for(t in this.computations)this.computations[t].init(this)}function Is(t,e){var n=this.mappings[t.str]=new fy(t,e);return n.initViewmodel(this),n}function Ls(t,e){var n,i=t.str;e&&(e.implicit&&(this.implicitChanges[i]=!0),e.noCascade&&(this.noCascade[i]=!0)),(n=this.computations[i])&&n.invalidate(),this.changes.indexOf(t)===-1&&this.changes.push(t);var r=!!e&&e.keepExistingWrapper;this.clearCache(i,r),this.ready&&this.onchange()}function Vs(t,e,n,i){var r,s,o,a;if(this.mark(t),i&&i.compare){o=Us(i.compare);try{r=e.map(o),s=n.map(o)}catch(i){m('merge(): "%s" comparison failed. Falling back to identity checking',t),r=e,s=n}}else r=e,s=n;a=py(r,s),this.smartUpdate(t,n,a,e.length!==n.length)}function Ms(t){return JSON.stringify(t)}function Us(t){if(t===!0)return Ms;if("string"==typeof t)return vy[t]||(vy[t]=function(e){return e[t]}),vy[t];if("function"==typeof t)return t;throw new Error("The `compare` option must be a function, or a string representing an identifying field (or `true` to use JSON.stringify)")}function Ws(t,e){var n,i,r,s=void 0===arguments[2]?"default":arguments[2];e.isStatic||((n=this.mappings[t.firstKey])?n.register(t,e,s):(i=this.deps[s]||(this.deps[s]={}),r=i[t.str]||(i[t.str]=[]),r.push(e),this.depsMap[s]||(this.depsMap[s]={}),t.isRoot||zs(this,t,s)))}function zs(t,e,n){for(var i,r,s;!e.isRoot;)i=t.depsMap[n],r=i[e.parent.str]||(i[e.parent.str]=[]),s=e.str,void 0===r["_"+s]&&(r["_"+s]=0,r.push(e)),r["_"+s]+=1,e=e.parent}function Bs(){return this.captureGroups.pop()}function qs(t){this.data=t,this.clearCache("")}function $s(t,e){var n,i,r,s,o=void 0===arguments[2]?{}:arguments[2];if(!o.noMapping&&(n=this.mappings[t.firstKey]))return n.set(t,e);if(i=this.computations[t.str]){if(i.setting)return;i.set(e),e=i.get()}a(this.cache[t.str],e)||(r=this.wrapped[t.str],r&&r.reset&&(s=r.reset(e)!==!1)&&(e=r.get()),i||s||Qs(this,t,e),o.silent?this.clearCache(t.str):this.mark(t))}function Qs(t,e,n){var i,r,s,o;s=function(){i.set?i.set(e.lastKey,n):(r=i.get(),o())},o=function(){r||(r=qg(e.lastKey),t.set(e.parent,r,{silent:!0})),r[e.lastKey]=n},i=t.wrapped[e.parent.str],i?s():(r=t.get(e.parent),(i=t.wrapped[e.parent.str])?s():o())}function Zs(t,e,n){var i,r,s,o=this;if(r=n.length,n.forEach(function(e,n){e===-1&&o.mark(t.join(n),Ey)}),this.set(t,e,{silent:!0}),(i=this.deps.default[t.str])&&i.filter(Hs).forEach(function(t){return t.shuffle(n,e)}),r!==e.length){for(this.mark(t.join("length"),ky),s=n.touchedFrom;s<e.length;s+=1)this.mark(t.join(s));for(s=e.length;s<r;s+=1)this.mark(t.join(s),Ey)}}function Hs(t){return"function"==typeof t.shuffle}function Ks(){var t,e=this;for(Object.keys(this.cache).forEach(function(t){return e.clearCache(t)});t=this.unresolvedImplicitDependencies.pop();)t.teardown()}function Gs(t,e){var n,i,r,s=void 0===arguments[2]?"default":arguments[2];if(!e.isStatic){if(n=this.mappings[t.firstKey])return n.unregister(t,e,s);if(i=this.deps[s][t.str],(r=i.indexOf(e))===-1)throw new Error("Attempted to remove a dependant that was no longer registered! This should not happen. If you are seeing this bug in development please raise an issue at https://github.com/RactiveJS/Ractive/issues - thanks");i.splice(r,1),t.isRoot||Ys(this,t,s)}}function Ys(t,e,n){for(var i,r;!e.isRoot;)i=t.depsMap[n],r=i[e.parent.str],r["_"+e.str]-=1,r["_"+e.str]||(I(r,e),r["_"+e.str]=void 0),e=e.parent}function Js(t){this.hook=new Xa(t),this.inProcess={},this.queue={}}function Xs(t,e){return t[e._guid]||(t[e._guid]=[])}function to(t,e){var n=Xs(t.queue,e);for(t.hook.fire(e);n.length;)to(t,n.shift());delete t.queue[e._guid]}function eo(t,e){var n,i={};for(n in e)i[n]=no(t,n,e[n]);return i}function no(t,e,n){var i,r;return"function"==typeof n&&(i=ro(n,t)),"string"==typeof n&&(i=io(t,n)),"object"==typeof n&&("string"==typeof n.get?i=io(t,n.get):"function"==typeof n.get?i=ro(n.get,t):l("`%s` computation must have a `get()` method",e),"function"==typeof n.set&&(r=ro(n.set,t))),{getter:i,setter:r}}function io(t,e){var n,i,r;return n="return ("+e.replace(Ty,function(t,e){return i=!0,'__ractive.get("'+e+'")'})+");",i&&(n="var __ractive = this; "+n),r=new Function(n),i?r.bind(t):r}function ro(t,e){return/this/.test(t.toString())?t.bind(e):t}function so(e){var n,r,s=void 0===arguments[1]?{}:arguments[1],o=void 0===arguments[2]?{}:arguments[2];if(Vb.DEBUG&&_a(),uo(e,o),wa(e,"data",{get:ho}),Fy.fire(e,s),Dy.forEach(function(t){e[t]=i(ba(e.constructor[t]||null),s[t])}),r=new Cy({adapt:oo(e,e.adapt,s),data:Lh.init(e.constructor,e,s),computed:Py(e,i(ba(e.constructor.prototype.computed),s.computed)),mappings:o.mappings,ractive:e,onchange:function(){return fu.addRactive(e)}}),e.viewmodel=r,r.init(),dd.init(e.constructor,e,s),Ry.fire(e),jy.begin(e),e.template){var a=void 0;(o.cssIds||e.cssId)&&(a=o.cssIds?o.cssIds.slice():[],e.cssId&&a.push(e.cssId)),e.fragment=new lb({template:e.template,root:e,owner:e,cssIds:a})}if(jy.end(e),n=t(e.el)){var u=e.render(n,e.append);Vb.DEBUG_PROMISES&&u.catch(function(t){throw v("Promise debugging is enabled, to help solve errors that happen asynchronously. Some browsers will log unhandled promise rejections, in which case you can safely disable promise debugging:\n  Ractive.DEBUG_PROMISES = false;"),m("An error happened during rendering",{ractive:e}),t.stack&&f(t.stack),t})}}function oo(t,e,n){function i(e){return"string"==typeof e&&((e=g("adaptors",t,e))||l(Ra(e,"adaptor"))),e}var r,s,o;if(e=e.map(i),r=N(n.adapt).map(i),r=ao(e,r),s="magic"in n?n.magic:t.magic,o="modifyArrays"in n?n.modifyArrays:t.modifyArrays,s){if(!na)throw new Error("Getters and setters (magic mode) are not supported in this browser");o&&r.push(Hg),r.push(Zg)}return o&&r.push(zg),r}function ao(t,e){for(var n=t.slice(),i=e.length;i--;)~n.indexOf(e[i])||n.push(e[i]);return n}function uo(t,e){t._guid="r-"+Ny++,t._subs=ba(null),t._config={},t._twowayBindings=ba(null),t._animations=[],t.nodes={},t._liveQueries=[],t._liveComponentQueries=[],t._boundFunctions=[],t._observers=[],e.component?(t.parent=e.parent,t.container=e.container||null,t.root=t.parent.root,t.component=e.component,e.component.instance=t,t._inlinePartials=e.inlinePartials):(t.root=t,t.parent=t.container=null)}function ho(){throw new Error("Using `ractive.data` is no longer supported - you must use the `ractive.get()` API instead")}function co(t,e,n){this.parentFragment=t.parentFragment,this.callback=n,this.fragment=new lb({template:e,root:t.root,owner:this}),this.update()}function lo(t,e,n){var i;return e.r?i=Ud(t,e.r,n):e.x?i=new qd(t,t.parentFragment,e.x,n):e.rx&&(i=new Hd(t,e.rx,n)),i}function fo(t){return 1===t.length&&t[0].t===zh}function po(t,e){var n;for(n in e)e.hasOwnProperty(n)&&mo(t.instance,t.root,n,e[n])}function mo(t,e,n,i){"string"!=typeof i&&l("Components currently only support simple events - you cannot include arguments. Sorry!"),t.on(n,function(){var t,n;return arguments.length&&arguments[0]&&arguments[0].node&&(t=Array.prototype.shift.call(arguments)),n=Array.prototype.slice.call(arguments),Vu(e,i,{event:t,args:n}),!1})}function vo(t,e){var n,i;if(!e)throw new Error('Component "'+this.name+'" not found');n=this.parentFragment=t.parentFragment,i=n.root,this.root=i,this.type=Xh,this.name=t.template.e,this.index=t.index,this.indexRefBindings={},this.yielders={},this.resolvers=[],Vy(this,e,t.template.a,t.template.f,t.template.p),My(this,t.template.v),(t.template.t0||t.template.t1||t.template.t2||t.template.o)&&m('The "intro", "outro" and "decorator" directives have no effect on components',{ractive:this.instance}),Uy(this)}function go(t,e){function n(n){n.rebind(t,e)}var i;this.resolvers.forEach(n);for(var r in this.yielders)this.yielders[r][0]&&n(this.yielders[r][0]);(i=this.root._liveComponentQueries["_"+this.name])&&i._makeDirty()}function yo(){var t=this.instance;return t.render(this.parentFragment.getNode()),this.rendered=!0,t.fragment.detach()}function bo(){return this.instance.fragment.toString()}function wo(){var t=this.instance;this.resolvers.forEach(Z),xo(this),t._observers.forEach(K),t.fragment.unbind(),t.viewmodel.teardown(),t.fragment.rendered&&t.el.__ractive_instances__&&I(t.el.__ractive_instances__,t),Qy.fire(t)}function xo(t){var e,n;e=t.root;do{(n=e._liveComponentQueries["_"+t.name])&&n._remove(t)}while(e=e.parent)}function ko(t){this.shouldDestroy=t,this.instance.unrender()}function Eo(t){var e=this;this.owner=t.owner,this.parent=this.owner.parentFragment,this.root=t.root,this.pElement=t.pElement,this.context=t.context,this.index=t.index,this.key=t.key,this.registeredIndexRefs=[],this.cssIds="cssIds"in t?t.cssIds:this.parent?this.parent.cssIds:null,this.items=t.template.map(function(n,i){return _o({parentFragment:e,pElement:t.pElement,template:n,index:i})}),this.value=this.argsList=null,this.dirtyArgs=this.dirtyValue=!0,this.bound=!0}function _o(t){if("string"==typeof t.template)return new Od(t);switch(t.template.t){case tc:return new Xy(t);case zh:return new tp(t);case qh:return new wp(t);case Bh:return new Vp(t);case Zh:var e=void 0;return(e=_g(t.parentFragment.root,t.template.e))?new Ky(t,e):new dg(t);case Hh:return new Eg(t);case Kh:return new Yy(t);case nc:return new eb(t);default:throw new Error("Something very strange happened. Please file an issue at https://github.com/ractivejs/ractive/issues. Thanks!")}}function Ao(t,e){this.owner&&!this.owner.hasContext||k(this,"context",t,e),this.items.forEach(function(n){n.rebind&&n.rebind(t,e)})}function So(){var t;return 1===this.items.length?t=this.items[0].render():(t=document.createDocumentFragment(),this.items.forEach(function(e){t.appendChild(e.render())})),this.rendered=!0,t}function Co(t){return this.items?this.items.map(t?Po:Oo).join(""):""}function Oo(t){return t.toString()}function Po(t){return t.toString(!0)}function To(){this.bound&&(this.items.forEach(Fo),this.bound=!1)}function Fo(t){t.unbind&&t.unbind()}function Ro(t){if(!this.rendered)throw new Error("Attempted to unrender a fragment that was not rendered");this.items.forEach(function(e){return e.unrender(t)}),this.rendered=!1}function jo(t){var e,n,i,r,s;if("object"!=typeof(t=t||{}))throw new Error("The reset method takes either no arguments, or an object containing new data");for((n=this.viewmodel.wrapped[""])&&n.reset?n.reset(t)===!1&&this.viewmodel.reset(t):this.viewmodel.reset(t),i=dd.reset(this),r=i.length;r--;)if(db.indexOf(i[r])>-1){s=!0;break}if(s){var o=void 0;this.viewmodel.mark(qa),(o=this.component)&&(o.shouldDestroy=!0),this.unrender(),o&&(o.shouldDestroy=!1),this.fragment.template!==this.template&&(this.fragment.unbind(),this.fragment=new lb({template:this.template,root:this,owner:this})),e=this.render(this.el,this.anchor)}else e=fu.start(this,!0),this.viewmodel.mark(qa),fu.end();return pb.fire(this,t),e}function No(t){var e,n;id.init(null,this,{template:t}),e=this.transitionsEnabled,this.transitionsEnabled=!1,(n=this.component)&&(n.shouldDestroy=!0),this.unrender(),n&&(n.shouldDestroy=!1),this.fragment.unbind(),this.fragment=new lb({template:this.template,root:this,owner:this}),this.render(this.el,this.anchor),this.transitionsEnabled=e}function Do(t,e){var n,i;if(i=fu.start(this,!0),h(t)){n=t;for(t in n)n.hasOwnProperty(t)&&(e=n[t],Io(this,t,e))}else Io(this,t,e);return fu.end(),i}function Io(t,e,n){e=_(C(e)),e.isPattern?A(t,e).forEach(function(e){t.viewmodel.set(e,n)}):t.viewmodel.set(e,n)}function Lo(t,e){return $a(this,t,void 0===e?-1:-e)}function Vo(){var t;return this.fragment.unbind(),this.viewmodel.teardown(),this._observers.forEach(K),this.fragment.rendered&&this.el.__ractive_instances__&&I(this.el.__ractive_instances__,this),this.shouldDestroy=!0,t=this.fragment.rendered?this.unrender():iu.resolve(),_b.fire(this),this._boundFunctions.forEach(Mo),t}function Mo(t){delete t.fn[t.prop]}function Uo(t){var e=this;if("string"!=typeof t)throw new TypeError(Ta);var n=void 0;return/\*/.test(t)?(n={},A(this,_(C(t))).forEach(function(t){n[t.str]=!e.viewmodel.get(t)}),this.set(n)):this.set(t,!this.get(t))}function Wo(){return this.fragment.toString(!0)}function zo(){var t,e;if(!this.fragment.rendered)return m("ractive.unrender() was called on a Ractive instance that was not rendered"),iu.resolve();for(t=fu.start(this,!0),e=!this.component||this.component.shouldDestroy||this.shouldDestroy;this._animations[0];)this._animations[0].stop();return this.fragment.unrender(e),I(this.el.__ractive_instances__,this),Ob.fire(this),fu.end(),t}function Bo(t){var e;return t=_(t)||qa,e=fu.start(this,!0),this.viewmodel.mark(t),fu.end(),Fb.fire(this,t),e}function qo(t,e){var n,i,r;if("string"!=typeof t||e){r=[];for(i in this._twowayBindings)t&&!_(i).equalsOrStartsWith(t)||r.push.apply(r,this._twowayBindings[i])}else r=this._twowayBindings[t];return n=$o(this,r),this.set(n)}function $o(t,e){var n={},i=[];return e.forEach(function(t){var e,r;if(!t.radioName||t.element.node.checked){if(t.checkboxName)return void(i[t.keypath.str]||t.changed()||(i.push(t.keypath),i[t.keypath.str]=t));e=t.attribute.value,r=t.getValue(),j(e,r)||a(e,r)||(n[t.keypath.str]=r)}}),i.length&&i.forEach(function(t){var e,r,s;e=i[t.str],r=e.attribute.value,s=e.getValue(),j(r,s)||(n[t.str]=s)}),n}function Qo(t,e){return"function"==typeof e&&/_super/.test(t)}function Zo(t){for(var e={};t;)Ho(t,e),Go(t,e),t=t._Parent!==Vb&&t._Parent;return e}function Ho(t,e){cd.forEach(function(n){Ko(n.useDefaults?t.prototype:t,e,n.name)})}function Ko(t,e,n){var i,r=Object.keys(t[n]);r.length&&((i=e[n])||(i=e[n]={}),r.filter(function(t){return!(t in i)}).forEach(function(e){return i[e]=t[n][e]}))}function Go(t,e){Object.keys(t.prototype).forEach(function(n){if("computed"!==n){var i=t.prototype[n];if(n in e){if("function"==typeof e[n]&&"function"==typeof i&&e[n]._method){var r=void 0,s=i._method;s&&(i=i._method),r=Nb(e[n]._method,i),s&&(r._method=r),e[n]=r}}else e[n]=i._method?i._method:i}})}function Yo(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return e.length?e.reduce(Jo,this):Jo(this)}function Jo(t){var e,n,r=void 0===arguments[1]?{}:arguments[1];return r.prototype instanceof Vb&&(r=Db(r)),e=function(t){if(!(this instanceof e))return new e(t);Iy(this,t)},n=ba(t.prototype),n.constructor=e,xa(e,{defaults:{value:n},extend:{value:Yo,writable:!0,configurable:!0},_Parent:{value:t}}),dd.extend(t,n,r),Lh.extend(t,n,r),r.computed&&(n.computed=i(ba(t.prototype.computed),r.computed)),e.prototype=n,e}var Xo,ta,ea,na,ia,ra,sa,oa=3,aa={el:void 0,append:!1,template:{v:oa,t:[]},preserveWhitespace:!1,sanitize:!1,stripComments:!0,delimiters:["{{","}}"],tripleDelimiters:["{{{","}}}"],interpolate:!1,data:{},computed:{},magic:!1,modifyArrays:!0,adapt:[],isolated:!1,twoway:!0,lazy:!1,noIntro:!1,transitionsEnabled:!0,complete:void 0,css:null,noCssTransform:!1},ua=aa,ha={linear:function(t){return t},easeIn:function(t){return Math.pow(t,3)},easeOut:function(t){return Math.pow(t-1,3)+1},easeInOut:function(t){return(t/=.5)<1?.5*Math.pow(t,3):.5*(Math.pow(t-2,3)+2)}};Xo="object"==typeof document,ta="undefined"!=typeof navigator&&/jsDom/.test(navigator.appName),ea="undefined"!=typeof console&&"function"==typeof console.warn&&"function"==typeof console.warn.apply;try{Object.defineProperty({},"test",{value:0}),na=!0}catch(t){na=!1}ia={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},ra="undefined"!=typeof document&&(document&&document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")),sa=["o","ms","moz","webkit"];var ca,la,fa,da,pa,ma,va,ga,ya;if(ca=ra?function(t,e){return e&&e!==ia.html?document.createElementNS(e,t):document.createElement(t)}:function(t,e){if(e&&e!==ia.html)throw"This browser does not support namespaces other than http://www.w3.org/1999/xhtml. The most likely cause of this error is that you're trying to render SVG in an older browser. See http://docs.ractivejs.org/latest/svg-and-older-browsers for more information";return document.createElement(t)},Xo){for(fa=ca("div"),da=["matches","matchesSelector"],ya=function(t){return function(e,n){return e[t](n)}},va=da.length;va--&&!la;)if(pa=da[va],fa[pa])la=ya(pa);else for(ga=sa.length;ga--;)if(ma=sa[va]+pa.substr(0,1).toUpperCase()+pa.substring(1),fa[ma]){la=ya(ma);break}la||(la=function(t,e){var n,i,r;for(i=t.parentNode,i||(fa.innerHTML="",i=fa,t=t.cloneNode(),fa.appendChild(t)),n=i.querySelectorAll(e),r=n.length;r--;)if(n[r]===t)return!0;return!1})}else la=null;var ba,wa,xa;try{Object.defineProperty({},"test",{value:0}),Xo&&Object.defineProperty(document.createElement("div"),"test",{value:0}),wa=Object.defineProperty}catch(t){wa=function(t,e,n){t[e]=n.value}}try{try{Object.defineProperties({},{test:{value:0}})}catch(t){throw t}Xo&&Object.defineProperties(ca("div"),{test:{value:0}}),xa=Object.defineProperties}catch(t){xa=function(t,e){var n;for(n in e)e.hasOwnProperty(n)&&wa(t,n,e[n])}}try{Object.create(null),ba=Object.create}catch(t){ba=function(){var t=function(){};return function(e,n){var i;return null===e?{}:(t.prototype=e,i=new t,n&&Object.defineProperties(i,n),i)}}()}var ka,Ea,_a,Aa=Object.prototype.hasOwnProperty,Sa=Object.prototype.toString,Ca=/^\[object (?:Array|FileList)\]$/,Oa=function(){},Pa={};ea?function(){var t=["%cRactive.js %c0.7.3 %cin debug mode, %cmore...","color: rgb(114, 157, 52); font-weight: normal;","color: rgb(85, 85, 85); font-weight: normal;","color: rgb(85, 85, 85); font-weight: normal;","color: rgb(82, 140, 224); font-weight: normal; text-decoration: underline;"];_a=function(){var e=!!console.groupCollapsed;console[e?"groupCollapsed":"log"].apply(console,t),console.log("You're running Ractive 0.7.3 in debug mode - messages will be printed to the console to help you fix problems and optimise your application.\n\nTo disable debug mode, add this line at the start of your app:\n  Ractive.DEBUG = false;\n\nTo disable debug mode when your app is minified, add this snippet:\n  Ractive.DEBUG = /unminified/.test(function(){/*unminified*/});\n\nGet help and support:\n  http://docs.ractivejs.org\n  http://stackoverflow.com/questions/tagged/ractivejs\n  http://groups.google.com/forum/#!forum/ractive-js\n  http://twitter.com/ractivejs\n\nFound a bug? Raise an issue:\n  https://github.com/ractivejs/ractive/issues\n\n"),e&&console.groupEnd(t),_a=Oa},Ea=function(t,e){if(_a(),"object"==typeof e[e.length-1]){var n=e.pop(),i=n?n.ractive:null;if(i){var r=void 0;i.component&&(r=i.component.name)&&(t="<"+r+"> "+t);var s=void 0;(s=n.node||i.fragment&&i.fragment.rendered&&i.find("*"))&&e.push(s)}}console.warn.apply(console,["%cRactive.js: %c"+t,"color: rgb(114, 157, 52);","color: rgb(85, 85, 85);"].concat(e))},ka=function(){console.log.apply(console,arguments)}}():Ea=ka=_a=Oa;var Ta="Bad arguments",Fa='A function was specified for "%s" %s, but no %s was returned',Ra=function(t,e){return'Missing "'+t+'" '+e+" plugin. You may need to download a plugin via http://docs.ractivejs.org/latest/plugins#"+e+"s"},ja=function(t,e,n,i){if(t===e)return b(e);if(i){var r=g("interpolators",n,i);if(r)return r(t,e)||b(e);l(Ra(i,"interpolator"))}return Ia.number(t,e)||Ia.array(t,e)||Ia.object(t,e)||b(e)},Na=ja,Da={number:function(t,e){var n;return u(t)&&u(e)?(t=+t,e=+e,n=e-t,n?function(e){return t+e*n}:function(){return t}):null},array:function(t,e){var n,i,r,o;if(!s(t)||!s(e))return null;for(n=[],i=[],o=r=Math.min(t.length,e.length);o--;)i[o]=Na(t[o],e[o]);for(o=r;o<t.length;o+=1)n[o]=t[o];for(o=r;o<e.length;o+=1)n[o]=e[o];return function(t){for(var e=r;e--;)n[e]=i[e](t);return n}},object:function(t,e){var n,i,r,s,o;if(!h(t)||!h(e))return null;n=[],s={},r={};for(o in t)Aa.call(t,o)&&(Aa.call(e,o)?(n.push(o),r[o]=Na(t[o],e[o])):s[o]=t[o]);for(o in e)Aa.call(e,o)&&!Aa.call(t,o)&&(s[o]=e[o]);return i=n.length,function(t){for(var e,o=i;o--;)e=n[o],s[e]=r[e](t);return s}}},Ia=Da,La=w,Va={},Ma=/\[\s*(\*|[0-9]|[1-9][0-9]+)\s*\]/g,Ua=/\*/,Wa={},za=function(t){var e=t.split(".");this.str=t,"@"===t[0]&&(this.isSpecial=!0,this.value=E(t)),this.firstKey=e[0],this.lastKey=e.pop(),this.isPattern=Ua.test(t),this.parent=""===t?null:_(e.join(".")),this.isRoot=!t};za.prototype={equalsOrStartsWith:function(t){return t===this||this.startsWith(t)},join:function(t){return _(this.isRoot?String(t):this.str+"."+t)},replace:function(t,e){return this===t?e:this.startsWith(t)?null===e?e:_(this.str.replace(t.str+".",e.str+".")):void 0},startsWith:function(t){return!!t&&(t&&this.str.substr(0,t.str.length+1)===t.str+".")},toString:function(){throw new Error("Bad coercion")},valueOf:function(){throw new Error("Bad coercion")},wildcardMatches:function(){return this._wildcardMatches||(this._wildcardMatches=La(this.str))}};var Ba,qa=_(""),$a=O,Qa="Cannot add to a non-numeric value",Za=P;"undefined"==typeof window?Ba=null:(!function(t,e,n){var i,r;if(!n.requestAnimationFrame){for(i=0;i<t.length&&!n.requestAnimationFrame;++i)n.requestAnimationFrame=n[t[i]+"RequestAnimationFrame"];n.requestAnimationFrame||(r=n.setTimeout,n.requestAnimationFrame=function(t){var n,i,s;return n=Date.now(),i=Math.max(0,16-(n-e)),s=r(function(){t(n+i)},i),e=n+i,s})}}(sa,0,window),Ba=window.requestAnimationFrame);var Ha,Ka=Ba;Ha="undefined"!=typeof window&&window.performance&&"function"==typeof window.performance.now?function(){return window.performance.now()}:function(){return Date.now()};var Ga=Ha,Ya={construct:{deprecated:"beforeInit",replacement:"onconstruct"},render:{deprecated:"init",message:'The "init" method has been deprecated and will likely be removed in a future release. You can either use the "oninit" method which will fire only once prior to, and regardless of, any eventual ractive instance being rendered, or if you need to access the rendered DOM, use "onrender" instead. See http://docs.ractivejs.org/latest/migrating for more information.'},complete:{deprecated:"complete",replacement:"oncomplete"}};T.prototype.fire=function(t,e){function n(n){if(t[n])return e?t[n](e):t[n](),!0}n(this.method),!t[this.method]&&this.deprecate&&n(this.deprecate.deprecated)&&(this.deprecate.message?m(this.deprecate.message):m('The method "%s" has been deprecated in favor of "%s" and will likely be removed in a future release. See http://docs.ractivejs.org/latest/migrating for more information.',this.deprecate.deprecated,this.deprecate.replacement)),e?t.fire(this.event,e):t.fire(this.event)};var Ja,Xa=T,tu={},eu={},nu={};"function"==typeof Promise?Ja=Promise:(Ja=function(t){var e,n,i,r,s,o,a=[],u=[],h=tu;i=function(t){return function(i){h===tu&&(e=i,h=t,n=M(h===eu?a:u,e),V(n))}},r=i(eu),s=i(nu);try{t(r,s)}catch(t){s(t)}return o={then:function(t,e){var i=new Ja(function(r,s){var o=function(t,e,n){"function"==typeof t?e.push(function(e){var n;try{n=t(e),U(i,n,r,s)}catch(t){s(t)}}):e.push(n)};o(t,a,r),o(e,u,s),h!==tu&&V(n)});return i}},o.catch=function(t){return this.then(null,t)},o},Ja.all=function(t){return new Ja(function(e,n){var i,r,s,o=[];if(!t.length)return void e(o);for(s=function(t,r){t&&"function"==typeof t.then?t.then(function(t){o[r]=t,--i||e(o)},n):(o[r]=t,--i||e(o))},i=r=t.length;r--;)s(t[r],r)})},Ja.resolve=function(t){return new Ja(function(e){e(t)})},Ja.reject=function(t){return new Ja(function(e,n){n(t)})});var iu=Ja,ru=function(t){do{if(void 0!==t.context)return t.context}while(t=t.parent);return qa},su=W,ou=function(t,e){this.callback=t,this.parent=e,this.intros=[],this.outros=[],this.children=[],this.totalChildren=this.outroChildren=0,this.detachQueue=[],this.decoratorQueue=[],this.outrosComplete=!1,e&&e.addChild(this)};ou.prototype={addChild:function(t){this.children.push(t),this.totalChildren+=1,this.outroChildren+=1},decrementOutros:function(){this.outroChildren-=1,J(this)},decrementTotal:function(){this.totalChildren-=1,J(this)},add:function(t){(t.isIntro?this.intros:this.outros).push(t)},addDecorator:function(t){this.decoratorQueue.push(t)},remove:function(t){I(t.isIntro?this.intros:this.outros,t),J(this)},init:function(){this.ready=!0,J(this)},detachNodes:function(){this.decoratorQueue.forEach(Q),this.detachQueue.forEach(G),this.children.forEach(Y)}};var au,uu,hu=ou,cu=[],lu=new Xa("change");uu={start:function(t,e){var n,i;return e&&(n=new iu(function(t){return i=t})),au={previousBatch:au,transitionManager:new hu(i,au&&au.transitionManager),views:[],tasks:[],ractives:[],instance:t},t&&au.ractives.push(t),n},end:function(){X(),au.transitionManager.init(),!au.previousBatch&&au.instance&&(au.instance.viewmodel.changes=[]),au=au.previousBatch},addRactive:function(t){au&&F(au.ractives,t)},registerTransition:function(t){t._manager=au.transitionManager,au.transitionManager.add(t)},registerDecorator:function(t){au.transitionManager.addDecorator(t)},addView:function(t){au.views.push(t)},addUnresolved:function(t){cu.push(t)},removeUnresolved:function(t){I(cu,t)},detachWhenReady:function(t){au.transitionManager.detachQueue.push(t)},scheduleTask:function(t,e){var n;if(au){for(n=au;e&&n.previousBatch;)n=n.previousBatch;n.tasks.push(t)}else t()}};var fu=uu,du=[],pu={tick:function(){var t,e,n;for(n=Ga(),fu.start(),t=0;t<du.length;t+=1)e=du[t],e.tick(n)||du.splice(t--,1);fu.end(),du.length?Ka(pu.tick):pu.running=!1},add:function(t){du.push(t),pu.running||(pu.running=!0,Ka(pu.tick))},abort:function(t,e){for(var n,i=du.length;i--;)n=du[i],n.root===e&&n.keypath===t&&n.stop()}},mu=pu,vu=function(t){var e;this.startTime=Date.now();for(e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);this.interpolator=Na(this.from,this.to,this.root,this.interpolator),this.running=!0,this.tick()};vu.prototype={tick:function(){var t,e,n,i,r,s;return s=this.keypath,!!this.running&&(i=Date.now(),(t=i-this.startTime)>=this.duration?(null!==s&&(fu.start(this.root),this.root.viewmodel.set(s,this.to),fu.end()),this.step&&this.step(1,this.to),this.complete(this.to),r=this.root._animations.indexOf(this),r===-1&&m("Animation was not found"),this.root._animations.splice(r,1),this.running=!1,!1):(e=this.easing?this.easing(t/this.duration):t/this.duration,null!==s&&(n=this.interpolator(e),fu.start(this.root),this.root.viewmodel.set(s,n),fu.end()),this.step&&this.step(e,n),!0))},stop:function(){var t
;this.running=!1,t=this.root._animations.indexOf(this),t===-1&&m("Animation was not found"),this.root._animations.splice(t,1)}};var gu=vu,yu=nt,bu={stop:Oa},wu=rt,xu=new Xa("detach"),ku=st,Eu=ot,_u=function(){var t,e,n;t=this._root[this._isComponentQuery?"liveComponentQueries":"liveQueries"],e=this.selector,(n=t.indexOf(e))!==-1&&(t.splice(n,1),t[e]=null)},Au=function(t,e){var n,i,r,s,o,a,u,h,c,l;for(n=ut(t.component||t._ractive.proxy),i=ut(e.component||e._ractive.proxy),r=D(n),s=D(i);r&&r===s;)n.pop(),i.pop(),o=r,r=D(n),s=D(i);if(r=r.component||r,s=s.component||s,c=r.parentFragment,l=s.parentFragment,c===l)return a=c.items.indexOf(r),u=l.items.indexOf(s),a-u||n.length-i.length;if(h=o.fragments)return a=h.indexOf(c),u=h.indexOf(l),a-u||n.length-i.length;throw new Error("An unexpected condition was met while comparing the position of two components. Please file an issue at https://github.com/RactiveJS/Ractive/issues - thanks!")},Su=function(t,e){var n;return t.compareDocumentPosition?(n=t.compareDocumentPosition(e),2&n?1:-1):Au(t,e)},Cu=function(){this.sort(this._isComponentQuery?Au:Su),this._dirty=!1},Ou=function(){var t=this;this._dirty||(this._dirty=!0,fu.scheduleTask(function(){t._sort()}))},Pu=function(t){var e=this.indexOf(this._isComponentQuery?t.instance:t);e!==-1&&this.splice(e,1)},Tu=ht,Fu=ct,Ru=lt,ju=ft,Nu=dt,Du=pt,Iu={enqueue:function(t,e){t.event&&(t._eventQueue=t._eventQueue||[],t._eventQueue.push(t.event)),t.event=e},dequeue:function(t){t._eventQueue&&t._eventQueue.length?t.event=t._eventQueue.pop():delete t.event}},Lu=Iu,Vu=mt,Mu=yt,Uu=bt,Wu={capture:!0,noUnwrap:!0,fullRootGet:!0},zu=wt,Bu=new Xa("insert"),qu=kt,$u=function(t,e,n,i){this.root=t,this.keypath=e,this.callback=n,this.defer=i.defer,this.context=i&&i.context?i.context:t};$u.prototype={init:function(t){this.value=this.root.get(this.keypath.str),t!==!1?this.update():this.oldValue=this.value},setValue:function(t){var e=this;a(t,this.value)||(this.value=t,this.defer&&this.ready?fu.scheduleTask(function(){return e.update()}):this.update())},update:function(){this.updating||(this.updating=!0,this.callback.call(this.context,this.value,this.oldValue,this.keypath.str),this.oldValue=this.value,this.updating=!1)}};var Qu,Zu=$u,Hu=Et,Ku=Array.prototype.slice;Qu=function(t,e,n,i){this.root=t,this.callback=n,this.defer=i.defer,this.keypath=e,this.regex=new RegExp("^"+e.str.replace(/\./g,"\\.").replace(/\*/g,"([^\\.]+)")+"$"),this.values={},this.defer&&(this.proxies=[]),this.context=i&&i.context?i.context:t},Qu.prototype={init:function(t){var e,n;if(e=Hu(this.root,this.keypath),t!==!1)for(n in e)e.hasOwnProperty(n)&&this.update(_(n));else this.values=e},update:function(t){var e,n=this;if(t.isPattern){e=Hu(this.root,t);for(t in e)e.hasOwnProperty(t)&&this.update(_(t))}else if(!this.root.viewmodel.implicitChanges[t.str])return this.defer&&this.ready?void fu.scheduleTask(function(){return n.getProxy(t).update()}):void this.reallyUpdate(t)},reallyUpdate:function(t){var e,n,i,r;if(e=t.str,n=this.root.viewmodel.get(t),this.updating)return void(this.values[e]=n);this.updating=!0,a(n,this.values[e])&&this.ready||(i=Ku.call(this.regex.exec(e),1),r=[n,this.values[e],e].concat(i),this.values[e]=n,this.callback.apply(this.context,r)),this.updating=!1},getProxy:function(t){var e=this;return this.proxies[t.str]||(this.proxies[t.str]={update:function(){return e.reallyUpdate(t)}}),this.proxies[t.str]}};var Gu,Yu,Ju,Xu,th,eh,nh=Qu,ih=_t,rh={},sh=At,oh=St,ah=function(t){return t.trim()},uh=function(t){return""!==t},hh=Ct,ch=Ot,lh=Pt,fh=Tt,dh=Array.prototype,ph=function(t){return function(e){for(var n=arguments.length,i=Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];var o,a,u,h=[];if(e=_(C(e)),o=this.viewmodel.get(e),o.length,!s(o))throw new Error("Called ractive."+t+"('"+e.str+"'), but '"+e.str+"' does not refer to an array");return h=fh(o,t,i),u=dh[t].apply(o,i),a=fu.start(this,!0).then(function(){return u}),h?this.viewmodel.smartUpdate(e,o,h):this.viewmodel.mark(e),fu.end(),a}},mh=ph("pop"),vh=ph("push"),gh=[],yh=!1;Xo?(Ju=document.createElement("style"),Ju.type="text/css",Xu=document.getElementsByTagName("head")[0],eh=!1,th=Ju.styleSheet,Yu=function(){var t="/* Ractive.js component styles */\n"+gh.map(function(t){return"\n/* {"+t.id+"} */\n"+t.styles}).join("\n");th?th.cssText=t:Ju.innerHTML=t,eh||(Xu.appendChild(Ju),eh=!0)},Gu={add:function(t){gh.push(t),yh=!0},apply:function(){yh&&(Yu(),yh=!1)}}):Gu={add:Oa,apply:Oa};var bh,wh,xh=Gu,kh=Rt,Eh=new Xa("render"),_h=new Xa("complete"),Ah={extend:function(t,e,n){e.adapt=Nt(e.adapt,N(n.adapt))},init:function(){}},Sh=Ah,Ch=Dt,Oh=/(?:^|\})?\s*([^\{\}]+)\s*\{/g,Ph=/\/\*.*?\*\//g,Th=/((?:(?:\[[^\]+]\])|(?:[^\s\+\>\~:]))+)((?::[^\s\+\>\~\(]+(?:\([^\)]+\))?)?\s*[\s\+\>\~]?)\s*/g,Fh=/^@media/,Rh=/\[data-ractive-css~="\{[a-z0-9-]+\}"]/g,jh=1,Nh={name:"css",extend:function(t,e,n){if(n.css){var i=jh++,r=n.noCssTransform?n.css:Ch(n.css,i);e.cssId=i,xh.add({id:i,styles:r})}},init:function(){}},Dh=Nh,Ih={name:"data",extend:function(t,e,n){var i=void 0,r=void 0;if(n.data&&h(n.data))for(i in n.data)(r=n.data[i])&&"object"==typeof r&&(h(r)||s(r))&&m("Passing a `data` option with object and array properties to Ractive.extend() is discouraged, as mutating them is likely to cause bugs. Consider using a data function instead:\n\n  // this...\n  data: function () {\n    return {\n      myObject: {}\n    };\n  })\n\n  // instead of this:\n  data: {\n    myObject: {}\n  }");e.data=Mt(e.data,n.data)},init:function(t,e,n){var i=Mt(t.prototype.data,n.data);return"function"==typeof i&&(i=i.call(e)),i||{}},reset:function(t){var e=this.init(t.constructor,t,t.viewmodel);return t.viewmodel.reset(e),!0}},Lh=Ih;wh=function(t){this.name="ParseError",this.message=t;try{throw new Error(t)}catch(t){this.stack=t.stack}},wh.prototype=Error.prototype,bh=function(t,e){var n,i,r=0;for(this.str=t,this.options=e||{},this.pos=0,this.lines=this.str.split("\n"),this.lineEnds=this.lines.map(function(t){var e=r+t.length+1;return r=e,e},0),this.init&&this.init(t,e),n=[];this.pos<this.str.length&&(i=this.read());)n.push(i);this.leftover=this.remaining(),this.result=this.postProcess?this.postProcess(n,e):n},bh.prototype={read:function(t){var e,n,i,r;for(t||(t=this.converters),e=this.pos,i=t.length,n=0;n<i;n+=1)if(this.pos=e,r=t[n](this))return r;return null},getLinePos:function(t){for(var e,n=0,i=0;t>=this.lineEnds[n];)i=this.lineEnds[n],n+=1;return e=t-i,[n+1,e+1,t]},error:function(t){var e=this.getLinePos(this.pos),n=e[0],i=e[1],r=this.lines[e[0]-1],s=0,o=r.replace(/\t/g,function(t,n){return n<e[1]&&(s+=1),"  "})+"\n"+new Array(e[1]+s).join(" ")+"^----",a=new wh(t+" at line "+n+" character "+i+":\n"+o);throw a.line=e[0],a.character=e[1],a.shortMessage=t,a},matchString:function(t){if(this.str.substr(this.pos,t.length)===t)return this.pos+=t.length,t},matchPattern:function(t){var e;if(e=t.exec(this.remaining()))return this.pos+=e[0].length,e[1]||e[0]},allowWhitespace:function(){this.matchPattern(/^\s+/)},remaining:function(){return this.str.substring(this.pos)},nextChar:function(){return this.str.charAt(this.pos)}},bh.extend=function(t){var e,n,i=this;e=function(t,e){bh.call(this,t,e)},e.prototype=ba(i.prototype);for(n in t)Aa.call(t,n)&&(e.prototype[n]=t[n]);return e.extend=bh.extend,e};var Vh,Mh,Uh,Wh=bh,zh=2,Bh=3,qh=4,$h=5,Qh=6,Zh=7,Hh=8,Kh=9,Gh=10,Yh=13,Jh=14,Xh=15,tc=16,ec=17,nc=18,ic=20,rc=21,sc=22,oc=23,ac=24,uc=25,hc=26,cc=27,lc=30,fc=31,dc=32,pc=33,mc=34,vc=35,gc=36,yc=40,bc=50,wc=51,xc=52,kc=53,Ec=54,_c=60,Ac=61,Sc=zt,Cc=/^[^\s=]+/,Oc=/^\s+/,Pc=Bt,Tc=/^(\/(?:[^\n\r\u2028\u2029\/\\[]|\\.|\[(?:[^\n\r\u2028\u2029\]\\]|\\.)*])+\/(?:([gimuy])(?![a-z]*\2))*(?![a-zA-Z_$0-9]))/,Fc=qt,Rc={t:Gh,exclude:!0},jc="Expected a JavaScript expression",Nc="Expected closing paren",Dc=Qt,Ic=/^(?:[+-]?)0*(?:(?:(?:[1-9]\d*)?\.\d+)|(?:(?:0|[1-9]\d*)\.)|(?:0|[1-9]\d*))(?:[eE][+-]?\d+)?/,Lc=Zt;Vh=/^(?=.)[^"'\\]+?(?:(?!.)|(?=["'\\]))/,Mh=/^\\(?:['"\\bfnrt]|0(?![0-9])|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|(?=.)[^ux0-9])/,Uh=/^\\(?:\r\n|[\u000A\u000D\u2028\u2029])/;var Vc,Mc,Uc=function(t){return function(e){var n,i,r;for(e.pos,n='"',i=!1;!i;)r=e.matchPattern(Vh)||e.matchPattern(Mh)||e.matchString(t),r?n+='"'===r?'\\"':"\\'"===r?"'":r:(r=e.matchPattern(Uh),r?n+="\\u"+("000"+r.charCodeAt(1).toString(16)).slice(-4):i=!0);return n+='"',JSON.parse(n)}},Wc=Uc('"'),zc=Uc("'"),Bc=function(t){var e,n;return e=t.pos,t.matchString('"')?(n=zc(t),t.matchString('"')?{t:rc,v:n}:(t.pos=e,null)):t.matchString("'")?(n=Wc(t),t.matchString("'")?{t:rc,v:n}:(t.pos=e,null)):null},qc=/^[a-zA-Z_$][a-zA-Z_$0-9]*/,$c=Ht,Qc=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,Zc=Kt,Hc=Gt,Kc=function(t){var e,n;return e=t.pos,t.allowWhitespace(),t.matchString("{")?(n=Hc(t),t.allowWhitespace(),t.matchString("}")?{t:oc,m:n}:(t.pos=e,null)):(t.pos=e,null)},Gc=Yt,Yc=function(t){var e,n;return e=t.pos,t.allowWhitespace(),t.matchString("[")?(n=Gc(t),t.matchString("]")?{t:sc,m:n}:(t.pos=e,null)):(t.pos=e,null)},Jc=Jt,Xc=Xt,tl=/^(?:~\/|(?:\.\.\/)+|\.\/(?:\.\.\/)*|\.)/;Vc=/^(?:Array|console|Date|RegExp|decodeURIComponent|decodeURI|encodeURIComponent|encodeURI|isFinite|isNaN|parseFloat|parseInt|JSON|Math|NaN|undefined|null)\b/,Mc=/^(?:break|case|catch|continue|debugger|default|delete|do|else|finally|for|function|if|in|instanceof|new|return|switch|throw|try|typeof|var|void|while|with)$/;var el,nl,il=/^[a-zA-Z$_0-9]+(?:(?:\.[a-zA-Z$_0-9]+)|(?:\[[0-9]+\]))*/,rl=/^[a-zA-Z_$][-a-zA-Z_$0-9]*/,sl=te,ol=function(t){return Jc(t)||Xc(t)||sl(t)},al=ee,ul=function(t){var e,n,i;if(!(e=ol(t)))return null;for(;e;)if(t.pos,n=al(t))e={t:dc,x:e,r:n};else{if(!t.matchString("("))break;t.allowWhitespace(),i=Gc(t),t.allowWhitespace(),t.matchString(")")||t.error(Nc),e={t:yc,x:e},i&&(e.o=i)}return e};nl=function(t,e){return function(n){var i;return(i=e(n))?i:n.matchString(t)?(n.allowWhitespace(),i=kl(n),i||n.error(jc),{s:t,o:i,t:pc}):null}},function(){var t,e,n,i,r;for(i="! ~ + - typeof".split(" "),r=ul,t=0,e=i.length;t<e;t+=1)n=nl(i[t],r),r=n;el=r}();var hl,cl,ll=el;cl=function(t,e){return function(n){var i,r,s;if(!(r=e(n)))return null;for(;;){if(i=n.pos,n.allowWhitespace(),!n.matchString(t))return n.pos=i,r;if("in"===t&&/[a-zA-Z_$0-9]/.test(n.remaining().charAt(0)))return n.pos=i,r;if(n.allowWhitespace(),!(s=e(n)))return n.pos=i,r;r={t:gc,s:t,o:[r,s]}}}},function(){var t,e,n,i,r;for(i="* / % + - << >> >>> < <= > >= in instanceof == != === !== & ^ | && ||".split(" "),r=ll,t=0,e=i.length;t<e;t+=1)n=cl(i[t],r),r=n;hl=r}();var fl,dl,pl,ml,vl,gl,yl,bl,wl=hl,xl=ne,kl=ie,El=re,_l=oe,Al=/^[0-9][1-9]*$/,Sl=ue,Cl=he,Ol=ce,Pl=le,Tl=fe,Fl=de,Rl=pe,jl=/^yield\s*/,Nl=me,Dl=ve,Il=/^\s*else\s*/,Ll=ge,Vl=/^\s*elseif\s+/,Ml={each:xc,if:bc,"if-with":Ec,with:kc,unless:wc},Ul=ye,Wl=/^\s*:\s*([a-zA-Z_$][a-zA-Z_$0-9]*)/,zl=/^\s*,\s*([a-zA-Z_$][a-zA-Z_$0-9]*)/,Bl=new RegExp("^("+Object.keys(Ml).join("|")+")\\b"),ql=Ee,$l="<!--",Ql="-->";fl=/^(allowFullscreen|async|autofocus|autoplay|checked|compact|controls|declare|default|defaultChecked|defaultMuted|defaultSelected|defer|disabled|enabled|formNoValidate|hidden|indeterminate|inert|isMap|itemScope|loop|multiple|muted|noHref|noResize|noShade|noValidate|noWrap|open|pauseOnExit|readOnly|required|reversed|scoped|seamless|selected|sortable|translate|trueSpeed|typeMustMatch|visible)$/i,dl=/^(?:area|base|br|col|command|doctype|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/i,pl={quot:34,amp:38,apos:39,lt:60,gt:62,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,copy:169,ordf:170,laquo:171,not:172,shy:173,reg:174,macr:175,deg:176,plusmn:177,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,sup1:185,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,Agrave:192,Aacute:193,Acirc:194,Atilde:195,Auml:196,Aring:197,AElig:198,Ccedil:199,Egrave:200,Eacute:201,Ecirc:202,Euml:203,Igrave:204,Iacute:205,Icirc:206,Iuml:207,ETH:208,Ntilde:209,Ograve:210,Oacute:211,Ocirc:212,Otilde:213,Ouml:214,times:215,Oslash:216,Ugrave:217,Uacute:218,Ucirc:219,Uuml:220,Yacute:221,THORN:222,szlig:223,agrave:224,aacute:225,acirc:226,atilde:227,auml:228,aring:229,aelig:230,ccedil:231,egrave:232,eacute:233,ecirc:234,euml:235,igrave:236,iacute:237,icirc:238,iuml:239,eth:240,ntilde:241,ograve:242,oacute:243,ocirc:244,otilde:245,ouml:246,divide:247,oslash:248,ugrave:249,uacute:250,ucirc:251,uuml:252,yacute:253,thorn:254,yuml:255,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},ml=[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376],vl=new RegExp("&(#?(?:x[\\w\\d]+|\\d+|"+Object.keys(pl).join("|")+"));?","g"),gl=/</g,yl=/>/g,bl=/&/g;var Zl,Hl,Kl,Gl,Yl,Jl,Xl,tf=/^\s*\r?\n/,ef=/\r?\n\s*$/,nf=function(t){var e,n,i,r,s;for(e=1;e<t.length;e+=1)n=t[e],i=t[e-1],r=t[e-2],Ce(n)&&Oe(i)&&Ce(r)&&ef.test(r)&&tf.test(n)&&(t[e-2]=r.replace(ef,"\n"),t[e]=n.replace(tf,"")),Pe(n)&&Ce(i)&&ef.test(i)&&Ce(n.f[0])&&tf.test(n.f[0])&&(t[e-1]=i.replace(ef,"\n"),n.f[0]=n.f[0].replace(tf,"")),Ce(n)&&Pe(i)&&(s=D(i.f),Ce(s)&&ef.test(s)&&tf.test(n)&&(i.f[i.f.length-1]=s.replace(ef,"\n"),t[e]=n.replace(tf,"")));return t},rf=function(t,e,n){var i;e&&"string"==typeof(i=t[0])&&(i=i.replace(e,""),i?t[0]=i:t.shift()),n&&"string"==typeof(i=D(t))&&(i=i.replace(n,""),i?t[t.length-1]=i:t.pop())},sf=Te,of=/[ \t\f\r\n]+/g,af=/^(?:pre|script|style|textarea)$/i,uf=/^[ \t\f\r\n]+/,hf=/[ \t\f\r\n]+$/,cf=/^(?:\r\n|\r|\n)/,lf=/(?:\r\n|\r|\n)$/,ff=Fe,df=/^([a-zA-Z]{1,}:?[a-zA-Z0-9\-]*)\s*\>/,pf=function(t,e){var n,i,r;for(n=e.length;n--;){if(!(i=t.indexOf(e[n])))return 0;i!==-1&&((!r||i<r)&&(r=i))}return r||-1},mf=Re,vf=/^[^\s"'>\/=]+/,gf=/^[^\s"'=<>`]+/;Hl={true:!0,false:!1,undefined:void 0,null:null},Kl=new RegExp("^(?:"+Object.keys(Hl).join("|")+")"),Gl=/^(?:[+-]?)(?:(?:(?:0|[1-9]\d*)?\.\d+)|(?:(?:0|[1-9]\d*)\.)|(?:0|[1-9]\d*))(?:[eE][+-]?\d+)?/,Yl=/\$\{([^\}]+)\}/g,Jl=/^\$\{([^\}]+)\}/,Xl=/^\s*$/,Zl=Wh.extend({init:function(t,e){this.values=e.values,this.allowWhitespace()},postProcess:function(t){return 1===t.length&&Xl.test(this.leftover)?{value:t[0].v}:null},converters:[function(t){var e;return t.values?(e=t.matchPattern(Jl),e&&t.values.hasOwnProperty(e)?{v:t.values[e]}:void 0):null},function(t){var e;if(e=t.matchPattern(Kl))return{v:Hl[e]}},function(t){var e;if(e=t.matchPattern(Gl))return{v:+e}},function(t){var e,n=Bc(t);return n&&(e=t.values)?{v:n.v.replace(Yl,function(t,n){return n in e?e[n]:n})}:n},function(t){var e,n;if(!t.matchString("{"))return null;if(e={},t.allowWhitespace(),t.matchString("}"))return{v:e};for(;n=Ve(t);){if(e[n.key]=n.value,t.allowWhitespace(),t.matchString("}"))return{v:e};if(!t.matchString(","))return null}return null},function(t){var e,n;if(!t.matchString("["))return null;if(e=[],t.allowWhitespace(),t.matchString("]"))return{v:e};for(;n=t.read();){if(e.push(n.v),t.allowWhitespace(),t.matchString("]"))return{v:e};if(!t.matchString(","))return null;t.allowWhitespace()}return null}]});var yf,bf=function(t,e){return new Zl(t,{values:e}).result},wf=Me,xf=/^([a-zA-Z_$][a-zA-Z_$0-9]*)\(/,kf=/\)\s*$/;yf=Wh.extend({converters:[kl]});var Ef,_f=/^[a-zA-Z]{1,}:?[a-zA-Z0-9\-]*/,Af=/^[\s\n\/>]/,Sf=/^on/,Cf=/^on-([a-zA-Z\\*\\.$_][a-zA-Z\\*\\.$_0-9\-]+)$/,Of=/^(?:change|reset|teardown|update|construct|config|init|render|unrender|detach|insert)$/,Pf={"intro-outro":"t0",intro:"t1",outro:"t2",decorator:"o"},Tf={exclude:!0};Ef={li:["li"],dt:["dt","dd"],dd:["dt","dd"],p:"address article aside blockquote div dl fieldset footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol p pre section table ul".split(" "),rt:["rt","rp"],rp:["rt","rp"],optgroup:["optgroup"],option:["option","optgroup"],thead:["tbody","tfoot"],tbody:["tbody","tfoot"],tfoot:["tbody"],tr:["tr","tbody"],td:["td","th","tr"],th:["td","th","tr"]};var Ff,Rf=Ue,jf=ze,Nf=Be,Df=/[-\/\\^$*+?.()|[\]{}]/g,If=qe,Lf=/^<!--\s*/,Vf=/s*>\s*([a-zA-Z_$][-a-zA-Z_$0-9]*)\s*/,Mf=/\s*-->/,Uf=$e,Wf=/^#\s*partial\s+/,zf=Qe,Bf=Ze,qf=[Ol,Cl,Ul,Rl,Fl,Pl],$f=[Sl],Qf=[Cl,Ul,Fl],Zf=void 0,Hf=[Fc,ql,Rf,jf],Kf=[If,Uf];Zf=Wh.extend({init:function(t,e){var n=e.tripleDelimiters||["{{{","}}}"],i=e.staticDelimiters||["[[","]]"],r=e.staticTripleDelimiters||["[[[","]]]"];this.standardDelimiters=e.delimiters||["{{","}}"],this.tags=[{isStatic:!1,isTriple:!1,open:this.standardDelimiters[0],close:this.standardDelimiters[1],readers:qf},{isStatic:!1,isTriple:!0,open:n[0],close:n[1],readers:$f},{isStatic:!0,isTriple:!1,open:i[0],close:i[1],readers:Qf},{isStatic:!0,isTriple:!0,open:r[0],close:r[1],readers:$f}],this.sortMustacheTags(),this.sectionDepth=0,this.elementStack=[],this.interpolate={script:!e.interpolate||e.interpolate.script!==!1,style:!e.interpolate||e.interpolate.style!==!1},e.sanitize===!0&&(e.sanitize={elements:"applet base basefont body frame frameset head html isindex link meta noframes noscript object param script style title".split(" "),eventAttributes:!0}),this.stripComments=e.stripComments!==!1,this.preserveWhitespace=e.preserveWhitespace,this.sanitizeElements=e.sanitize&&e.sanitize.elements,this.sanitizeEventAttributes=e.sanitize&&e.sanitize.eventAttributes,this.includeLinePositions=e.includeLinePositions},postProcess:function(t){return t.length?(this.sectionDepth>0&&this.error("A section was left open"),sf(t[0].t,this.stripComments,this.preserveWhitespace,!this.preserveWhitespace,!this.preserveWhitespace),t[0]):{t:[],v:oa}},converters:[zf],sortMustacheTags:function(){this.tags.sort(function(t,e){return e.open.length-t.open.length})}});var Gf,Yf,Jf,Xf=["preserveWhitespace","sanitize","stripComments","delimiters","tripleDelimiters","interpolate"],td={fromId:Ge,isHashedId:Ye,isParsed:Je,getParseOptions:Xe,createHelper:He,parse:Ke},ed=td,nd={name:"template",extend:function(t,e,n){var i;"template"in n&&(i=n.template,e.template="function"==typeof i?i:rn(i,e))},init:function(t,e,n){var i,r;i="template"in n?n.template:t.prototype.template,"function"==typeof i&&(r=i,i=en(e,r),e._config.template={fn:r,result:i}),i=rn(i,e),e.template=i.t,i.p&&sn(e.partials,i.p)},reset:function(t){var e,n=tn(t);if(n)return e=rn(n,t),t.template=e.t,sn(t.partials,e.p,!0),!0}},id=nd;Gf=["adaptors","components","computed","decorators","easing","events","interpolators","partials","transitions"],Yf=function(t,e){this.name=t,this.useDefaults=e},Yf.prototype={constructor:Yf,extend:function(t,e,n){this.configure(this.useDefaults?t.defaults:t,this.useDefaults?e:e.constructor,n)},init:function(){},configure:function(t,e,n){var i,r=this.name,s=n[r];i=ba(t[r]);for(var o in s)i[o]=s[o];e[r]=i},reset:function(t){var e=t[this.name],n=!1;return Object.keys(e).forEach(function(t){var i=e[t];i._fn&&(i._fn.isOwner?e[t]=i._fn:delete e[t],n=!0)}),n}},Jf=Gf.map(function(t){return new Yf(t,"computed"===t)});var rd,sd,od,ad,ud,hd,cd=Jf,ld=on,fd=cn;ad={adapt:Sh,css:Dh,data:Lh,template:id},od=Object.keys(ua),hd=dn(od.filter(function(t){return!ad[t]})),ud=dn(od.concat(cd.map(function(t){return t.name}))),sd=[].concat(od.filter(function(t){return!cd[t]&&!ad[t]}),cd,ad.data,ad.template,ad.css),rd={extend:function(t,e,n){return ln("extend",t,e,n)},init:function(t,e,n){return ln("init",t,e,n)},reset:function(t){return sd.filter(function(e){return e.reset&&e.reset(t)}).map(function(t){return t.name})},order:sd};var dd=rd,pd=pn,md=mn,vd=vn,gd=gn,yd=yn,bd=bn,wd=wn,xd=xn,kd=kn,Ed=En,_d=_n,Ad=An,Sd=function(){return e(this.node)},Cd=function(t){this.type=1,this.text=t.template};Cd.prototype={detach:Sd,firstNode:function(){return this.node},render:function(){return this.node||(this.node=document.createTextNode(this.text)),this.node},toString:function(t){return t?Se(this.text):this.text},unrender:function(t){if(t)return this.detach()}};var Od=Cd,Pd=Sn,Td=Cn,Fd=function(t,e,n){var i;this.ref=e,this.resolved=!1,this.root=t.root,this.parentFragment=t.parentFragment,this.callback=n,i=su(t.root,e,t.parentFragment),void 0!=i?this.resolve(i):fu.addUnresolved(this)};Fd.prototype={resolve:function(t){this.keypath&&!t&&fu.addUnresolved(this),this.resolved=!0,this.keypath=t,this.callback(t)},forceResolution:function(){this.resolve(_(this.ref))},rebind:function(t,e){var n;void 0!=this.keypath&&void 0!==(n=this.keypath.replace(t,e))&&this.resolve(n)},unbind:function(){this.resolved||fu.removeUnresolved(this)}};var Rd=Fd,jd=function(t,e,n){this.parentFragment=t.parentFragment,this.ref=e,this.callback=n,this.rebind()},Nd={"@keypath":{prefix:"c",prop:["context"]},"@index":{prefix:"i",prop:["index"]},"@key":{prefix:"k",prop:["key","index"]}};jd.prototype={rebind:function(){var t,e=this.ref,n=this.parentFragment,i=Nd[e];if(!i)throw new Error('Unknown special reference "'+e+'" - valid references are @index, @key and @keypath');if(this.cached)return this.callback(_("@"+i.prefix+On(this.cached,i)));if(i.prop.indexOf("index")!==-1||i.prop.indexOf("key")!==-1)for(;n;){if(n.owner.currentSubtype===xc&&void 0!==(t=On(n,i)))return this.cached=n,n.registerIndexRef(this),this.callback(_("@"+i.prefix+t));n=!n.parent&&n.owner&&n.owner.component&&n.owner.component.parentFragment&&!n.owner.component.instance.isolated?n.owner.component.parentFragment:n.parent}else for(;n;){if(void 0!==(t=On(n,i)))return this.callback(_("@"+i.prefix+t.str));n=n.parent}},unbind:function(){this.cached&&this.cached.unregisterIndexRef(this)}};var Dd=jd,Id=function(t,e,n){this.parentFragment=t.parentFragment,this.ref=e,this.callback=n,e.ref.fragment.registerIndexRef(this),this.rebind()};Id.prototype={rebind:function(){var t,e=this.ref.ref;void 0!==(t="k"===e.ref.t?"k"+e.fragment.key:"i"+e.fragment.index)&&this.callback(_("@"+t))},unbind:function(){this.ref.ref.fragment.unregisterIndexRef(this)}};var Ld=Id,Vd=Pn;Pn.resolve=function(t){var e,n,i={};for(e in t.refs)n=t.refs[e],i[n.ref.n]="k"===n.ref.t?n.fragment.key:n.fragment.index;return i};var Md,Ud=Tn,Wd=Fn,zd={},Bd=Function.prototype.bind;Md=function(t,e,n,i){var r,s=this;r=t.root,this.root=r,this.parentFragment=e,this.callback=i,this.owner=t,this.str=n.s,this.keypaths=[],this.pending=n.r.length,this.refResolvers=n.r.map(function(t,e){return Ud(s,t,function(t){s.resolve(e,t)})}),this.ready=!0,this.bubble()},Md.prototype={bubble:function(){this.ready&&(this.uniqueString=jn(this.str,this.keypaths),this.keypath=Nn(this.uniqueString),this.createEvaluator(),this.callback(this.keypath))},unbind:function(){for(var t;t=this.refResolvers.pop();)t.unbind()},resolve:function(t,e){this.keypaths[t]=e,this.bubble()},createEvaluator:function(){var t,e,n,i,r,s=this;i=this.keypath,t=this.root.viewmodel.computations[i.str],t?this.root.viewmodel.mark(i):(r=Wd(this.str,this.refResolvers.length),e=this.keypaths.map(function(t){var e;return"undefined"===t?function(){}:t.isSpecial?(e=t.value,function(){return e}):function(){var e=s.root.viewmodel.get(t,{noUnwrap:!0,fullRootGet:!0});return"function"==typeof e&&(e=In(e,s.root)),e}}),n={deps:this.keypaths.filter(Dn),getter:function(){var t=e.map(Rn);return r.apply(null,t)}},t=this.root.viewmodel.compute(i,n))},rebind:function(t,e){this.refResolvers.forEach(function(n){return n.rebind(t,e)})}};var qd=Md,$d=function(t,e,n){var i=this;this.resolver=e,this.root=e.root,this.parentFragment=n,this.viewmodel=e.root.viewmodel,"string"==typeof t?this.value=t:t.t===lc?this.refResolver=Ud(this,t.n,function(t){i.resolve(t)}):new qd(e,n,t,function(t){i.resolve(t)})};$d.prototype={resolve:function(t){this.keypath&&this.viewmodel.unregister(this.keypath,this),this.keypath=t,this.value=this.viewmodel.get(t),this.bind(),this.resolver.bubble()},bind:function(){this.viewmodel.register(this.keypath,this)},rebind:function(t,e){this.refResolver&&this.refResolver.rebind(t,e)},setValue:function(t){this.value=t,this.resolver.bubble()},unbind:function(){this.keypath&&this.viewmodel.unregister(this.keypath,this),this.refResolver&&this.refResolver.unbind()},forceResolution:function(){this.refResolver&&this.refResolver.forceResolution()}};var Qd=$d,Zd=function(t,e,n){var i,r,s,o,a=this;this.parentFragment=o=t.parentFragment,this.root=i=t.root,this.mustache=t,this.ref=r=e.r,this.callback=n,this.unresolved=[],(s=su(i,r,o))?this.base=s:this.baseResolver=new Rd(this,r,function(t){a.base=t,a.baseResolver=null,a.bubble()}),this.members=e.m.map(function(t){return new Qd(t,a,o)}),this.ready=!0,this.bubble()};Zd.prototype={getKeypath:function(){var t=this.members.map(Ln);return!t.every(Vn)||this.baseResolver?null:this.base.join(t.join("."))},bubble:function(){this.ready&&!this.baseResolver&&this.callback(this.getKeypath())},unbind:function(){this.members.forEach(Z)},rebind:function(t,e){var n;if(this.base){var i=this.base.replace(t,e);i&&i!==this.base&&(this.base=i,n=!0)}this.members.forEach(function(i){i.rebind(t,e)&&(n=!0)}),n&&this.bubble()},forceResolution:function(){this.baseResolver&&(this.base=_(this.ref),this.baseResolver.unbind(),this.baseResolver=null),this.members.forEach(Mn),this.bubble()}};var Hd=Zd,Kd=Un,Gd=Wn,Yd=zn,Jd={getValue:Td,init:Kd,resolve:Gd,rebind:Yd},Xd=function(t){this.type=zh,Jd.init(this,t)};Xd.prototype={update:function(){this.node.data=void 0==this.value?"":this.value},resolve:Jd.resolve,rebind:Jd.rebind,detach:Sd,unbind:Pd,render:function(){return this.node||(this.node=document.createTextNode(n(this.value))),this.node},unrender:function(t){t&&e(this.node)},getValue:Jd.getValue,setValue:function(t){var e;this.keypath&&(e=this.root.viewmodel.wrapped[this.keypath.str])&&(t=e.get()),a(t,this.value)||(this.value=t,this.parentFragment.bubble(),this.node&&fu.addView(this))},firstNode:function(){return this.node},toString:function(t){var e=""+n(this.value);return t?Se(e):e}};var tp=Xd,ep=Bn,np=qn,ip=$n,rp=Qn,sp=Zn,op=Hn,ap=Kn,up=Gn,hp=Yn,cp=function(t,e){Jd.rebind.call(this,t,e)},lp=Xn,fp=ti,dp=li,pp=fi,mp=di,vp=vi,gp=function(t){this.type=qh,this.subtype=this.currentSubtype=t.template.n,this.inverted=this.subtype===wc,this.pElement=t.pElement,this.fragments=[],this.fragmentsToCreate=[],this.fragmentsToRender=[],this.fragmentsToUnrender=[],t.template.i&&(this.indexRefs=t.template.i.split(",").map(function(t,e){return{n:t,t:0===e?"k":"i"}})),this.renderedFragments=[],this.length=0,Jd.init(this,t)};gp.prototype={bubble:ep,detach:np,find:ip,findAll:rp,findAllComponents:sp,findComponent:op,findNextNode:ap,firstNode:up,getIndexRef:function(t){if(this.indexRefs)for(var e=this.indexRefs.length;e--;){var n=this.indexRefs[e];if(n.n===t)return n}},getValue:Jd.getValue,shuffle:hp,rebind:cp,render:lp,resolve:Jd.resolve,setValue:fp,toString:dp,unbind:pp,unrender:mp,update:vp};var yp,bp,wp=gp,xp=gi,kp=yi,Ep=bi,_p=wi,Ap={};try{ca("table").innerHTML="foo"}catch(t){yp=!0,bp={TABLE:['<table class="x">',"</table>"],THEAD:['<table><thead class="x">',"</thead></table>"],TBODY:['<table><tbody class="x">',"</tbody></table>"],TR:['<table><tr class="x">',"</tr></table>"],SELECT:['<select class="x">',"</select>"]}}var Sp=function(t,e,n){var i,r,s,o,a,u=[];if(null!=t&&""!==t){for(yp&&(r=bp[e.tagName])?(i=xi("DIV"),i.innerHTML=r[0]+t+r[1],i=i.querySelector(".x"),"SELECT"===i.tagName&&(s=i.options[i.selectedIndex])):e.namespaceURI===ia.svg?(i=xi("DIV"),i.innerHTML='<svg class="x">'+t+"</svg>",i=i.querySelector(".x")):(i=xi(e.tagName),i.innerHTML=t,"SELECT"===i.tagName&&(s=i.options[i.selectedIndex]));o=i.firstChild;)u.push(o),n.appendChild(o);if("SELECT"===e.tagName)for(a=u.length;a--;)u[a]!==s&&(u[a].selected=!1)}return u},Cp=ki,Op=_i,Pp=Ai,Tp=Si,Fp=Ci,Rp=Oi,jp=function(t){this.type=Bh,Jd.init(this,t)};jp.prototype={detach:xp,find:kp,findAll:Ep,firstNode:_p,getValue:Jd.getValue,rebind:Jd.rebind,render:Op,resolve:Jd.resolve,setValue:Pp,toString:Tp,unbind:Pd,unrender:Fp,update:Rp};var Np,Dp,Ip,Lp,Vp=jp,Mp=function(){this.parentFragment.bubble()},Up=Pi,Wp=function(t){return this.node?la(this.node,t)?this.node:this.fragment&&this.fragment.find?this.fragment.find(t):void 0:null},zp=function(t,e){e._test(this,!0)&&e.live&&(this.liveQueries||(this.liveQueries=[])).push(e),this.fragment&&this.fragment.findAll(t,e)},Bp=function(t,e){this.fragment&&this.fragment.findAllComponents(t,e)},qp=function(t){if(this.fragment)return this.fragment.findComponent(t)},$p=Ti,Qp=Fi,Zp=Ri,Hp=/^true|on|yes|1$/i,Kp=/^[0-9]+$/,Gp=function(t,e){var n,i,r;return r=e.a||{},i={},n=r.twoway,void 0!==n&&(i.twoway=0===n||Hp.test(n)),n=r.lazy,void 0!==n&&(0!==n&&Kp.test(n)?i.lazy=parseInt(n):i.lazy=0===n||Hp.test(n)),i},Yp=ji;Np="altGlyph altGlyphDef altGlyphItem animateColor animateMotion animateTransform clipPath feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence foreignObject glyphRef linearGradient radialGradient textPath vkern".split(" "),Dp="attributeName attributeType baseFrequency baseProfile calcMode clipPathUnits contentScriptType contentStyleType diffuseConstant edgeMode externalResourcesRequired filterRes filterUnits glyphRef gradientTransform gradientUnits kernelMatrix kernelUnitLength keyPoints keySplines keyTimes lengthAdjust limitingConeAngle markerHeight markerUnits markerWidth maskContentUnits maskUnits numOctaves pathLength patternContentUnits patternTransform patternUnits pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits refX refY repeatCount repeatDur requiredExtensions requiredFeatures specularConstant specularExponent spreadMethod startOffset stdDeviation stitchTiles surfaceScale systemLanguage tableValues targetX targetY textLength viewBox viewTarget xChannelSelector yChannelSelector zoomAndPan".split(" "),Ip=function(t){for(var e={},n=t.length;n--;)e[t[n].toLowerCase()]=t[n];return e},Lp=Ip(Np.concat(Dp));var Jp=function(t){var e=t.toLowerCase();return Lp[e]||e},Xp=function(t,e){var n,i;if((n=e.indexOf(":"))===-1||"xmlns"===(i=e.substr(0,n)))t.name=t.element.namespace!==ia.html?Jp(e):e;else if(e=e.substring(n+1),t.name=Jp(e),t.namespace=ia[i.toLowerCase()],t.namespacePrefix=i,!t.namespace)throw'Unknown namespace ("'+i+'")'},tm=Ni,em=Di,nm=Ii,im=Li,rm={"accept-charset":"acceptCharset",accesskey:"accessKey",bgcolor:"bgColor",class:"className",codebase:"codeBase",colspan:"colSpan",contenteditable:"contentEditable",datetime:"dateTime",dirname:"dirName",for:"htmlFor","http-equiv":"httpEquiv",ismap:"isMap",maxlength:"maxLength",novalidate:"noValidate",pubdate:"pubDate",readonly:"readOnly",rowspan:"rowSpan",tabindex:"tabIndex",usemap:"useMap"},sm=Vi,om=Ui,am=Wi,um=zi,hm=Bi,cm=qi,lm=$i,fm=Qi,dm=Zi,pm=Hi,mm=Ki,vm=Gi,gm=Yi,ym=Ji,bm=Xi,wm=function(t){this.init(t)};wm.prototype={
bubble:Yp,init:em,rebind:nm,render:im,toString:sm,unbind:om,update:bm};var xm,km=wm,Em=function(t,e){var n,i,r=[];for(n in e)"twoway"!==n&&"lazy"!==n&&e.hasOwnProperty(n)&&(i=new km({element:t,name:n,value:e[n],root:t.root}),r[n]=i,"value"!==n&&r.push(i));return(i=r.value)&&r.push(i),r};"undefined"!=typeof document&&(xm=ca("div"));var _m=function(t,e){this.element=t,this.root=t.root,this.parentFragment=t.parentFragment,this.attributes=[],this.fragment=new lb({root:t.root,owner:this,template:[e]})};_m.prototype={bubble:function(){this.node&&this.update(),this.element.bubble()},rebind:function(t,e){this.fragment.rebind(t,e)},render:function(t){this.node=t,this.isSvg=t.namespaceURI===ia.svg,this.update()},unbind:function(){this.fragment.unbind()},update:function(){var t,e,n=this;t=this.fragment.toString(),e=tr(t,this.isSvg),this.attributes.filter(function(t){return er(e,t)}).forEach(function(t){n.node.removeAttribute(t.name)}),e.forEach(function(t){n.node.setAttribute(t.name,t.value)}),this.attributes=e},toString:function(){return this.fragment.toString()}};var Am=_m,Sm=function(t,e){return e?e.map(function(e){return new Am(t,e)}):[]},Cm=function(t){var e,n,i,r;if(this.element=t,this.root=t.root,this.attribute=t.attributes[this.name||"value"],e=this.attribute.interpolator,e.twowayBinding=this,n=e.keypath){if("}"===n.str.slice(-1))return v("Two-way binding does not work with expressions (`%s` on <%s>)",e.resolver.uniqueString,t.name,{ractive:this.root}),!1;if(n.isSpecial)return v("Two-way binding does not work with %s",e.resolver.ref,{ractive:this.root}),!1}else{m("The %s being used for two-way binding is ambiguous, and may cause unexpected results. Consider initialising your data to eliminate the ambiguity",e.template.r?"'"+e.template.r+"' reference":"expression",{ractive:this.root}),e.resolver.forceResolution(),n=e.keypath}this.attribute.isTwoway=!0,this.keypath=n,i=this.root.viewmodel.get(n),void 0===i&&this.getInitialValue&&void 0!==(i=this.getInitialValue())&&this.root.viewmodel.set(n,i),(r=nr(t))&&(this.resetValue=i,r.formBindings.push(this))};Cm.prototype={handleChange:function(){var t=this;fu.start(this.root),this.attribute.locked=!0,this.root.viewmodel.set(this.keypath,this.getValue()),fu.scheduleTask(function(){return t.attribute.locked=!1}),fu.end()},rebound:function(){var t,e,n;e=this.keypath,n=this.attribute.interpolator.keypath,e!==n&&(I(this.root._twowayBindings[e.str],this),this.keypath=n,t=this.root._twowayBindings[n.str]||(this.root._twowayBindings[n.str]=[]),t.push(this))},unbind:function(){}},Cm.extend=function(t){var e,n=this;return e=function(t){Cm.call(this,t),this.init&&this.init()},e.prototype=ba(n.prototype),i(e.prototype,t),e.extend=Cm.extend,e};var Om,Pm=Cm,Tm=ir;Om=Pm.extend({getInitialValue:function(){return""},getValue:function(){return this.element.node.value},render:function(){var t,e=this.element.node,n=!1;this.rendered=!0,t=this.root.lazy,this.element.lazy===!0?t=!0:this.element.lazy===!1?t=!1:u(this.element.lazy)?(t=!1,n=+this.element.lazy):u(t||"")&&(n=+t,t=!1,this.element.lazy=n),this.handler=n?sr:Tm,e.addEventListener("change",Tm,!1),t||(e.addEventListener("input",this.handler,!1),e.attachEvent&&e.addEventListener("keyup",this.handler,!1)),e.addEventListener("blur",rr,!1)},unrender:function(){var t=this.element.node;this.rendered=!1,t.removeEventListener("change",Tm,!1),t.removeEventListener("input",this.handler,!1),t.removeEventListener("keyup",this.handler,!1),t.removeEventListener("blur",rr,!1)}});var Fm=Om,Rm=Fm.extend({getInitialValue:function(){return this.element.fragment?this.element.fragment.toString():""},getValue:function(){return this.element.node.innerHTML}}),jm=Rm,Nm=or,Dm={},Im=Pm.extend({name:"checked",init:function(){this.siblings=Nm(this.root._guid,"radio",this.element.getAttribute("name")),this.siblings.push(this)},render:function(){var t=this.element.node;t.addEventListener("change",Tm,!1),t.attachEvent&&t.addEventListener("click",Tm,!1)},unrender:function(){var t=this.element.node;t.removeEventListener("change",Tm,!1),t.removeEventListener("click",Tm,!1)},handleChange:function(){fu.start(this.root),this.siblings.forEach(function(t){t.root.viewmodel.set(t.keypath,t.getValue())}),fu.end()},getValue:function(){return this.element.node.checked},unbind:function(){I(this.siblings,this)}}),Lm=Im,Vm=Pm.extend({name:"name",init:function(){this.siblings=Nm(this.root._guid,"radioname",this.keypath.str),this.siblings.push(this),this.radioName=!0},getInitialValue:function(){if(this.element.getAttribute("checked"))return this.element.getAttribute("value")},render:function(){var t=this.element.node;t.name="{{"+this.keypath.str+"}}",t.checked=this.root.viewmodel.get(this.keypath)==this.element.getAttribute("value"),t.addEventListener("change",Tm,!1),t.attachEvent&&t.addEventListener("click",Tm,!1)},unrender:function(){var t=this.element.node;t.removeEventListener("change",Tm,!1),t.removeEventListener("click",Tm,!1)},getValue:function(){var t=this.element.node;return t._ractive?t._ractive.value:t.value},handleChange:function(){this.element.node.checked&&Pm.prototype.handleChange.call(this)},rebound:function(t,e){var n;Pm.prototype.rebound.call(this,t,e),(n=this.element.node)&&(n.name="{{"+this.keypath.str+"}}")},unbind:function(){I(this.siblings,this)}}),Mm=Vm,Um=Pm.extend({name:"name",getInitialValue:function(){return this.noInitialValue=!0,[]},init:function(){var t,e;this.checkboxName=!0,this.siblings=Nm(this.root._guid,"checkboxes",this.keypath.str),this.siblings.push(this),this.noInitialValue&&(this.siblings.noInitialValue=!0),this.siblings.noInitialValue&&this.element.getAttribute("checked")&&(t=this.root.viewmodel.get(this.keypath),e=this.element.getAttribute("value"),t.push(e))},unbind:function(){I(this.siblings,this)},render:function(){var t,e,n=this.element.node;t=this.root.viewmodel.get(this.keypath),e=this.element.getAttribute("value"),s(t)?this.isChecked=R(t,e):this.isChecked=t==e,n.name="{{"+this.keypath.str+"}}",n.checked=this.isChecked,n.addEventListener("change",Tm,!1),n.attachEvent&&n.addEventListener("click",Tm,!1)},unrender:function(){var t=this.element.node;t.removeEventListener("change",Tm,!1),t.removeEventListener("click",Tm,!1)},changed:function(){var t=!!this.isChecked;return this.isChecked=this.element.node.checked,this.isChecked===t},handleChange:function(){this.isChecked=this.element.node.checked,Pm.prototype.handleChange.call(this)},getValue:function(){return this.siblings.filter(ar).map(ur)}}),Wm=Um,zm=Pm.extend({name:"checked",render:function(){var t=this.element.node;t.addEventListener("change",Tm,!1),t.attachEvent&&t.addEventListener("click",Tm,!1)},unrender:function(){var t=this.element.node;t.removeEventListener("change",Tm,!1),t.removeEventListener("click",Tm,!1)},getValue:function(){return this.element.node.checked}}),Bm=zm,qm=Pm.extend({getInitialValue:function(){var t,e,n,i,r=this.element.options;if(void 0===this.element.getAttribute("value")&&(e=t=r.length,t)){for(;e--;)if(r[e].getAttribute("selected")){n=r[e].getAttribute("value"),i=!0;break}if(!i)for(;++e<t;)if(!r[e].getAttribute("disabled")){n=r[e].getAttribute("value");break}return void 0!==n&&(this.element.attributes.value.value=n),n}},render:function(){this.element.node.addEventListener("change",Tm,!1)},unrender:function(){this.element.node.removeEventListener("change",Tm,!1)},setValue:function(t){this.root.viewmodel.set(this.keypath,t)},getValue:function(){var t,e,n,i;for(t=this.element.node.options,n=t.length,e=0;e<n;e+=1)if(i=t[e],t[e].selected)return i._ractive?i._ractive.value:i.value},forceUpdate:function(){var t=this,e=this.getValue();void 0!==e&&(this.attribute.locked=!0,fu.scheduleTask(function(){return t.attribute.locked=!1}),this.root.viewmodel.set(this.keypath,e))}}),$m=qm,Qm=$m.extend({getInitialValue:function(){return this.element.options.filter(function(t){return t.getAttribute("selected")}).map(function(t){return t.getAttribute("value")})},render:function(){var t;this.element.node.addEventListener("change",Tm,!1),void 0===(t=this.root.viewmodel.get(this.keypath))&&this.handleChange()},unrender:function(){this.element.node.removeEventListener("change",Tm,!1)},setValue:function(){throw new Error("TODO not implemented yet")},getValue:function(){var t,e,n,i,r,s;for(t=[],e=this.element.node.options,i=e.length,n=0;n<i;n+=1)r=e[n],r.selected&&(s=r._ractive?r._ractive.value:r.value,t.push(s));return t},handleChange:function(){var t,e,n;return t=this.attribute,e=t.value,n=this.getValue(),void 0!==e&&j(n,e)||$m.prototype.handleChange.call(this),this},forceUpdate:function(){var t=this,e=this.getValue();void 0!==e&&(this.attribute.locked=!0,fu.scheduleTask(function(){return t.attribute.locked=!1}),this.root.viewmodel.set(this.keypath,e))},updateModel:function(){void 0!==this.attribute.value&&this.attribute.value.length||this.root.viewmodel.set(this.keypath,this.initialValue)}}),Zm=Qm,Hm=Pm.extend({render:function(){this.element.node.addEventListener("change",Tm,!1)},unrender:function(){this.element.node.removeEventListener("change",Tm,!1)},getValue:function(){return this.element.node.files}}),Km=Hm,Gm=Fm.extend({getInitialValue:function(){},getValue:function(){var t=parseFloat(this.element.node.value);return isNaN(t)?void 0:t}}),Ym=hr,Jm=lr,Xm=fr,tv=dr,ev=pr,nv=/^event(?:\.(.+))?/,iv=yr,rv=br,sv={},ov={touchstart:!0,touchmove:!0,touchend:!0,touchcancel:!0,touchleave:!0},av=xr,uv=kr,hv=Er,cv=_r,lv=Ar,fv=function(t,e,n){this.init(t,e,n)};fv.prototype={bubble:Jm,fire:Xm,getAction:tv,init:ev,listen:rv,rebind:av,render:uv,resolve:hv,unbind:cv,unrender:lv};var dv=fv,pv=function(t,e){var n,i,r,s,o=[];for(i in e)if(e.hasOwnProperty(i))for(r=i.split("-"),n=r.length;n--;)s=new dv(t,r[n],e[i]),o.push(s);return o},mv=function(t,e){var n,i,r,s=this;this.element=t,this.root=n=t.root,"string"!=typeof(i=e.n||e)&&(r=new lb({template:i,root:n,owner:t}),i=r.toString(),r.unbind(),""===i)||(e.a?this.params=e.a:e.d&&(this.fragment=new lb({template:e.d,root:n,owner:t}),this.params=this.fragment.getArgsList(),this.fragment.bubble=function(){this.dirtyArgs=this.dirtyValue=!0,s.params=this.getArgsList(),s.ready&&s.update()}),this.fn=g("decorators",n,i),this.fn||l(Ra(i,"decorator")))};mv.prototype={init:function(){var t,e,n;if(t=this.element.node,this.params?(n=[t].concat(this.params),e=this.fn.apply(this.root,n)):e=this.fn.call(this.root,t),!e||!e.teardown)throw new Error("Decorator definition must return an object with a teardown method");this.actual=e,this.ready=!0},update:function(){this.actual.update?this.actual.update.apply(this.root,this.params):(this.actual.teardown(!0),this.init())},rebind:function(t,e){this.fragment&&this.fragment.rebind(t,e)},teardown:function(t){this.torndown=!0,this.ready&&this.actual.teardown(),!t&&this.fragment&&this.fragment.unbind()}};var vv,gv,yv,bv=mv,wv=Rr,xv=jr,kv=Mr,Ev=function(t){return t.replace(/-([a-zA-Z])/g,function(t,e){return e.toUpperCase()})};Xo?(gv={},yv=ca("div").style,vv=function(t){var e,n,i;if(t=Ev(t),!gv[t])if(void 0!==yv[t])gv[t]=t;else for(i=t.charAt(0).toUpperCase()+t.substring(1),e=sa.length;e--;)if(n=sa[e],void 0!==yv[n+i]){gv[t]=n+i;break}return gv[t]}):vv=null;var _v,Av,Sv=vv;Xo?(Av=window.getComputedStyle||null.getComputedStyle,_v=function(t){var e,n,i,r,o;if(e=Av(this.node),"string"==typeof t)return o=e[Sv(t)],"0px"===o&&(o=0),o;if(!s(t))throw new Error("Transition$getStyle must be passed a string, or an array of strings representing CSS properties");for(n={},i=t.length;i--;)r=t[i],o=e[Sv(r)],"0px"===o&&(o=0),n[r]=o;return n}):_v=null;var Cv=_v,Ov=function(t,e){var n;if("string"==typeof t)this.node.style[Sv(t)]=e;else for(n in t)t.hasOwnProperty(n)&&(this.node.style[Sv(n)]=t[n]);return this},Pv=function(t){var e;this.duration=t.duration,this.step=t.step,this.complete=t.complete,"string"==typeof t.easing?(e=t.root.easing[t.easing])||(v(Ra(t.easing,"easing")),e=Ur):e="function"==typeof t.easing?t.easing:Ur,this.easing=e,this.start=Ga(),this.end=this.start+this.duration,this.running=!0,mu.add(this)};Pv.prototype={tick:function(t){var e,n;return!!this.running&&(t>this.end?(this.step&&this.step(1),this.complete&&this.complete(1),!1):(e=t-this.start,n=this.easing(e/this.duration),this.step&&this.step(n),!0))},stop:function(){this.abort&&this.abort(),this.running=!1}};var Tv,Fv,Rv,jv,Nv,Dv,Iv,Lv,Vv=Pv,Mv=new RegExp("^-(?:"+sa.join("|")+")-"),Uv=function(t){return t.replace(Mv,"")},Wv=new RegExp("^(?:"+sa.join("|")+")([A-Z])"),zv=function(t){return t?(Wv.test(t)&&(t="-"+t),t.replace(/[A-Z]/g,function(t){return"-"+t.toLowerCase()})):""},Bv={},qv={};Xo?(Fv=ca("div").style,function(){void 0!==Fv.transition?(Rv="transition",jv="transitionend",Nv=!0):void 0!==Fv.webkitTransition?(Rv="webkitTransition",jv="webkitTransitionEnd",Nv=!0):Nv=!1}(),Rv&&(Dv=Rv+"Duration",Iv=Rv+"Property",Lv=Rv+"TimingFunction"),Tv=function(t,e,n,i,r){setTimeout(function(){var s,o,a,u,h;u=function(){o&&a&&(t.root.fire(t.name+":end",t.node,t.isIntro),r())},s=(t.node.namespaceURI||"")+t.node.tagName,t.node.style[Iv]=i.map(Sv).map(zv).join(","),t.node.style[Lv]=zv(n.easing||"linear"),t.node.style[Dv]=n.duration/1e3+"s",h=function(e){var n;n=i.indexOf(Ev(Uv(e.propertyName))),n!==-1&&i.splice(n,1),i.length||(t.node.removeEventListener(jv,h,!1),a=!0,u())},t.node.addEventListener(jv,h,!1),setTimeout(function(){for(var r,c,l,f,d,p=i.length,v=[];p--;)f=i[p],r=s+f,Nv&&!qv[r]&&(t.node.style[Sv(f)]=e[f],Bv[r]||(c=t.getStyle(f),Bv[r]=t.getStyle(f)!=e[f],qv[r]=!Bv[r],qv[r]&&(t.node.style[Sv(f)]=c))),Nv&&!qv[r]||(void 0===c&&(c=t.getStyle(f)),l=i.indexOf(f),l===-1?m("Something very strange happened with transitions. Please raise an issue at https://github.com/ractivejs/ractive/issues - thanks!",{node:t.node}):i.splice(l,1),d=/[^\d]*$/.exec(e[f])[0],v.push({name:Sv(f),interpolator:Na(parseFloat(c),parseFloat(e[f])),suffix:d}));v.length?new Vv({root:t.root,duration:n.duration,easing:Ev(n.easing||""),step:function(e){var n,i;for(i=v.length;i--;)n=v[i],t.node.style[n.name]=n.interpolator(e)+n.suffix},complete:function(){o=!0,u()}}):o=!0,i.length||(t.node.removeEventListener(jv,h,!1),a=!0,u())},0)},n.delay||0)}):Tv=null;var $v,Qv,Zv,Hv,Kv,Gv=Tv;if("undefined"!=typeof document){if($v="hidden",Kv={},$v in document)Zv="";else for(Hv=sa.length;Hv--;)Qv=sa[Hv],($v=Qv+"Hidden")in document&&(Zv=Qv);void 0!==Zv?(document.addEventListener(Zv+"visibilitychange",Wr),Wr()):("onfocusout"in document?(document.addEventListener("focusout",zr),document.addEventListener("focusin",Br)):(window.addEventListener("pagehide",zr),window.addEventListener("blur",zr),window.addEventListener("pageshow",Br),window.addEventListener("focus",Br)),Kv.hidden=!1)}var Yv,Jv,Xv,tg=Kv;Xo?(Jv=window.getComputedStyle||null.getComputedStyle,Yv=function(t,e,n){var i,r=this;if(4===arguments.length)throw new Error("t.animateStyle() returns a promise - use .then() instead of passing a callback");return tg.hidden?(this.setStyle(t,e),Xv||(Xv=iu.resolve())):("string"==typeof t?(i={},i[t]=e):(i=t,n=e),n||(v('The "%s" transition does not supply an options object to `t.animateStyle()`. This will break in a future version of Ractive. For more info see https://github.com/RactiveJS/Ractive/issues/340',this.name),n=this),new iu(function(t){var e,s,o,a,u,h;if(!n.duration)return r.setStyle(i),void t();for(e=Object.keys(i),s=[],o=Jv(r.node),{},u=e.length;u--;)h=e[u],a=o[Sv(h)],"0px"===a&&(a=0),a!=i[h]&&(s.push(h),r.node.style[Sv(h)]=a);if(!s.length)return void t();Gv(r,i,n,s,t)}))}):Yv=null;var eg=Yv,ng=function(t,e){return"number"==typeof t?t={duration:t}:"string"==typeof t?t="slow"===t?{duration:600}:"fast"===t?{duration:200}:{duration:400}:t||(t={}),r({},t,e)},ig=qr,rg=function(t,e,n){this.init(t,e,n)};rg.prototype={init:kv,start:ig,getStyle:Cv,setStyle:Ov,animateStyle:eg,processParams:ng};var sg,og,ag=rg,ug=Qr;sg=function(){var t=this.node,e=this.fragment.toString(!1);if(window&&window.appearsToBeIELessEqual8&&(t.type="text/css"),t.styleSheet)t.styleSheet.cssText=e;else{for(;t.hasChildNodes();)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}},og=function(){this.node.type&&"text/javascript"!==this.node.type||m("Script tag was updated. This does not cause the code to be re-evaluated!",{ractive:this.root}),this.node.text=this.fragment.toString(!1)};var hg=function(){var t,e;return this.template.y?"<!DOCTYPE"+this.template.dd+">":(t="<"+this.template.e,t+=this.attributes.map(Jr).join("")+this.conditionalAttributes.map(Jr).join(""),"option"===this.name&&Gr(this)&&(t+=" selected"),"input"===this.name&&Yr(this)&&(t+=" checked"),t+=">","textarea"===this.name&&void 0!==this.getAttribute("value")?t+=Se(this.getAttribute("value")):void 0!==this.getAttribute("contenteditable")&&(t+=this.getAttribute("value")||""),this.fragment&&(e="script"!==this.name&&"style"!==this.name,t+=this.fragment.toString(e)),dl.test(this.template.e)||(t+="</"+this.template.e+">"),t)},cg=Xr,lg=ts,fg=function(t){this.init(t)};fg.prototype={bubble:Mp,detach:Up,find:Wp,findAll:zp,findAllComponents:Bp,findComponent:qp,findNextNode:$p,firstNode:Qp,getAttribute:Zp,init:wv,rebind:xv,render:ug,toString:hg,unbind:cg,unrender:lg};var dg=fg,pg=/^\s*$/,mg=/^\s*/,vg=function(t){var e,n,i,r;return e=t.split("\n"),n=e[0],void 0!==n&&pg.test(n)&&e.shift(),i=D(e),void 0!==i&&pg.test(i)&&e.pop(),r=e.reduce(ns,null),r&&(t=e.map(function(t){return t.replace(r,"")}).join("\n")),t},gg=is,yg=function(t,e){return e?t.split("\n").map(function(t,n){return n?e+t:t}).join("\n"):t},bg=function(t){var e,n;e=this.parentFragment=t.parentFragment,this.root=e.root,this.type=Hh,this.index=t.index,this.name=t.template.r,this.rendered=!1,this.fragment=this.fragmentToRender=this.fragmentToUnrender=null,Jd.init(this,t),this.keypath||((n=gg(this.root,this.name,e))?(Pd.call(this),this.isNamed=!0,this.setTemplate(n)):v('Could not find template for partial "%s"',this.name))};bg.prototype={bubble:function(){this.parentFragment.bubble()},detach:function(){return this.fragment.detach()},find:function(t){return this.fragment.find(t)},findAll:function(t,e){return this.fragment.findAll(t,e)},findComponent:function(t){return this.fragment.findComponent(t)},findAllComponents:function(t,e){return this.fragment.findAllComponents(t,e)},firstNode:function(){return this.fragment.firstNode()},findNextNode:function(){return this.parentFragment.findNextNode(this)},getPartialName:function(){return this.isNamed&&this.name?this.name:void 0===this.value?this.name:this.value},getValue:function(){return this.fragment.getValue()},rebind:function(t,e){this.isNamed||Yd.call(this,t,e),this.fragment&&this.fragment.rebind(t,e)},render:function(){return this.docFrag=document.createDocumentFragment(),this.update(),this.rendered=!0,this.docFrag},resolve:Jd.resolve,setValue:function(t){var e;void 0!==t&&t===this.value||(void 0!==t&&(e=gg(this.root,""+t,this.parentFragment)),!e&&this.name&&(e=gg(this.root,this.name,this.parentFragment))&&(Pd.call(this),this.isNamed=!0),e||v('Could not find template for partial "%s"',this.name,{ractive:this.root}),this.value=t,this.setTemplate(e||[]),this.bubble(),this.rendered&&fu.addView(this))},setTemplate:function(t){this.fragment&&(this.fragment.unbind(),this.rendered&&(this.fragmentToUnrender=this.fragment)),this.fragment=new lb({template:t,root:this.root,owner:this,pElement:this.parentFragment.pElement}),this.fragmentToRender=this.fragment},toString:function(t){var e,n,i,r;return e=this.fragment.toString(t),(n=this.parentFragment.items[this.index-1])&&1===n.type?(i=n.text.split("\n").pop(),(r=/^\s+$/.exec(i))?yg(e,r[0]):e):e},unbind:function(){this.isNamed||Pd.call(this),this.fragment&&this.fragment.unbind()},unrender:function(t){this.rendered&&(this.fragment&&this.fragment.unrender(t),this.rendered=!1)},update:function(){var t,e;this.fragmentToUnrender&&(this.fragmentToUnrender.unrender(!0),this.fragmentToUnrender=null),this.fragmentToRender&&(this.docFrag.appendChild(this.fragmentToRender.render()),this.fragmentToRender=null),this.rendered&&(t=this.parentFragment.getNode(),e=this.parentFragment.findNextNode(this),t.insertBefore(this.docFrag,e))}};var wg,xg,kg,Eg=bg,_g=us,Ag=hs,Sg=new Xa("detach"),Cg=cs,Og=ls,Pg=fs,Tg=ds,Fg=ps,Rg=ms,jg=function(t,e,n,i){var r=t.root,s=t.keypath;i?r.viewmodel.smartUpdate(s,e,i):r.viewmodel.mark(s)},Ng=[],Dg=["pop","push","reverse","shift","sort","splice","unshift"];Dg.forEach(function(t){wa(Ng,t,{value:function(){for(var e=arguments.length,n=Array(e),i=0;i<e;i++)n[i]=arguments[i];var r,s,o,a;for(r=fh(this,t,n),s=Array.prototype[t].apply(this,arguments),fu.start(),this._ractive.setting=!0,a=this._ractive.wrappers.length;a--;)o=this._ractive.wrappers[a],fu.addRactive(o.root),jg(o,this,0,r);return fu.end(),this._ractive.setting=!1,s}})}),wg={},wg.__proto__?(xg=function(t){t.__proto__=Ng},kg=function(t){t.__proto__=Array.prototype}):(xg=function(t){var e,n;for(e=Dg.length;e--;)n=Dg[e],wa(t,n,{value:Ng[n],configurable:!0})},kg=function(t){var e;for(e=Dg.length;e--;)delete t[Dg[e]]}),xg.unpatch=kg;var Ig,Lg,Vg,Mg=xg;Ig={filter:function(t){return s(t)&&(!t._ractive||!t._ractive.setting)},wrap:function(t,e,n){return new Lg(t,e,n)}},Lg=function(t,e,n){this.root=t,this.value=e,this.keypath=_(n),e._ractive||(wa(e,"_ractive",{value:{wrappers:[],instances:[],setting:!1},configurable:!0}),Mg(e)),e._ractive.instances[t._guid]||(e._ractive.instances[t._guid]=0,e._ractive.instances.push(t)),e._ractive.instances[t._guid]+=1,e._ractive.wrappers.push(this)},Lg.prototype={get:function(){return this.value},teardown:function(){var t,e,n,i,r;if(t=this.value,e=t._ractive,n=e.wrappers,i=e.instances,e.setting)return!1;if((r=n.indexOf(this))===-1)throw new Error(Vg);if(n.splice(r,1),n.length){if(i[this.root._guid]-=1,!i[this.root._guid]){if((r=i.indexOf(this.root))===-1)throw new Error(Vg);i.splice(r,1)}}else delete t._ractive,Mg.unpatch(this.value)}},Vg="Something went wrong in a rather interesting way";var Ug,Wg,zg=Ig,Bg=/^\s*[0-9]+\s*$/,qg=function(t){return Bg.test(t)?[]:{}};try{Object.defineProperty({},"test",{value:0}),Ug={filter:function(t,e,n){var i,r;return!!e&&(e=_(e),!((i=n.viewmodel.wrapped[e.parent.str])&&!i.magic)&&(r=n.viewmodel.get(e.parent),(!s(r)||!/^[0-9]+$/.test(e.lastKey))&&(r&&("object"==typeof r||"function"==typeof r))))},wrap:function(t,e,n){return new Wg(t,e,n)}},Wg=function(t,e,n){var i,r,s;if(n=_(n),this.magic=!0,this.ractive=t,this.keypath=n,this.value=e,this.prop=n.lastKey,i=n.parent,this.obj=i.isRoot?t.viewmodel.data:t.viewmodel.get(i),(r=this.originalDescriptor=Object.getOwnPropertyDescriptor(this.obj,this.prop))&&r.set&&(s=r.set._ractiveWrappers))return void(s.indexOf(this)===-1&&s.push(this));vs(this,e,r)},Wg.prototype={get:function(){return this.value},reset:function(t){if(!this.updating)return this.updating=!0,this.obj[this.prop]=t,fu.addRactive(this.ractive),this.ractive.viewmodel.mark(this.keypath,{keepExistingWrapper:!0}),this.updating=!1,!0},set:function(t,e){this.updating||(this.obj[this.prop]||(this.updating=!0,this.obj[this.prop]=qg(t),this.updating=!1),this.obj[this.prop][t]=e)},teardown:function(){var t,e,n,i,r;if(this.updating)return!1;t=Object.getOwnPropertyDescriptor(this.obj,this.prop),(e=t&&t.set)&&(i=e._ractiveWrappers,r=i.indexOf(this),r!==-1&&i.splice(r,1),i.length||(n=this.obj[this.prop],Object.defineProperty(this.obj,this.prop,this.originalDescriptor||{writable:!0,enumerable:!0,configurable:!0}),this.obj[this.prop]=n))}}}catch(t){Ug=!1}var $g,Qg,Zg=Ug;Zg&&($g={filter:function(t,e,n){return Zg.filter(t,e,n)&&zg.filter(t)},wrap:function(t,e,n){return new Qg(t,e,n)}},Qg=function(t,e,n){this.value=e,this.magic=!0,this.magicWrapper=Zg.wrap(t,e,n),this.arrayWrapper=zg.wrap(t,e,n)},Qg.prototype={get:function(){return this.value},teardown:function(){this.arrayWrapper.teardown(),this.magicWrapper.teardown()},reset:function(t){return this.magicWrapper.reset(t)}});var Hg=$g,Kg=gs,Gg={},Yg=ws,Jg=xs,Xg=_s,ty=Ps,ey=Ts,ny=function(t,e){this.computation=t,this.viewmodel=t.viewmodel,this.ref=e,this.root=this.viewmodel.ractive,this.parentFragment=this.root.component&&this.root.component.parentFragment};ny.prototype={resolve:function(t){this.computation.softDeps.push(t),this.computation.unresolvedDeps[t.str]=null,this.viewmodel.register(t,this.computation,"computed")}};var iy=ny,ry=function(t,e){this.key=t,this.getter=e.getter,this.setter=e.setter,this.hardDeps=e.deps||[],this.softDeps=[],this.unresolvedDeps={},this.depValues={},this._dirty=this._firstRun=!0};ry.prototype={constructor:ry,init:function(t){var e,n=this;this.viewmodel=t,this.bypass=!0,e=t.get(this.key),t.clearCache(this.key.str),this.bypass=!1,this.setter&&void 0!==e&&this.set(e),this.hardDeps&&this.hardDeps.forEach(function(e){return t.register(e,n,"computed")})},invalidate:function(){this._dirty=!0},get:function(){var t,e,n=this,i=!1;if(this.getting){return p("The "+this.key.str+" computation indirectly called itself. This probably indicates a bug in the computation. It is commonly caused by `array.sort(...)` - if that's the case, clone the array first with `array.slice().sort(...)`"),this.value}if(this.getting=!0,this._dirty){if(this._firstRun||!this.hardDeps.length&&!this.softDeps.length?i=!0:[this.hardDeps,this.softDeps].forEach(function(t){var e,r,s;if(!i)for(s=t.length;s--;)if(e=t[s],r=n.viewmodel.get(e),!a(r,n.depValues[e.str]))return n.depValues[e.str]=r,void(i=!0)}),i){this.viewmodel.capture();try{this.value=this.getter()}catch(t){m('Failed to compute "%s"',this.key.str),f(t.stack||t),this.value=void 0}t=this.viewmodel.release(),e=this.updateDependencies(t),e&&[this.hardDeps,this.softDeps].forEach(function(t){t.forEach(function(t){n.depValues[t.str]=n.viewmodel.get(t)})})}this._dirty=!1}return this.getting=this._firstRun=!1,this.value},set:function(t){if(this.setting)return void(this.value=t);if(!this.setter)throw new Error("Computed properties without setters are read-only. (This may change in a future version of Ractive!)");this.setter(t)},updateDependencies:function(t){var e,n,i,r,s;for(n=this.softDeps,e=n.length;e--;)i=n[e],t.indexOf(i)===-1&&(r=!0,this.viewmodel.unregister(i,this,"computed"));for(e=t.length;e--;)i=t[e],n.indexOf(i)!==-1||this.hardDeps&&this.hardDeps.indexOf(i)!==-1||(r=!0,Fs(this.viewmodel,i)&&!this.unresolvedDeps[i.str]?(s=new iy(this,i.str),t.splice(e,1),this.unresolvedDeps[i.str]=s,fu.addUnresolved(s)):this.viewmodel.register(i,this,"computed"));return r&&(this.softDeps=t.slice()),r}};var sy=ry,oy=Rs,ay={FAILED_LOOKUP:!0},uy=js,hy={},cy=Ds,ly=Is,fy=function(t,e){this.localKey=t,this.keypath=e.keypath,this.origin=e.origin,this.deps=[],this.unresolved=[],this.resolved=!1};fy.prototype={forceResolution:function(){this.keypath=this.localKey,this.setup()},get:function(t,e){if(this.resolved)return this.origin.get(this.map(t),e)},getValue:function(){if(this.keypath)return this.origin.get(this.keypath)},initViewmodel:function(t){this.local=t,this.setup()},map:function(t){return void 0===typeof this.keypath?this.localKey:t.replace(this.localKey,this.keypath)},register:function(t,e,n){this.deps.push({keypath:t,dep:e,group:n}),this.resolved&&this.origin.register(this.map(t),e,n)},resolve:function(t){void 0!==this.keypath&&this.unbind(!0),this.keypath=t,this.setup()},set:function(t,e){this.resolved||this.forceResolution(),this.origin.set(this.map(t),e)},setup:function(){var t=this;void 0!==this.keypath&&(this.resolved=!0,this.deps.length&&(this.deps.forEach(function(e){var n=t.map(e.keypath);if(t.origin.register(n,e.dep,e.group),e.dep.setValue)e.dep.setValue(t.origin.get(n));else{if(!e.dep.invalidate)throw new Error("An unexpected error occurred. Please raise an issue at https://github.com/ractivejs/ractive/issues - thanks!");e.dep.invalidate()}}),this.origin.mark(this.keypath)))},setValue:function(t){if(!this.keypath)throw new Error("Mapping does not have keypath, cannot set value. Please raise an issue at https://github.com/ractivejs/ractive/issues - thanks!");this.origin.set(this.keypath,t)},unbind:function(t){var e=this;t||delete this.local.mappings[this.localKey],this.resolved&&(this.deps.forEach(function(t){e.origin.unregister(e.map(t.keypath),t.dep,t.group)}),this.tracker&&this.origin.unregister(this.keypath,this.tracker))},unregister:function(t,e,n){var i,r;if(this.resolved){for(i=this.deps,r=i.length;r--;)if(i[r].dep===e){i.splice(r,1);break}this.origin.unregister(this.map(t),e,n)}}};var dy=Ls,py=function(t,e){var n,i,r;return n={},i=0,t.map(function(t,s){var o,a,u;a=i,u=e.length;do{if((o=e.indexOf(t,a))===-1)return r=!0,-1;a=o+1}while(n[o]&&a<u);return o===i&&(i+=1),o!==s&&(r=!0),n[o]=!0,o})},my=Vs,vy={},gy=Ws,yy=Bs,by=qs,wy=$s,xy=Zs,ky={implicit:!0},Ey={noCascade:!0},_y=Ks,Ay=Gs,Sy=function(t){var e,n,i=t.adapt,r=t.data,s=t.ractive,o=t.computed,a=t.mappings;this.ractive=s,this.adaptors=i,this.onchange=t.onchange,this.cache={},this.cacheMap=ba(null),this.deps={computed:ba(null),default:ba(null)},this.depsMap={computed:ba(null),default:ba(null)},this.patternObservers=[],this.specials=ba(null),this.wrapped=ba(null),this.computations=ba(null),this.captureGroups=[],this.unresolvedImplicitDependencies=[],this.changes=[],this.implicitChanges={},this.noCascade={},this.data=r,this.mappings=ba(null);for(e in a)this.map(_(e),a[e]);if(r)for(e in r)(n=this.mappings[e])&&void 0===n.getValue()&&n.setValue(r[e]);for(e in o)a&&e in a&&l("Cannot map to a computed property ('%s')",e),this.compute(_(e),o[e]);this.ready=!0};Sy.prototype={adapt:Kg,applyChanges:Xg,capture:ty,clearCache:ey,compute:oy,get:uy,init:cy,map:ly,mark:dy,merge:my,register:gy,release:yy,reset:by,set:wy,smartUpdate:xy,teardown:_y,unregister:Ay};var Cy=Sy;Js.prototype={constructor:Js,begin:function(t){this.inProcess[t._guid]=!0},end:function(t){var e=t.parent;e&&this.inProcess[e._guid]?Xs(this.queue,e).push(t):to(this,t),delete this.inProcess[t._guid]}};var Oy=Js,Py=eo,Ty=/\$\{([^\}]+)\}/g,Fy=new Xa("construct"),Ry=new Xa("config"),jy=new Oy("init"),Ny=0,Dy=["adaptors","components","decorators","easing","events","interpolators","partials","transitions"],Iy=so,Ly=co;co.prototype={bubble:function(){this.dirty||(this.dirty=!0,fu.addView(this))},update:function(){this.callback(this.fragment.getValue()),this.dirty=!1},rebind:function(t,e){this.fragment.rebind(t,e)},unbind:function(){this.fragment.unbind()}};var Vy=function(t,e,n,r,o){var a,u,h,c,l,f,d={},p={},v={},g=[];for(u=t.parentFragment,h=t.root,o=o||{},i(d,o),o.content=r||[],d[""]=o.content,e.defaults.el&&m("The <%s/> component has a default `el` property; it has been disregarded",t.name),c=u;c;){if(c.owner.type===tc){l=c.owner.container;break}c=c.parent}return n&&Object.keys(n).forEach(function(e){var i,r,o=n[e];if("string"==typeof o)i=bf(o),p[e]=i?i.value:o;else if(0===o)p[e]=!0;else{if(!s(o))throw new Error("erm wut");fo(o)?(v[e]={origin:t.root.viewmodel,keypath:void 0},r=lo(t,o[0],function(t){t.isSpecial?f?a.set(e,t.value):(p[e]=t.value,delete v[e]):f?a.viewmodel.mappings[e].resolve(t):v[e].keypath=t})):r=new Ly(t,o,function(t){f?a.set(e,t):p[e]=t}),g.push(r)}}),a=ba(e.prototype),Iy(a,{el:null,append:!0,data:p,partials:o,magic:h.magic||e.defaults.magic,modifyArrays:h.modifyArrays,adapt:h.adapt},{parent:h,component:t,container:l,mappings:v,inlinePartials:d,cssIds:u.cssIds}),f=!0,t.resolvers=g,a},My=po,Uy=function(t){var e,n;for(e=t.root;e;)(n=e._liveComponentQueries["_"+t.name])&&n.push(t.instance),e=e.parent},Wy=vo,zy=go,By=yo,qy=bo,$y=wo,Qy=new Xa("teardown"),Zy=ko,Hy=function(t,e){this.init(t,e)};Hy.prototype={detach:Ag,find:Cg,findAll:Og,findAllComponents:Pg,findComponent:Tg,findNextNode:Fg,firstNode:Rg,init:Wy,rebind:zy,render:By,toString:qy,unbind:$y,unrender:Zy};var Ky=Hy,Gy=function(t){this.type=Kh,this.value=t.template.c};Gy.prototype={detach:Sd,firstNode:function(){return this.node},render:function(){return this.node||(this.node=document.createComment(this.value)),this.node},toString:function(){return"<!--"+this.value+"-->"},unrender:function(t){t&&this.node.parentNode.removeChild(this.node)}};var Yy=Gy,Jy=function(t){var e,n;this.type=tc,this.container=e=t.parentFragment.root,this.component=n=e.component,
this.container=e,this.containerFragment=t.parentFragment,this.parentFragment=n.parentFragment;var i=this.name=t.template.n||"",r=e._inlinePartials[i];r||(m('Could not find template for partial "'+i+'"',{ractive:t.root}),r=[]),this.fragment=new lb({owner:this,root:e.parent,template:r,pElement:this.containerFragment.pElement}),s(n.yielders[i])?n.yielders[i].push(this):n.yielders[i]=[this],fu.scheduleTask(function(){if(n.yielders[i].length>1)throw new Error("A component template can only have one {{yield"+(i?" "+i:"")+"}} declaration at a time")})};Jy.prototype={detach:function(){return this.fragment.detach()},find:function(t){return this.fragment.find(t)},findAll:function(t,e){return this.fragment.findAll(t,e)},findComponent:function(t){return this.fragment.findComponent(t)},findAllComponents:function(t,e){return this.fragment.findAllComponents(t,e)},findNextNode:function(){return this.containerFragment.findNextNode(this)},firstNode:function(){return this.fragment.firstNode()},getValue:function(t){return this.fragment.getValue(t)},render:function(){return this.fragment.render()},unbind:function(){this.fragment.unbind()},unrender:function(t){this.fragment.unrender(t),I(this.component.yielders[this.name],this)},rebind:function(t,e){this.fragment.rebind(t,e)},toString:function(){return this.fragment.toString()}};var Xy=Jy,tb=function(t){this.declaration=t.template.a};tb.prototype={init:Oa,render:Oa,unrender:Oa,teardown:Oa,toString:function(){return"<!DOCTYPE"+this.declaration+">"}};var eb=tb,nb=Eo,ib=Ao,rb=So,sb=Co,ob=To,ab=Ro,ub=function(t){this.init(t)};ub.prototype={bubble:pd,detach:md,find:vd,findAll:gd,findAllComponents:yd,findComponent:bd,findNextNode:wd,firstNode:xd,getArgsList:Ed,getNode:_d,getValue:Ad,init:nb,rebind:ib,registerIndexRef:function(t){var e=this.registeredIndexRefs;e.indexOf(t)===-1&&e.push(t)},render:rb,toString:sb,unbind:ob,unregisterIndexRef:function(t){var e=this.registeredIndexRefs;e.splice(e.indexOf(t),1)},unrender:ab};var hb,cb,lb=ub,fb=jo,db=["template","partials","components","decorators","events"],pb=new Xa("reset"),mb=function(t,e){function n(e,i,r){r&&r.partials[t]||e.forEach(function(e){e.type===Hh&&e.getPartialName()===t&&i.push(e),e.fragment&&n(e.fragment.items,i,r),s(e.fragments)?n(e.fragments,i,r):s(e.items)?n(e.items,i,r):e.type===Xh&&e.instance&&n(e.instance.fragment.items,i,e.instance),e.type===Zh&&(s(e.attributes)&&n(e.attributes,i,r),s(e.conditionalAttributes)&&n(e.conditionalAttributes,i,r))})}var i,r=[];return n(this.fragment.items,r),this.partials[t]=e,i=fu.start(this,!0),r.forEach(function(e){e.value=void 0,e.setValue(t)}),fu.end(),i},vb=No,gb=ph("reverse"),yb=Do,bb=ph("shift"),wb=ph("sort"),xb=ph("splice"),kb=Lo,Eb=Vo,_b=new Xa("teardown"),Ab=Uo,Sb=Wo,Cb=zo,Ob=new Xa("unrender"),Pb=ph("unshift"),Tb=Bo,Fb=new Xa("update"),Rb=qo,jb={add:Za,animate:yu,detach:wu,find:ku,findAll:Fu,findAllComponents:Ru,findComponent:ju,findContainer:Nu,findParent:Du,fire:Mu,get:Uu,insert:zu,merge:qu,observe:sh,observeOnce:oh,off:hh,on:ch,once:lh,pop:mh,push:vh,render:kh,reset:fb,resetPartial:mb,resetTemplate:vb,reverse:gb,set:yb,shift:bb,sort:wb,splice:xb,subtract:kb,teardown:Eb,toggle:Ab,toHTML:Sb,toHtml:Sb,unrender:Cb,unshift:Pb,update:Tb,updateModel:Rb},Nb=function(t,e,n){return n||Qo(t,e)?function(){var n,i="_super"in this,r=this._super;return this._super=e,n=t.apply(this,arguments),i&&(this._super=r),n}:t},Db=Zo,Ib=Yo,Lb=function(t){var e,n,i={};return t&&(e=t._ractive)?(i.ractive=e.root,i.keypath=e.keypath.str,i.index={},(n=Vd(e.proxy.parentFragment))&&(i.index=Vd.resolve(n)),i):i};hb=function(t){if(!(this instanceof hb))return new hb(t);Iy(this,t)},cb={DEBUG:{writable:!0,value:!0},DEBUG_PROMISES:{writable:!0,value:!0},extend:{value:Ib},getNodeInfo:{value:Lb},parse:{value:Bf},Promise:{value:iu},svg:{value:ra},magic:{value:na},VERSION:{value:"0.7.3"},adaptors:{writable:!0,value:{}},components:{writable:!0,value:{}},decorators:{writable:!0,value:{}},easing:{writable:!0,value:ha},events:{writable:!0,value:{}},interpolators:{writable:!0,value:Ia},partials:{writable:!0,value:{}},transitions:{writable:!0,value:{}}},xa(hb,cb),hb.prototype=i(jb,ua),hb.prototype.constructor=hb,hb.defaults=hb.prototype;if("function"!=typeof Date.now||"function"!=typeof String.prototype.trim||"function"!=typeof Object.keys||"function"!=typeof Array.prototype.indexOf||"function"!=typeof Array.prototype.forEach||"function"!=typeof Array.prototype.map||"function"!=typeof Array.prototype.filter||"undefined"!=typeof window&&"function"!=typeof window.addEventListener)throw new Error("It looks like you're attempting to use Ractive.js in an older browser. You'll need to use one of the 'legacy builds' in order to continue - see http://docs.ractivejs.org/latest/legacy-builds for more information.");var Vb=hb;return Vb});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
